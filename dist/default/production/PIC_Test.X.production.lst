

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Apr 24 10:38:08 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F883
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	inittext,global,class=CODE,space=0,delta=2
    13                           	psect	clrtext,global,class=CODE,space=0,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    18                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2,group=1
    34                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2,group=1
    35                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2,group=1
    36                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,space=0,delta=2
    38                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    39                           	dabs	1,0x7E,2
    40     0000                     
    41                           ; Generated 12/10/2023 GMT
    42                           ; 
    43                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution. Publication is not required when
    57                           ;        this file is used in an embedded application.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC16F883 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75     0004                     fsr             equ	4
    76     0004                     fsr0            equ	4
    77     0000                     indf            equ	0
    78     0000                     indf0           equ	0
    79     0002                     pc              equ	2
    80     0002                     pcl             equ	2
    81     000A                     pclath          equ	10
    82     0003                     status          equ	3
    83     0000                     INDF            equ	0	;# 
    84     0001                     TMR0            equ	1	;# 
    85     0002                     PCL             equ	2	;# 
    86     0003                     STATUS          equ	3	;# 
    87     0004                     FSR             equ	4	;# 
    88     0005                     PORTA           equ	5	;# 
    89     0006                     PORTB           equ	6	;# 
    90     0007                     PORTC           equ	7	;# 
    91     0009                     PORTE           equ	9	;# 
    92     000A                     PCLATH          equ	10	;# 
    93     000B                     INTCON          equ	11	;# 
    94     000C                     PIR1            equ	12	;# 
    95     000D                     PIR2            equ	13	;# 
    96     000E                     TMR1            equ	14	;# 
    97     000E                     TMR1L           equ	14	;# 
    98     000F                     TMR1H           equ	15	;# 
    99     0010                     T1CON           equ	16	;# 
   100     0011                     TMR2            equ	17	;# 
   101     0012                     T2CON           equ	18	;# 
   102     0013                     SSPBUF          equ	19	;# 
   103     0014                     SSPCON          equ	20	;# 
   104     0015                     CCPR1           equ	21	;# 
   105     0015                     CCPR1L          equ	21	;# 
   106     0016                     CCPR1H          equ	22	;# 
   107     0017                     CCP1CON         equ	23	;# 
   108     0018                     RCSTA           equ	24	;# 
   109     0019                     TXREG           equ	25	;# 
   110     001A                     RCREG           equ	26	;# 
   111     001B                     CCPR2           equ	27	;# 
   112     001B                     CCPR2L          equ	27	;# 
   113     001C                     CCPR2H          equ	28	;# 
   114     001D                     CCP2CON         equ	29	;# 
   115     001E                     ADRESH          equ	30	;# 
   116     001F                     ADCON0          equ	31	;# 
   117     0081                     OPTION_REG      equ	129	;# 
   118     0085                     TRISA           equ	133	;# 
   119     0086                     TRISB           equ	134	;# 
   120     0087                     TRISC           equ	135	;# 
   121     0089                     TRISE           equ	137	;# 
   122     008C                     PIE1            equ	140	;# 
   123     008D                     PIE2            equ	141	;# 
   124     008E                     PCON            equ	142	;# 
   125     008F                     OSCCON          equ	143	;# 
   126     0090                     OSCTUNE         equ	144	;# 
   127     0091                     SSPCON2         equ	145	;# 
   128     0092                     PR2             equ	146	;# 
   129     0093                     SSPADD          equ	147	;# 
   130     0093                     SSPMSK          equ	147	;# 
   131     0093                     MSK             equ	147	;# 
   132     0094                     SSPSTAT         equ	148	;# 
   133     0095                     WPUB            equ	149	;# 
   134     0096                     IOCB            equ	150	;# 
   135     0097                     VRCON           equ	151	;# 
   136     0098                     TXSTA           equ	152	;# 
   137     0099                     SPBRG           equ	153	;# 
   138     009A                     SPBRGH          equ	154	;# 
   139     009B                     PWM1CON         equ	155	;# 
   140     009C                     ECCPAS          equ	156	;# 
   141     009D                     PSTRCON         equ	157	;# 
   142     009E                     ADRESL          equ	158	;# 
   143     009F                     ADCON1          equ	159	;# 
   144     0105                     WDTCON          equ	261	;# 
   145     0107                     CM1CON0         equ	263	;# 
   146     0108                     CM2CON0         equ	264	;# 
   147     0109                     CM2CON1         equ	265	;# 
   148     010C                     EEDATA          equ	268	;# 
   149     010C                     EEDAT           equ	268	;# 
   150     010D                     EEADR           equ	269	;# 
   151     010E                     EEDATH          equ	270	;# 
   152     010F                     EEADRH          equ	271	;# 
   153     0185                     SRCON           equ	389	;# 
   154     0187                     BAUDCTL         equ	391	;# 
   155     0188                     ANSEL           equ	392	;# 
   156     0189                     ANSELH          equ	393	;# 
   157     018C                     EECON1          equ	396	;# 
   158     018D                     EECON2          equ	397	;# 
   159     0000                     INDF            equ	0	;# 
   160     0001                     TMR0            equ	1	;# 
   161     0002                     PCL             equ	2	;# 
   162     0003                     STATUS          equ	3	;# 
   163     0004                     FSR             equ	4	;# 
   164     0005                     PORTA           equ	5	;# 
   165     0006                     PORTB           equ	6	;# 
   166     0007                     PORTC           equ	7	;# 
   167     0009                     PORTE           equ	9	;# 
   168     000A                     PCLATH          equ	10	;# 
   169     000B                     INTCON          equ	11	;# 
   170     000C                     PIR1            equ	12	;# 
   171     000D                     PIR2            equ	13	;# 
   172     000E                     TMR1            equ	14	;# 
   173     000E                     TMR1L           equ	14	;# 
   174     000F                     TMR1H           equ	15	;# 
   175     0010                     T1CON           equ	16	;# 
   176     0011                     TMR2            equ	17	;# 
   177     0012                     T2CON           equ	18	;# 
   178     0013                     SSPBUF          equ	19	;# 
   179     0014                     SSPCON          equ	20	;# 
   180     0015                     CCPR1           equ	21	;# 
   181     0015                     CCPR1L          equ	21	;# 
   182     0016                     CCPR1H          equ	22	;# 
   183     0017                     CCP1CON         equ	23	;# 
   184     0018                     RCSTA           equ	24	;# 
   185     0019                     TXREG           equ	25	;# 
   186     001A                     RCREG           equ	26	;# 
   187     001B                     CCPR2           equ	27	;# 
   188     001B                     CCPR2L          equ	27	;# 
   189     001C                     CCPR2H          equ	28	;# 
   190     001D                     CCP2CON         equ	29	;# 
   191     001E                     ADRESH          equ	30	;# 
   192     001F                     ADCON0          equ	31	;# 
   193     0081                     OPTION_REG      equ	129	;# 
   194     0085                     TRISA           equ	133	;# 
   195     0086                     TRISB           equ	134	;# 
   196     0087                     TRISC           equ	135	;# 
   197     0089                     TRISE           equ	137	;# 
   198     008C                     PIE1            equ	140	;# 
   199     008D                     PIE2            equ	141	;# 
   200     008E                     PCON            equ	142	;# 
   201     008F                     OSCCON          equ	143	;# 
   202     0090                     OSCTUNE         equ	144	;# 
   203     0091                     SSPCON2         equ	145	;# 
   204     0092                     PR2             equ	146	;# 
   205     0093                     SSPADD          equ	147	;# 
   206     0093                     SSPMSK          equ	147	;# 
   207     0093                     MSK             equ	147	;# 
   208     0094                     SSPSTAT         equ	148	;# 
   209     0095                     WPUB            equ	149	;# 
   210     0096                     IOCB            equ	150	;# 
   211     0097                     VRCON           equ	151	;# 
   212     0098                     TXSTA           equ	152	;# 
   213     0099                     SPBRG           equ	153	;# 
   214     009A                     SPBRGH          equ	154	;# 
   215     009B                     PWM1CON         equ	155	;# 
   216     009C                     ECCPAS          equ	156	;# 
   217     009D                     PSTRCON         equ	157	;# 
   218     009E                     ADRESL          equ	158	;# 
   219     009F                     ADCON1          equ	159	;# 
   220     0105                     WDTCON          equ	261	;# 
   221     0107                     CM1CON0         equ	263	;# 
   222     0108                     CM2CON0         equ	264	;# 
   223     0109                     CM2CON1         equ	265	;# 
   224     010C                     EEDATA          equ	268	;# 
   225     010C                     EEDAT           equ	268	;# 
   226     010D                     EEADR           equ	269	;# 
   227     010E                     EEDATH          equ	270	;# 
   228     010F                     EEADRH          equ	271	;# 
   229     0185                     SRCON           equ	389	;# 
   230     0187                     BAUDCTL         equ	391	;# 
   231     0188                     ANSEL           equ	392	;# 
   232     0189                     ANSELH          equ	393	;# 
   233     018C                     EECON1          equ	396	;# 
   234     018D                     EECON2          equ	397	;# 
   235                           
   236                           	psect	idataBANK0
   237     0EC7                     __pidataBANK0:
   238                           
   239                           ;initializer for _minimumrunningvoltage
   240     0EC7  34AA               	retlw	170
   241     0EC8  3400               	retlw	0
   242                           
   243                           ;initializer for _maxvoltagelimit
   244     0EC9  34E6               	retlw	230
   245     0ECA  3400               	retlw	0
   246                           
   247                           ;initializer for _minvoltagelimit
   248     0ECB  34C8               	retlw	200
   249     0ECC  3400               	retlw	0
   250                           
   251                           ;initializer for _maxruntimeindex
   252     0ECD  3403               	retlw	3
   253                           
   254                           	psect	idataBANK1
   255     0EFA                     __pidataBANK1:
   256                           
   257                           ;initializer for _maxruntime
   258     0EFA  341E               	retlw	30
   259     0EFB  3400               	retlw	0
   260     0EFC  342D               	retlw	45
   261     0EFD  3400               	retlw	0
   262     0EFE  343C               	retlw	60
   263     0EFF  3400               	retlw	0
   264     0F00  3478               	retlw	120
   265     0F01  3400               	retlw	0
   266     0F02  34FF               	retlw	255
   267     0F03  34FF               	retlw	255
   268                           
   269                           ;initializer for _sensorbuffer
   270     0F04  3410               	retlw	16
   271     0F05  3427               	retlw	39
   272                           
   273                           ;initializer for _maxvoltageerrortime
   274     0F06  340A               	retlw	10
   275     0F07  3400               	retlw	0
   276                           
   277                           ;initializer for _maximumrinningvoltage
   278     0F08  341D               	retlw	29
   279     0F09  3401               	retlw	1
   280     0010                     _T1CONbits      set	16
   281     0010                     _T1CON          set	16
   282     0006                     _PORTBbits      set	6
   283     000E                     _TMR1L          set	14
   284     000F                     _TMR1H          set	15
   285     000C                     _PIR1bits       set	12
   286     000B                     _INTCONbits     set	11
   287     0001                     _TMR0           set	1
   288     001E                     _ADRESH         set	30
   289     001F                     _ADCON0bits     set	31
   290     0007                     _PORTC          set	7
   291     0006                     _PORTB          set	6
   292     0005                     _PORTA          set	5
   293     001F                     _ADCON0         set	31
   294     0007                     _PORTCbits      set	7
   295     0005                     _PORTAbits      set	5
   296     008C                     _PIE1bits       set	140
   297     0081                     _OPTION_REGbits set	129
   298     009E                     _ADRESL         set	158
   299     009F                     _ADCON1         set	159
   300     0087                     _TRISC          set	135
   301     0086                     _TRISB          set	134
   302     0085                     _TRISA          set	133
   303     008F                     _OSCCONbits     set	143
   304     010C                     _EEDATA         set	268
   305     010D                     _EEADR          set	269
   306     018D                     _EECON2         set	397
   307     018C                     _EECON1bits     set	396
   308     0189                     _ANSELH         set	393
   309     0188                     _ANSEL          set	392
   310                           
   311                           	psect	cinit
   312     000D                     start_initialization:	
   313                           ; #config settings
   314                           
   315     000D                     __initialization:
   316                           
   317                           ; Initialize objects allocated to BANK1
   318     000D  1383               	bcf	3,7	;select IRP bank0
   319     000E  30CE               	movlw	low (__pdataBANK1+16)
   320     000F  00FD               	movwf	btemp+-1
   321     0010  300E               	movlw	high __pidataBANK1
   322     0011  00FE               	movwf	btemp
   323     0012  30FA               	movlw	low __pidataBANK1
   324     0013  00FF               	movwf	btemp+1
   325     0014  30BE               	movlw	low __pdataBANK1
   326     0015  0084               	movwf	4
   327     0016  158A  271F  118A   	fcall	init_ram0
   328                           
   329                           ; Initialize objects allocated to BANK0
   330     0019  306F               	movlw	low (__pdataBANK0+7)
   331     001A  00FD               	movwf	btemp+-1
   332     001B  300E               	movlw	high __pidataBANK0
   333     001C  00FE               	movwf	btemp
   334     001D  30C7               	movlw	low __pidataBANK0
   335     001E  00FF               	movwf	btemp+1
   336     001F  3068               	movlw	low __pdataBANK0
   337     0020  0084               	movwf	4
   338     0021  158A  271F  118A   	fcall	init_ram0
   339                           
   340                           ; Clear objects allocated to BANK1
   341     0024  30A0               	movlw	low __pbssBANK1
   342     0025  0084               	movwf	4
   343     0026  30BE               	movlw	low (__pbssBANK1+30)
   344     0027  118A  27F8  118A   	fcall	clear_ram0
   345                           
   346                           ; Clear objects allocated to BANK0
   347     002A  3020               	movlw	low __pbssBANK0
   348     002B  0084               	movwf	4
   349     002C  3047               	movlw	low (__pbssBANK0+39)
   350     002D  118A  27F8  118A   	fcall	clear_ram0
   351                           
   352                           ; Clear objects allocated to COMMON
   353     0030  01FA               	clrf	__pbssCOMMON& (0+127)
   354     0031  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   355     0032                     end_of_initialization:	
   356                           ;End of C runtime variable initialization code
   357                           
   358     0032                     __end_of__initialization:
   359     0032  0183               	clrf	3
   360     0033  118A  2835         	ljmp	_main	;jump to C main() function
   361                           
   362                           	psect	bssCOMMON
   363     007A                     __pbssCOMMON:
   364     007A                     _low_sensor_high_count:
   365     007A                     	ds	1
   366     007B                     _reading_count:
   367     007B                     	ds	1
   368                           
   369                           	psect	bssBANK0
   370     0020                     __pbssBANK0:
   371     0020                     _lastsensorcheck:
   372     0020                     	ds	4
   373     0024                     _lastvoltageerror:
   374     0024                     	ds	4
   375     0028                     _millis:
   376     0028                     	ds	4
   377     002C                     _seconds_counter:
   378     002C                     	ds	4
   379     0030                     _lastflowcheck:
   380     0030                     	ds	2
   381     0032                     _buzzer_active:
   382     0032                     	ds	1
   383     0033                     _preflowactive:
   384     0033                     	ds	1
   385     0034                     _flowactive:
   386     0034                     	ds	1
   387     0035                     _pretankempty:
   388     0035                     	ds	1
   389     0036                     _tankempty:
   390     0036                     	ds	1
   391     0037                     _motorrunning:
   392     0037                     	ds	1
   393     0038                     _timeouterror:
   394     0038                     	ds	1
   395     0039                     _dryrunerror:
   396     0039                     	ds	1
   397     003A                     _voltageerror:
   398     003A                     	ds	1
   399     003B                     _mannualon:
   400     003B                     	ds	1
   401     003C                     _sensors_reading_in_progress:
   402     003C                     	ds	1
   403     003D                     _sensors_reading_complete:
   404     003D                     	ds	1
   405     003E                     _flow_sensor_high_count:
   406     003E                     	ds	1
   407     003F                     _high_sensor_high_count:
   408     003F                     	ds	1
   409     0040                     _voltage:
   410     0040                     	ds	1
   411     0041                     _settingsmode:
   412     0041                     	ds	1
   413     0042                     _smc:
   414     0042                     	ds	1
   415     0043                     _to:
   416     0043                     	ds	1
   417     0044                     _flow_sensor_active:
   418     0044                     	ds	1
   419     0045                     _high_sensor_active:
   420     0045                     	ds	1
   421     0046                     _low_sensor_active:
   422     0046                     	ds	1
   423                           
   424                           	psect	dataBANK0
   425     0068                     __pdataBANK0:
   426     0068                     _minimumrunningvoltage:
   427     0068                     	ds	2
   428     006A                     _maxvoltagelimit:
   429     006A                     	ds	2
   430     006C                     _minvoltagelimit:
   431     006C                     	ds	2
   432     006E                     _maxruntimeindex:
   433     006E                     	ds	1
   434                           
   435                           	psect	bssBANK1
   436     00A0                     __pbssBANK1:
   437     00A0                     _lt:
   438     00A0                     	ds	4
   439     00A4                     _buzzer_start_time:
   440     00A4                     	ds	4
   441     00A8                     _motorstarttime:
   442     00A8                     	ds	4
   443     00AC                     _lastdryruncheck:
   444     00AC                     	ds	4
   445     00B0                     _last_millis:
   446     00B0                     	ds	4
   447     00B4                     _buzzer_duration:
   448     00B4                     	ds	2
   449     00B6                     _voltagesum:
   450     00B6                     	ds	2
   451     00B8                     _dryruntime:
   452     00B8                     	ds	2
   453     00BA                     _voltageraw:
   454     00BA                     	ds	2
   455     00BC                     _potraw:
   456     00BC                     	ds	2
   457                           
   458                           	psect	dataBANK1
   459     00BE                     __pdataBANK1:
   460     00BE                     _maxruntime:
   461     00BE                     	ds	10
   462     00C8                     _sensorbuffer:
   463     00C8                     	ds	2
   464     00CA                     _maxvoltageerrortime:
   465     00CA                     	ds	2
   466     00CC                     _maximumrinningvoltage:
   467     00CC                     	ds	2
   468                           
   469                           	psect	inittext
   470     0F1B                     init_fetch0:	
   471                           ;	Called with low address in FSR and high address in W
   472                           
   473     0F1B  087E               	movf	btemp,w
   474     0F1C  008A               	movwf	10
   475     0F1D  087F               	movf	btemp+1,w
   476     0F1E  0082               	movwf	2
   477     0F1F                     init_ram0:	
   478                           ;Called with:
   479                           ;	high address of idata address in btemp 
   480                           ;	low address of idata address in btemp+1 
   481                           ;	low address of data in FSR
   482                           ;	high address + 1 of data in btemp-1
   483                           
   484     0F1F  158A  271B  158A   	fcall	init_fetch0
   485     0F22  0080               	movwf	0
   486     0F23  0A84               	incf	4,f
   487     0F24  0804               	movf	4,w
   488     0F25  067D               	xorwf	btemp+-1,w
   489     0F26  1903               	btfsc	3,2
   490     0F27  3400               	retlw	0
   491     0F28  0AFF               	incf	btemp+1,f
   492     0F29  1903               	btfsc	3,2
   493     0F2A  0AFE               	incf	btemp,f
   494     0F2B  2F1F               	goto	init_ram0
   495                           
   496                           	psect	clrtext
   497     07F8                     clear_ram0:	
   498                           ;	Called with FSR containing the base address, and
   499                           ;	W with the last address+1
   500                           
   501     07F8  0064               	clrwdt	;clear the watchdog before getting into this loop
   502     07F9                     clrloop0:
   503     07F9  0180               	clrf	0	;clear RAM location pointed to by FSR
   504     07FA  0A84               	incf	4,f	;increment pointer
   505     07FB  0604               	xorwf	4,w	;XOR with final address
   506     07FC  1903               	btfsc	3,2	;have we reached the end yet?
   507     07FD  3400               	retlw	0	;all done for this memory range, return
   508     07FE  0604               	xorwf	4,w	;XOR again to restore value
   509     07FF  2FF9               	goto	clrloop0	;do the next byte
   510                           
   511                           	psect	cstackBANK1
   512     00CE                     __pcstackBANK1:
   513     00CE                     main@is_long_press:
   514                           
   515                           ; 1 bytes @ 0x0
   516     00CE                     	ds	1
   517     00CF                     main@i:
   518                           
   519                           ; 1 bytes @ 0x1
   520     00CF                     	ds	1
   521                           
   522                           	psect	cstackCOMMON
   523     0070                     __pcstackCOMMON:
   524     0070                     ?_initSystem:
   525     0070                     ?_buzzer_update:	
   526                           ; 1 bytes @ 0x0
   527                           
   528     0070                     ?_init_timer:	
   529                           ; 1 bytes @ 0x0
   530                           
   531     0070                     ?_check_button_press:	
   532                           ; 1 bytes @ 0x0
   533                           
   534     0070                     ?_setupTimer0:	
   535                           ; 1 bytes @ 0x0
   536                           
   537     0070                     ?_startSensorReading:	
   538                           ; 1 bytes @ 0x0
   539                           
   540     0070                     ?_main:	
   541                           ; 1 bytes @ 0x0
   542                           
   543     0070                     ?_isr:	
   544                           ; 1 bytes @ 0x0
   545                           
   546     0070                     ?_EEPROM_Read:	
   547                           ; 1 bytes @ 0x0
   548                           
   549     0070                     ??_isr:	
   550                           ; 1 bytes @ 0x0
   551                           
   552                           
   553                           ; 1 bytes @ 0x0
   554     0070                     	ds	2
   555     0072                     ?_trigger_buzzer:
   556     0072                     ?_getSensorResults:	
   557                           ; 1 bytes @ 0x2
   558                           
   559     0072                     ?_EEPROM_Write:	
   560                           ; 1 bytes @ 0x2
   561                           
   562     0072                     ?_readADC:	
   563                           ; 1 bytes @ 0x2
   564                           
   565     0072                     ?___lmul:	
   566                           ; 2 bytes @ 0x2
   567                           
   568     0072                     getSensorResults@low_active:	
   569                           ; 4 bytes @ 0x2
   570                           
   571     0072                     EEPROM_Write@data:	
   572                           ; 1 bytes @ 0x2
   573                           
   574     0072                     EEPROM_Read@address:	
   575                           ; 1 bytes @ 0x2
   576                           
   577     0072                     trigger_buzzer@duration_seconds:	
   578                           ; 1 bytes @ 0x2
   579                           
   580     0072                     ___lmul@multiplier:	
   581                           ; 2 bytes @ 0x2
   582                           
   583     0072                     ??_initSystem:	
   584                           ; 4 bytes @ 0x2
   585                           
   586     0072                     ??_buzzer_update:	
   587                           ; 1 bytes @ 0x2
   588                           
   589     0072                     ??_init_timer:	
   590                           ; 1 bytes @ 0x2
   591                           
   592     0072                     ??_check_button_press:	
   593                           ; 1 bytes @ 0x2
   594                           
   595     0072                     ??_setupTimer0:	
   596                           ; 1 bytes @ 0x2
   597                           
   598     0072                     ??_startSensorReading:	
   599                           ; 1 bytes @ 0x2
   600                           
   601     0072                     ??_EEPROM_Read:	
   602                           ; 1 bytes @ 0x2
   603                           
   604                           
   605                           ; 1 bytes @ 0x2
   606     0072                     	ds	1
   607     0073                     ?_EEPROM_Read16:
   608     0073                     getSensorResults@high_active:	
   609                           ; 2 bytes @ 0x3
   610                           
   611     0073                     EEPROM_Write@address:	
   612                           ; 1 bytes @ 0x3
   613                           
   614     0073                     ??_EEPROM_Write:	
   615                           ; 1 bytes @ 0x3
   616                           
   617                           
   618                           ; 1 bytes @ 0x3
   619     0073                     	ds	1
   620     0074                     ?_EEPROM_Write16:
   621     0074                     getSensorResults@flow_active:	
   622                           ; 1 bytes @ 0x4
   623                           
   624     0074                     EEPROM_Write16@data:	
   625                           ; 1 bytes @ 0x4
   626                           
   627     0074                     check_button_press@long_press_threshold:	
   628                           ; 2 bytes @ 0x4
   629                           
   630     0074                     ??_readADC:	
   631                           ; 2 bytes @ 0x4
   632                           
   633     0074                     ??_trigger_buzzer:	
   634                           ; 1 bytes @ 0x4
   635                           
   636                           
   637                           ; 1 bytes @ 0x4
   638     0074                     	ds	1
   639     0075                     readADC@channel:
   640     0075                     ??_getSensorResults:	
   641                           ; 1 bytes @ 0x5
   642                           
   643     0075                     ??_EEPROM_Read16:	
   644                           ; 1 bytes @ 0x5
   645                           
   646                           
   647                           ; 1 bytes @ 0x5
   648     0075                     	ds	1
   649     0076                     EEPROM_Write16@address:
   650     0076                     check_button_press@hold_count:	
   651                           ; 1 bytes @ 0x6
   652                           
   653     0076                     ___lmul@multiplicand:	
   654                           ; 2 bytes @ 0x6
   655                           
   656     0076                     ??_EEPROM_Write16:	
   657                           ; 4 bytes @ 0x6
   658                           
   659                           
   660                           ; 1 bytes @ 0x6
   661     0076                     	ds	1
   662     0077                     saveSettings@value8bit:
   663     0077                     EEPROM_Read16@result:	
   664                           ; 1 bytes @ 0x7
   665                           
   666     0077                     ??_saveSettings:	
   667                           ; 2 bytes @ 0x7
   668                           
   669                           
   670                           ; 1 bytes @ 0x7
   671     0077                     	ds	1
   672     0078                     check_button_press@long_press:
   673                           
   674                           ; 1 bytes @ 0x8
   675     0078                     	ds	1
   676     0079                     EEPROM_Read16@address:
   677                           
   678                           ; 1 bytes @ 0x9
   679     0079                     	ds	1
   680     007A                     ??_loadSettings:
   681     007A                     ??___wmul:	
   682                           ; 1 bytes @ 0xA
   683                           
   684                           
   685                           	psect	cstackBANK0
   686     0047                     __pcstackBANK0:	
   687                           ; 1 bytes @ 0xA
   688                           
   689     0047                     ?_loadSettings:
   690     0047                     ?_saveSettings:	
   691                           ; 1 bytes @ 0x0
   692                           
   693     0047                     loadSettings@value8bit:	
   694                           ; 1 bytes @ 0x0
   695                           
   696     0047                     saveSettings@value16bit1:	
   697                           ; 1 bytes @ 0x0
   698                           
   699     0047                     ??___lmul:	
   700                           ; 2 bytes @ 0x0
   701                           
   702                           
   703                           ; 1 bytes @ 0x0
   704     0047                     	ds	1
   705     0048                     loadSettings@value16bit1:
   706     0048                     ___lmul@product:	
   707                           ; 1 bytes @ 0x1
   708                           
   709                           
   710                           ; 4 bytes @ 0x1
   711     0048                     	ds	1
   712     0049                     loadSettings@value16bit2:
   713     0049                     saveSettings@value16bit2:	
   714                           ; 1 bytes @ 0x2
   715                           
   716                           
   717                           ; 2 bytes @ 0x2
   718     0049                     	ds	1
   719     004A                     loadSettings@value16bit3:
   720                           
   721                           ; 1 bytes @ 0x3
   722     004A                     	ds	1
   723     004B                     loadSettings@value16bit4:
   724     004B                     saveSettings@value16bit3:	
   725                           ; 1 bytes @ 0x4
   726                           
   727                           
   728                           ; 2 bytes @ 0x4
   729     004B                     	ds	1
   730     004C                     ?___lldiv:
   731     004C                     ___lldiv@divisor:	
   732                           ; 4 bytes @ 0x5
   733                           
   734                           
   735                           ; 4 bytes @ 0x5
   736     004C                     	ds	1
   737     004D                     saveSettings@value16bit4:
   738                           
   739                           ; 2 bytes @ 0x6
   740     004D                     	ds	3
   741     0050                     ___lldiv@dividend:
   742                           
   743                           ; 4 bytes @ 0x9
   744     0050                     	ds	4
   745     0054                     ??___lldiv:
   746                           
   747                           ; 1 bytes @ 0xD
   748     0054                     	ds	1
   749     0055                     ___lldiv@quotient:
   750                           
   751                           ; 4 bytes @ 0xE
   752     0055                     	ds	4
   753     0059                     ___lldiv@counter:
   754                           
   755                           ; 1 bytes @ 0x12
   756     0059                     	ds	1
   757     005A                     ?___wmul:
   758     005A                     ___wmul@multiplier:	
   759                           ; 2 bytes @ 0x13
   760                           
   761                           
   762                           ; 2 bytes @ 0x13
   763     005A                     	ds	2
   764     005C                     ___wmul@multiplicand:
   765                           
   766                           ; 2 bytes @ 0x15
   767     005C                     	ds	2
   768     005E                     ___wmul@product:
   769                           
   770                           ; 2 bytes @ 0x17
   771     005E                     	ds	2
   772     0060                     ??_main:
   773                           
   774                           ; 1 bytes @ 0x19
   775     0060                     	ds	8
   776                           
   777                           	psect	maintext
   778     0035                     __pmaintext:	
   779 ;;
   780 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
   781 ;;
   782 ;; *************** function _main *****************
   783 ;; Defined at:
   784 ;;		line 119 in file "main.c"
   785 ;; Parameters:    Size  Location     Type
   786 ;;		None
   787 ;; Auto vars:     Size  Location     Type
   788 ;;  i               1    1[BANK1 ] unsigned char 
   789 ;;  is_long_pres    1    0[BANK1 ] _Bool 
   790 ;; Return value:  Size  Location     Type
   791 ;;                  1    wreg      void 
   792 ;; Registers used:
   793 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   794 ;; Tracked objects:
   795 ;;		On entry : B00/0
   796 ;;		On exit  : 0/0
   797 ;;		Unchanged: 0/0
   798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   799 ;;      Params:         0       0       0       0
   800 ;;      Locals:         0       0       2       0
   801 ;;      Temps:          0       8       0       0
   802 ;;      Totals:         0       8       2       0
   803 ;;Total ram usage:       10 bytes
   804 ;; Hardware stack levels required when called: 4
   805 ;; This function calls:
   806 ;;		___lldiv
   807 ;;		___lmul
   808 ;;		___wmul
   809 ;;		_buzzer_update
   810 ;;		_check_button_press
   811 ;;		_getSensorResults
   812 ;;		_initSystem
   813 ;;		_init_timer
   814 ;;		_loadSettings
   815 ;;		_readADC
   816 ;;		_saveSettings
   817 ;;		_setupTimer0
   818 ;;		_startSensorReading
   819 ;;		_trigger_buzzer
   820 ;; This function is called by:
   821 ;;		Startup code after reset
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825     0035                     _main:	
   826                           ;psect for function _main
   827                           
   828     0035                     l2033:	
   829                           ;incstack = 0
   830                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   831                           
   832                           
   833                           ;main.c: 122:   initSystem();
   834     0035  158A  27D8  118A   	fcall	_initSystem
   835     0038                     l2035:
   836                           
   837                           ;main.c: 124:   if (!loadSettings(&maxruntimeindex, &minvoltagelimit, &maxvoltagelimit,
   838     0038  306E               	movlw	(low (_maxruntimeindex| 0))& (0+255)
   839     0039  1283               	bcf	3,5	;RP0=0, select bank0
   840     003A  1303               	bcf	3,6	;RP1=0, select bank0
   841     003B  00C7               	movwf	loadSettings@value8bit
   842     003C  306C               	movlw	(low (_minvoltagelimit| 0))& (0+255)
   843     003D  00C8               	movwf	loadSettings@value16bit1
   844     003E  306A               	movlw	(low (_maxvoltagelimit| 0))& (0+255)
   845     003F  00C9               	movwf	loadSettings@value16bit2
   846     0040  3068               	movlw	(low (_minimumrunningvoltage| 0))& (0+255)
   847     0041  00CA               	movwf	loadSettings@value16bit3
   848     0042  30CC               	movlw	(low (_maximumrinningvoltage| 0))& (0+255)
   849     0043  00CB               	movwf	loadSettings@value16bit4
   850     0044  118A  2656  118A   	fcall	_loadSettings
   851     0047  3A00               	xorlw	0
   852     0048  1D03               	skipz
   853     0049  284B               	goto	u2551
   854     004A  284C               	goto	u2550
   855     004B                     u2551:
   856     004B  287F               	goto	l2049
   857     004C                     u2550:
   858     004C                     l2037:
   859                           
   860                           ;main.c: 125:                     &minimumrunningvoltage, &maximumrinningvoltage)) {;mai
      +                          n.c: 127:     maxruntimeindex = 0;
   861     004C  1283               	bcf	3,5	;RP0=0, select bank0
   862     004D  1303               	bcf	3,6	;RP1=0, select bank0
   863     004E  01EE               	clrf	_maxruntimeindex
   864     004F                     l2039:
   865                           
   866                           ;main.c: 128:     minvoltagelimit = 150;
   867     004F  3096               	movlw	150
   868     0050  00EC               	movwf	_minvoltagelimit
   869     0051  3000               	movlw	0
   870     0052  00ED               	movwf	_minvoltagelimit+1
   871     0053                     l2041:
   872                           
   873                           ;main.c: 129:     maxvoltagelimit = 255;
   874     0053  30FF               	movlw	255
   875     0054  00EA               	movwf	_maxvoltagelimit
   876     0055  3000               	movlw	0
   877     0056  00EB               	movwf	_maxvoltagelimit+1
   878     0057                     l2043:
   879                           
   880                           ;main.c: 130:     minimumrunningvoltage = 170;
   881     0057  30AA               	movlw	170
   882     0058  00E8               	movwf	_minimumrunningvoltage
   883     0059  3000               	movlw	0
   884     005A  00E9               	movwf	_minimumrunningvoltage+1
   885     005B                     l2045:
   886                           
   887                           ;main.c: 131:     maximumrinningvoltage = 285;
   888     005B  301D               	movlw	29
   889     005C  1683               	bsf	3,5	;RP0=1, select bank1
   890     005D  1303               	bcf	3,6	;RP1=0, select bank1
   891     005E  00CC               	movwf	_maximumrinningvoltage^(0+128)
   892     005F  3001               	movlw	1
   893     0060  00CD               	movwf	(_maximumrinningvoltage^(0+128)+1)
   894     0061                     l2047:
   895                           
   896                           ;main.c: 134:     saveSettings(maxruntimeindex, minvoltagelimit, maxvoltagelimit,
   897     0061  1283               	bcf	3,5	;RP0=0, select bank0
   898     0062  1303               	bcf	3,6	;RP1=0, select bank0
   899     0063  086D               	movf	_minvoltagelimit+1,w
   900     0064  00C8               	movwf	saveSettings@value16bit1+1
   901     0065  086C               	movf	_minvoltagelimit,w
   902     0066  00C7               	movwf	saveSettings@value16bit1
   903     0067  086B               	movf	_maxvoltagelimit+1,w
   904     0068  00CA               	movwf	saveSettings@value16bit2+1
   905     0069  086A               	movf	_maxvoltagelimit,w
   906     006A  00C9               	movwf	saveSettings@value16bit2
   907     006B  0869               	movf	_minimumrunningvoltage+1,w
   908     006C  00CC               	movwf	saveSettings@value16bit3+1
   909     006D  0868               	movf	_minimumrunningvoltage,w
   910     006E  00CB               	movwf	saveSettings@value16bit3
   911     006F  1683               	bsf	3,5	;RP0=1, select bank1
   912     0070  1303               	bcf	3,6	;RP1=0, select bank1
   913     0071  084D               	movf	(_maximumrinningvoltage+1)^(0+128),w
   914     0072  1283               	bcf	3,5	;RP0=0, select bank0
   915     0073  1303               	bcf	3,6	;RP1=0, select bank0
   916     0074  00CE               	movwf	saveSettings@value16bit4+1
   917     0075  1683               	bsf	3,5	;RP0=1, select bank1
   918     0076  1303               	bcf	3,6	;RP1=0, select bank1
   919     0077  084C               	movf	_maximumrinningvoltage^(0+128),w
   920     0078  1283               	bcf	3,5	;RP0=0, select bank0
   921     0079  1303               	bcf	3,6	;RP1=0, select bank0
   922     007A  00CD               	movwf	saveSettings@value16bit4
   923     007B  086E               	movf	_maxruntimeindex,w
   924     007C  118A  2781  118A   	fcall	_saveSettings
   925     007F                     l2049:
   926                           
   927                           ;main.c: 137:   potraw = readADC(4);
   928     007F  3004               	movlw	4
   929     0080  158A  2768  118A   	fcall	_readADC
   930     0083  0873               	movf	?_readADC+1,w
   931     0084  1683               	bsf	3,5	;RP0=1, select bank1
   932     0085  1303               	bcf	3,6	;RP1=0, select bank1
   933     0086  00BD               	movwf	(_potraw+1)^(0+128)
   934     0087  0872               	movf	?_readADC,w
   935     0088  00BC               	movwf	_potraw^(0+128)
   936     0089                     l2051:
   937                           
   938                           ;main.c: 139:   dryruntime = 1000 *(((uint32_t)potraw * 360) / 1023) + 120;
   939     0089  3000               	movlw	0
   940     008A  00F9               	movwf	___lmul@multiplicand+3
   941     008B  3000               	movlw	0
   942     008C  00F8               	movwf	___lmul@multiplicand+2
   943     008D  3001               	movlw	1
   944     008E  00F7               	movwf	___lmul@multiplicand+1
   945     008F  3068               	movlw	104
   946     0090  00F6               	movwf	___lmul@multiplicand
   947     0091  083C               	movf	_potraw^(0+128),w
   948     0092  00F2               	movwf	___lmul@multiplier
   949     0093  083D               	movf	(_potraw+1)^(0+128),w
   950     0094  00F3               	movwf	___lmul@multiplier+1
   951     0095  01F4               	clrf	___lmul@multiplier+2
   952     0096  01F5               	clrf	___lmul@multiplier+3
   953     0097  118A  2739  118A   	fcall	___lmul
   954     009A  0875               	movf	?___lmul+3,w
   955     009B  1283               	bcf	3,5	;RP0=0, select bank0
   956     009C  1303               	bcf	3,6	;RP1=0, select bank0
   957     009D  00D3               	movwf	___lldiv@dividend+3
   958     009E  0874               	movf	?___lmul+2,w
   959     009F  00D2               	movwf	___lldiv@dividend+2
   960     00A0  0873               	movf	?___lmul+1,w
   961     00A1  00D1               	movwf	___lldiv@dividend+1
   962     00A2  0872               	movf	?___lmul,w
   963     00A3  00D0               	movwf	___lldiv@dividend
   964     00A4  3000               	movlw	0
   965     00A5  00CF               	movwf	___lldiv@divisor+3
   966     00A6  3000               	movlw	0
   967     00A7  00CE               	movwf	___lldiv@divisor+2
   968     00A8  3003               	movlw	3
   969     00A9  00CD               	movwf	___lldiv@divisor+1
   970     00AA  30FF               	movlw	255
   971     00AB  00CC               	movwf	___lldiv@divisor
   972     00AC  118A  25F0  118A   	fcall	___lldiv
   973     00AF  1283               	bcf	3,5	;RP0=0, select bank0
   974     00B0  1303               	bcf	3,6	;RP1=0, select bank0
   975     00B1  084D               	movf	?___lldiv+1,w
   976     00B2  00DB               	movwf	___wmul@multiplier+1
   977     00B3  084C               	movf	?___lldiv,w
   978     00B4  00DA               	movwf	___wmul@multiplier
   979     00B5  30E8               	movlw	232
   980     00B6  00DC               	movwf	___wmul@multiplicand
   981     00B7  3003               	movlw	3
   982     00B8  00DD               	movwf	___wmul@multiplicand+1
   983     00B9  158A  278A  118A   	fcall	___wmul
   984     00BC  1283               	bcf	3,5	;RP0=0, select bank0
   985     00BD  1303               	bcf	3,6	;RP1=0, select bank0
   986     00BE  085A               	movf	?___wmul,w
   987     00BF  3E78               	addlw	120
   988     00C0  1683               	bsf	3,5	;RP0=1, select bank1
   989     00C1  1303               	bcf	3,6	;RP1=0, select bank1
   990     00C2  00B8               	movwf	_dryruntime^(0+128)
   991     00C3  1283               	bcf	3,5	;RP0=0, select bank0
   992     00C4  1303               	bcf	3,6	;RP1=0, select bank0
   993     00C5  085B               	movf	?___wmul+1,w
   994     00C6  1803               	skipnc
   995     00C7  3E01               	addlw	1
   996     00C8  3E00               	addlw	0
   997     00C9  1683               	bsf	3,5	;RP0=1, select bank1
   998     00CA  1303               	bcf	3,6	;RP1=0, select bank1
   999     00CB  00B9               	movwf	(_dryruntime+1)^(0+128)
  1000     00CC                     l2053:
  1001                           
  1002                           ;main.c: 166:   trigger_buzzer(3000);
  1003     00CC  30B8               	movlw	184
  1004     00CD  00F2               	movwf	trigger_buzzer@duration_seconds
  1005     00CE  300B               	movlw	11
  1006     00CF  00F3               	movwf	trigger_buzzer@duration_seconds+1
  1007     00D0  158A  27B1  118A   	fcall	_trigger_buzzer
  1008     00D3                     l2055:
  1009                           
  1010                           ;main.c: 167:   buzzer_update();
  1011     00D3  118A  26A5  118A   	fcall	_buzzer_update
  1012     00D6                     l2057:
  1013                           
  1014                           ;main.c: 169:   init_timer();
  1015     00D6  158A  270A  118A   	fcall	_init_timer
  1016     00D9                     l2063:	
  1017                           ;main.c: 171:   while (settingsmode) {
  1018                           
  1019                           
  1020                           ;main.c: 179:     if (PORTCbits.RC1 == 0) {
  1021     00D9  1283               	bcf	3,5	;RP0=0, select bank0
  1022     00DA  1303               	bcf	3,6	;RP1=0, select bank0
  1023     00DB  1887               	btfsc	7,1	;volatile
  1024     00DC  28DE               	goto	u2561
  1025     00DD  28DF               	goto	u2560
  1026     00DE                     u2561:
  1027     00DE  2900               	goto	l2073
  1028     00DF                     u2560:
  1029     00DF                     l2065:
  1030                           
  1031                           ;main.c: 180:       _Bool is_long_press = check_button_press();
  1032     00DF  118A  2584  118A   	fcall	_check_button_press
  1033     00E2  1683               	bsf	3,5	;RP0=1, select bank1
  1034     00E3  1303               	bcf	3,6	;RP1=0, select bank1
  1035     00E4  00CE               	movwf	main@is_long_press^(0+128)
  1036     00E5                     l2067:
  1037                           
  1038                           ;main.c: 182:       if (is_long_press) {
  1039     00E5  084E               	movf	main@is_long_press^(0+128),w
  1040     00E6  1903               	btfsc	3,2
  1041     00E7  28E9               	goto	u2571
  1042     00E8  28EA               	goto	u2570
  1043     00E9                     u2571:
  1044     00E9  28F1               	goto	l2071
  1045     00EA                     u2570:
  1046     00EA                     l2069:
  1047                           
  1048                           ;main.c: 183:         tankempty = 1;
  1049     00EA  3001               	movlw	1
  1050     00EB  1283               	bcf	3,5	;RP0=0, select bank0
  1051     00EC  1303               	bcf	3,6	;RP1=0, select bank0
  1052     00ED  00B6               	movwf	_tankempty
  1053                           
  1054                           ;main.c: 184:         pretankempty = 1;
  1055     00EE  3001               	movlw	1
  1056     00EF  00B5               	movwf	_pretankempty
  1057                           
  1058                           ;main.c: 186:       } else {
  1059     00F0  2900               	goto	l2073
  1060     00F1                     l2071:
  1061                           
  1062                           ;main.c: 187:         PORTAbits.RA2 = ~PORTAbits.RA2;
  1063     00F1  1003               	clrc
  1064     00F2  1283               	bcf	3,5	;RP0=0, select bank0
  1065     00F3  1303               	bcf	3,6	;RP1=0, select bank0
  1066     00F4  1D05               	btfss	5,2	;volatile
  1067     00F5  1403               	setc
  1068     00F6  1803               	btfsc	3,0
  1069     00F7  28F9               	goto	u2581
  1070     00F8  28FD               	goto	u2580
  1071     00F9                     u2581:
  1072     00F9  1283               	bcf	3,5	;RP0=0, select bank0
  1073     00FA  1303               	bcf	3,6	;RP1=0, select bank0
  1074     00FB  1505               	bsf	5,2	;volatile
  1075     00FC  2900               	goto	u2594
  1076     00FD                     u2580:
  1077     00FD  1283               	bcf	3,5	;RP0=0, select bank0
  1078     00FE  1303               	bcf	3,6	;RP1=0, select bank0
  1079     00FF  1105               	bcf	5,2	;volatile
  1080     0100                     u2594:
  1081     0100                     l2073:
  1082                           
  1083                           ;main.c: 191:     buzzer_update();
  1084     0100  118A  26A5  118A   	fcall	_buzzer_update
  1085     0103                     l2075:
  1086                           
  1087                           ;main.c: 193:     for (uint8_t i = 0; i < 16; i++) {
  1088     0103  1683               	bsf	3,5	;RP0=1, select bank1
  1089     0104  1303               	bcf	3,6	;RP1=0, select bank1
  1090     0105  01CF               	clrf	main@i^(0+128)
  1091     0106                     l2077:
  1092     0106  3010               	movlw	16
  1093     0107  024F               	subwf	main@i^(0+128),w
  1094     0108  1C03               	skipc
  1095     0109  290B               	goto	u2601
  1096     010A  290C               	goto	u2600
  1097     010B                     u2601:
  1098     010B  290D               	goto	l2081
  1099     010C                     u2600:
  1100     010C  291C               	goto	l2087
  1101     010D                     l2081:
  1102                           
  1103                           ;main.c: 194:       voltagesum += readADC(3);
  1104     010D  3003               	movlw	3
  1105     010E  158A  2768  118A   	fcall	_readADC
  1106     0111  0872               	movf	?_readADC,w
  1107     0112  1683               	bsf	3,5	;RP0=1, select bank1
  1108     0113  1303               	bcf	3,6	;RP1=0, select bank1
  1109     0114  07B6               	addwf	_voltagesum^(0+128),f
  1110     0115  1803               	skipnc
  1111     0116  0AB7               	incf	(_voltagesum+1)^(0+128),f
  1112     0117  0873               	movf	?_readADC+1,w
  1113     0118  07B7               	addwf	(_voltagesum+1)^(0+128),f
  1114     0119                     l2083:
  1115                           
  1116                           ;main.c: 195:     }
  1117     0119  3001               	movlw	1
  1118     011A  07CF               	addwf	main@i^(0+128),f
  1119     011B  2906               	goto	l2077
  1120     011C                     l2087:
  1121                           
  1122                           ;main.c: 196:     voltageraw = voltagesum >> 4;
  1123     011C  0E36               	swapf	_voltagesum^(0+128),w
  1124     011D  390F               	andlw	15
  1125     011E  00BA               	movwf	_voltageraw^(0+128)
  1126     011F  0E37               	swapf	(_voltagesum+1)^(0+128),w
  1127     0120  39F0               	andlw	240
  1128     0121  04BA               	iorwf	_voltageraw^(0+128),f
  1129     0122  0E37               	swapf	(_voltagesum+1)^(0+128),w
  1130     0123  390F               	andlw	15
  1131     0124  00BB               	movwf	(_voltageraw^(0+128)+1)
  1132     0125                     l2089:
  1133                           
  1134                           ;main.c: 197:     voltagesum = 0;
  1135     0125  01B6               	clrf	_voltagesum^(0+128)
  1136     0126  01B7               	clrf	(_voltagesum+1)^(0+128)
  1137     0127                     l2091:
  1138                           
  1139                           ;main.c: 198:     voltage = (((uint32_t)voltageraw * 235) / 1023) + 85;
  1140     0127  3000               	movlw	0
  1141     0128  1283               	bcf	3,5	;RP0=0, select bank0
  1142     0129  1303               	bcf	3,6	;RP1=0, select bank0
  1143     012A  00CF               	movwf	___lldiv@divisor+3
  1144     012B  3000               	movlw	0
  1145     012C  00CE               	movwf	___lldiv@divisor+2
  1146     012D  3003               	movlw	3
  1147     012E  00CD               	movwf	___lldiv@divisor+1
  1148     012F  30FF               	movlw	255
  1149     0130  00CC               	movwf	___lldiv@divisor
  1150     0131  1683               	bsf	3,5	;RP0=1, select bank1
  1151     0132  1303               	bcf	3,6	;RP1=0, select bank1
  1152     0133  083A               	movf	_voltageraw^(0+128),w
  1153     0134  00F2               	movwf	___lmul@multiplier
  1154     0135  083B               	movf	(_voltageraw+1)^(0+128),w
  1155     0136  00F3               	movwf	___lmul@multiplier+1
  1156     0137  01F4               	clrf	___lmul@multiplier+2
  1157     0138  01F5               	clrf	___lmul@multiplier+3
  1158     0139  3000               	movlw	0
  1159     013A  00F9               	movwf	___lmul@multiplicand+3
  1160     013B  3000               	movlw	0
  1161     013C  00F8               	movwf	___lmul@multiplicand+2
  1162     013D  3000               	movlw	0
  1163     013E  00F7               	movwf	___lmul@multiplicand+1
  1164     013F  30EB               	movlw	235
  1165     0140  00F6               	movwf	___lmul@multiplicand
  1166     0141  118A  2739  118A   	fcall	___lmul
  1167     0144  0875               	movf	?___lmul+3,w
  1168     0145  1283               	bcf	3,5	;RP0=0, select bank0
  1169     0146  1303               	bcf	3,6	;RP1=0, select bank0
  1170     0147  00D3               	movwf	___lldiv@dividend+3
  1171     0148  0874               	movf	?___lmul+2,w
  1172     0149  00D2               	movwf	___lldiv@dividend+2
  1173     014A  0873               	movf	?___lmul+1,w
  1174     014B  00D1               	movwf	___lldiv@dividend+1
  1175     014C  0872               	movf	?___lmul,w
  1176     014D  00D0               	movwf	___lldiv@dividend
  1177     014E  118A  25F0  118A   	fcall	___lldiv
  1178     0151  1283               	bcf	3,5	;RP0=0, select bank0
  1179     0152  1303               	bcf	3,6	;RP1=0, select bank0
  1180     0153  084C               	movf	?___lldiv,w
  1181     0154  3E55               	addlw	85
  1182     0155  00C0               	movwf	_voltage
  1183     0156                     l2093:
  1184                           
  1185                           ;main.c: 201:     if(voltage < minvoltagelimit){
  1186     0156  0840               	movf	_voltage,w
  1187     0157  00E0               	movwf	??_main
  1188     0158  086D               	movf	_minvoltagelimit+1,w
  1189     0159  1D03               	skipz
  1190     015A  295D               	goto	u2615
  1191     015B  086C               	movf	_minvoltagelimit,w
  1192     015C  0260               	subwf	??_main,w
  1193     015D                     u2615:
  1194     015D  1803               	skipnc
  1195     015E  2960               	goto	u2611
  1196     015F  2961               	goto	u2610
  1197     0160                     u2611:
  1198     0160  2972               	goto	l2099
  1199     0161                     u2610:
  1200     0161                     l2095:
  1201                           
  1202                           ;main.c: 202:       if(seconds_counter %2 ==0){
  1203     0161  182C               	btfsc	_seconds_counter,0	;volatile
  1204     0162  2964               	goto	u2621
  1205     0163  2965               	goto	u2620
  1206     0164                     u2621:
  1207     0164  2972               	goto	l2099
  1208     0165                     u2620:
  1209     0165                     l2097:
  1210                           
  1211                           ;main.c: 203:         PORTAbits.RA4 = ~PORTAbits.RA4;
  1212     0165  1003               	clrc
  1213     0166  1E05               	btfss	5,4	;volatile
  1214     0167  1403               	setc
  1215     0168  1803               	btfsc	3,0
  1216     0169  296B               	goto	u2631
  1217     016A  296F               	goto	u2630
  1218     016B                     u2631:
  1219     016B  1283               	bcf	3,5	;RP0=0, select bank0
  1220     016C  1303               	bcf	3,6	;RP1=0, select bank0
  1221     016D  1605               	bsf	5,4	;volatile
  1222     016E  2972               	goto	u2644
  1223     016F                     u2630:
  1224     016F  1283               	bcf	3,5	;RP0=0, select bank0
  1225     0170  1303               	bcf	3,6	;RP1=0, select bank0
  1226     0171  1205               	bcf	5,4	;volatile
  1227     0172                     u2644:
  1228     0172                     l2099:
  1229     0172  083C               	movf	_sensors_reading_in_progress,w	;volatile
  1230     0173  1D03               	btfss	3,2
  1231     0174  2976               	goto	u2651
  1232     0175  2977               	goto	u2650
  1233     0176                     u2651:
  1234     0176  2982               	goto	l2105
  1235     0177                     u2650:
  1236     0177                     l2101:
  1237     0177  083D               	movf	_sensors_reading_complete,w	;volatile
  1238     0178  1D03               	btfss	3,2
  1239     0179  297B               	goto	u2661
  1240     017A  297C               	goto	u2660
  1241     017B                     u2661:
  1242     017B  2982               	goto	l2105
  1243     017C                     u2660:
  1244     017C                     l2103:
  1245                           
  1246                           ;main.c: 208:       setupTimer0();
  1247     017C  158A  26CE  118A   	fcall	_setupTimer0
  1248                           
  1249                           ;main.c: 209:       startSensorReading();
  1250     017F  158A  26EB  118A   	fcall	_startSensorReading
  1251     0182                     l2105:
  1252                           
  1253                           ;main.c: 212:     if (getSensorResults(&low_sensor_active, &high_sensor_active, &flow_se
      +                          nsor_active)) {
  1254     0182  3046               	movlw	(low (_low_sensor_active| 0))& (0+255)
  1255     0183  00F2               	movwf	getSensorResults@low_active
  1256     0184  3045               	movlw	(low (_high_sensor_active| 0))& (0+255)
  1257     0185  00F3               	movwf	getSensorResults@high_active
  1258     0186  3044               	movlw	(low (_flow_sensor_active| 0))& (0+255)
  1259     0187  00F4               	movwf	getSensorResults@flow_active
  1260     0188  118A  27B7  118A   	fcall	_getSensorResults
  1261     018B  3A00               	xorlw	0
  1262     018C  1903               	skipnz
  1263     018D  298F               	goto	u2671
  1264     018E  2990               	goto	u2670
  1265     018F                     u2671:
  1266     018F  29A4               	goto	l2117
  1267     0190                     u2670:
  1268     0190                     l2107:
  1269                           
  1270                           ;main.c: 214:       if (high_sensor_active) {
  1271     0190  1283               	bcf	3,5	;RP0=0, select bank0
  1272     0191  1303               	bcf	3,6	;RP1=0, select bank0
  1273     0192  0845               	movf	_high_sensor_active,w
  1274     0193  1903               	btfsc	3,2
  1275     0194  2996               	goto	u2681
  1276     0195  2997               	goto	u2680
  1277     0196                     u2681:
  1278     0196  2998               	goto	l2111
  1279     0197                     u2680:
  1280     0197                     l2109:
  1281                           
  1282                           ;main.c: 216:         pretankempty = 0;
  1283     0197  01B5               	clrf	_pretankempty
  1284     0198                     l2111:
  1285                           
  1286                           ;main.c: 218:       if (!low_sensor_active && !high_sensor_active) {
  1287     0198  0846               	movf	_low_sensor_active,w
  1288     0199  1D03               	btfss	3,2
  1289     019A  299C               	goto	u2691
  1290     019B  299D               	goto	u2690
  1291     019C                     u2691:
  1292     019C  29A4               	goto	l2117
  1293     019D                     u2690:
  1294     019D                     l2113:
  1295     019D  0845               	movf	_high_sensor_active,w
  1296     019E  1D03               	btfss	3,2
  1297     019F  29A1               	goto	u2701
  1298     01A0  29A2               	goto	u2700
  1299     01A1                     u2701:
  1300     01A1  29A4               	goto	l2117
  1301     01A2                     u2700:
  1302     01A2                     l2115:
  1303                           
  1304                           ;main.c: 220:         pretankempty = 1;
  1305     01A2  3001               	movlw	1
  1306     01A3  00B5               	movwf	_pretankempty
  1307     01A4                     l2117:
  1308                           
  1309                           ;main.c: 225:     if(pretankempty !=tankempty){
  1310     01A4  1283               	bcf	3,5	;RP0=0, select bank0
  1311     01A5  1303               	bcf	3,6	;RP1=0, select bank0
  1312     01A6  0835               	movf	_pretankempty,w
  1313     01A7  0636               	xorwf	_tankempty,w
  1314     01A8  1903               	skipnz
  1315     01A9  29AB               	goto	u2711
  1316     01AA  29AC               	goto	u2710
  1317     01AB                     u2711:
  1318     01AB  29F8               	goto	l2127
  1319     01AC                     u2710:
  1320     01AC                     l2119:
  1321                           
  1322                           ;main.c: 226:       if(lastsensorcheck == 0){
  1323     01AC  0823               	movf	_lastsensorcheck+3,w
  1324     01AD  0422               	iorwf	_lastsensorcheck+2,w
  1325     01AE  0421               	iorwf	_lastsensorcheck+1,w
  1326     01AF  0420               	iorwf	_lastsensorcheck,w
  1327     01B0  1D03               	skipz
  1328     01B1  29B3               	goto	u2721
  1329     01B2  29B4               	goto	u2720
  1330     01B3                     u2721:
  1331     01B3  29BD               	goto	l2123
  1332     01B4                     u2720:
  1333     01B4                     l2121:
  1334                           
  1335                           ;main.c: 227:         lastsensorcheck = millis;
  1336     01B4  082B               	movf	_millis+3,w	;volatile
  1337     01B5  00A3               	movwf	_lastsensorcheck+3
  1338     01B6  082A               	movf	_millis+2,w	;volatile
  1339     01B7  00A2               	movwf	_lastsensorcheck+2
  1340     01B8  0829               	movf	_millis+1,w	;volatile
  1341     01B9  00A1               	movwf	_lastsensorcheck+1
  1342     01BA  0828               	movf	_millis,w	;volatile
  1343     01BB  00A0               	movwf	_lastsensorcheck
  1344                           
  1345                           ;main.c: 228:       }else if(millis - lastsensorcheck >= sensorbuffer){
  1346     01BC  2A38               	goto	l201
  1347     01BD                     l2123:
  1348     01BD  0828               	movf	_millis,w	;volatile
  1349     01BE  00E0               	movwf	??_main
  1350     01BF  0829               	movf	_millis+1,w	;volatile
  1351     01C0  00E1               	movwf	??_main+1
  1352     01C1  082A               	movf	_millis+2,w	;volatile
  1353     01C2  00E2               	movwf	??_main+2
  1354     01C3  082B               	movf	_millis+3,w	;volatile
  1355     01C4  00E3               	movwf	??_main+3
  1356     01C5  0820               	movf	_lastsensorcheck,w
  1357     01C6  02E0               	subwf	??_main,f
  1358     01C7  0821               	movf	_lastsensorcheck+1,w
  1359     01C8  1C03               	skipc
  1360     01C9  0F21               	incfsz	_lastsensorcheck+1,w
  1361     01CA  29CC               	goto	u2731
  1362     01CB  29CD               	goto	u2732
  1363     01CC                     u2731:
  1364     01CC  02E1               	subwf	??_main+1,f
  1365     01CD                     u2732:
  1366     01CD  0822               	movf	_lastsensorcheck+2,w
  1367     01CE  1C03               	skipc
  1368     01CF  0F22               	incfsz	_lastsensorcheck+2,w
  1369     01D0  29D2               	goto	u2733
  1370     01D1  29D3               	goto	u2734
  1371     01D2                     u2733:
  1372     01D2  02E2               	subwf	??_main+2,f
  1373     01D3                     u2734:
  1374     01D3  0823               	movf	_lastsensorcheck+3,w
  1375     01D4  1C03               	skipc
  1376     01D5  0F23               	incfsz	_lastsensorcheck+3,w
  1377     01D6  29D8               	goto	u2735
  1378     01D7  29D9               	goto	u2736
  1379     01D8                     u2735:
  1380     01D8  02E3               	subwf	??_main+3,f
  1381     01D9                     u2736:
  1382     01D9  0863               	movf	??_main+3,w
  1383     01DA  1D03               	btfss	3,2
  1384     01DB  29EB               	goto	u2740
  1385     01DC  0862               	movf	??_main+2,w
  1386     01DD  1D03               	btfss	3,2
  1387     01DE  29EB               	goto	u2740
  1388     01DF  3027               	movlw	39
  1389     01E0  0261               	subwf	??_main+1,w
  1390     01E1  1D03               	skipz
  1391     01E2  29E7               	goto	u2743
  1392     01E3  3010               	movlw	16
  1393     01E4  0260               	subwf	??_main,w
  1394     01E5  1D03               	skipz
  1395     01E6  29E7               	goto	u2743
  1396     01E7                     u2743:
  1397     01E7  1C03               	btfss	3,0
  1398     01E8  29EA               	goto	u2741
  1399     01E9  29EB               	goto	u2740
  1400     01EA                     u2741:
  1401     01EA  2A38               	goto	l201
  1402     01EB                     u2740:
  1403     01EB                     l2125:
  1404                           
  1405                           ;main.c: 229:         lastsensorcheck = 0;
  1406     01EB  3000               	movlw	0
  1407     01EC  1283               	bcf	3,5	;RP0=0, select bank0
  1408     01ED  1303               	bcf	3,6	;RP1=0, select bank0
  1409     01EE  00A3               	movwf	_lastsensorcheck+3
  1410     01EF  3000               	movlw	0
  1411     01F0  00A2               	movwf	_lastsensorcheck+2
  1412     01F1  3000               	movlw	0
  1413     01F2  00A1               	movwf	_lastsensorcheck+1
  1414     01F3  3000               	movlw	0
  1415     01F4  00A0               	movwf	_lastsensorcheck
  1416                           
  1417                           ;main.c: 230:         tankempty = pretankempty;
  1418     01F5  0835               	movf	_pretankempty,w
  1419     01F6  00B6               	movwf	_tankempty
  1420     01F7  2A38               	goto	l201
  1421     01F8                     l2127:
  1422     01F8  0823               	movf	_lastsensorcheck+3,w
  1423     01F9  0422               	iorwf	_lastsensorcheck+2,w
  1424     01FA  0421               	iorwf	_lastsensorcheck+1,w
  1425     01FB  0420               	iorwf	_lastsensorcheck,w
  1426     01FC  1903               	skipnz
  1427     01FD  29FF               	goto	u2751
  1428     01FE  2A00               	goto	u2750
  1429     01FF                     u2751:
  1430     01FF  2A38               	goto	l201
  1431     0200                     u2750:
  1432     0200                     l2129:
  1433     0200  0828               	movf	_millis,w	;volatile
  1434     0201  00E0               	movwf	??_main
  1435     0202  0829               	movf	_millis+1,w	;volatile
  1436     0203  00E1               	movwf	??_main+1
  1437     0204  082A               	movf	_millis+2,w	;volatile
  1438     0205  00E2               	movwf	??_main+2
  1439     0206  082B               	movf	_millis+3,w	;volatile
  1440     0207  00E3               	movwf	??_main+3
  1441     0208  0820               	movf	_lastsensorcheck,w
  1442     0209  02E0               	subwf	??_main,f
  1443     020A  0821               	movf	_lastsensorcheck+1,w
  1444     020B  1C03               	skipc
  1445     020C  0F21               	incfsz	_lastsensorcheck+1,w
  1446     020D  2A0F               	goto	u2761
  1447     020E  2A10               	goto	u2762
  1448     020F                     u2761:
  1449     020F  02E1               	subwf	??_main+1,f
  1450     0210                     u2762:
  1451     0210  0822               	movf	_lastsensorcheck+2,w
  1452     0211  1C03               	skipc
  1453     0212  0F22               	incfsz	_lastsensorcheck+2,w
  1454     0213  2A15               	goto	u2763
  1455     0214  2A16               	goto	u2764
  1456     0215                     u2763:
  1457     0215  02E2               	subwf	??_main+2,f
  1458     0216                     u2764:
  1459     0216  0823               	movf	_lastsensorcheck+3,w
  1460     0217  1C03               	skipc
  1461     0218  0F23               	incfsz	_lastsensorcheck+3,w
  1462     0219  2A1B               	goto	u2765
  1463     021A  2A1C               	goto	u2766
  1464     021B                     u2765:
  1465     021B  02E3               	subwf	??_main+3,f
  1466     021C                     u2766:
  1467     021C  0863               	movf	??_main+3,w
  1468     021D  1D03               	btfss	3,2
  1469     021E  2A2E               	goto	u2770
  1470     021F  0862               	movf	??_main+2,w
  1471     0220  1D03               	btfss	3,2
  1472     0221  2A2E               	goto	u2770
  1473     0222  3027               	movlw	39
  1474     0223  0261               	subwf	??_main+1,w
  1475     0224  1D03               	skipz
  1476     0225  2A2A               	goto	u2773
  1477     0226  3010               	movlw	16
  1478     0227  0260               	subwf	??_main,w
  1479     0228  1D03               	skipz
  1480     0229  2A2A               	goto	u2773
  1481     022A                     u2773:
  1482     022A  1C03               	btfss	3,0
  1483     022B  2A2D               	goto	u2771
  1484     022C  2A2E               	goto	u2770
  1485     022D                     u2771:
  1486     022D  2A38               	goto	l201
  1487     022E                     u2770:
  1488     022E                     l2131:
  1489                           
  1490                           ;main.c: 233:       lastsensorcheck = 0;
  1491     022E  3000               	movlw	0
  1492     022F  1283               	bcf	3,5	;RP0=0, select bank0
  1493     0230  1303               	bcf	3,6	;RP1=0, select bank0
  1494     0231  00A3               	movwf	_lastsensorcheck+3
  1495     0232  3000               	movlw	0
  1496     0233  00A2               	movwf	_lastsensorcheck+2
  1497     0234  3000               	movlw	0
  1498     0235  00A1               	movwf	_lastsensorcheck+1
  1499     0236  3000               	movlw	0
  1500     0237  00A0               	movwf	_lastsensorcheck
  1501     0238                     l201:
  1502                           
  1503                           ;main.c: 236:     if(flow_sensor_active != flowactive){
  1504     0238  1283               	bcf	3,5	;RP0=0, select bank0
  1505     0239  1303               	bcf	3,6	;RP1=0, select bank0
  1506     023A  0844               	movf	_flow_sensor_active,w
  1507     023B  0634               	xorwf	_flowactive,w
  1508     023C  1903               	skipnz
  1509     023D  2A3F               	goto	u2781
  1510     023E  2A40               	goto	u2780
  1511     023F                     u2781:
  1512     023F  2A86               	goto	l2143
  1513     0240                     u2780:
  1514     0240                     l2133:
  1515                           
  1516                           ;main.c: 237:         if (lastflowcheck == 0) {
  1517     0240  0830               	movf	_lastflowcheck,w
  1518     0241  0431               	iorwf	_lastflowcheck+1,w
  1519     0242  1D03               	btfss	3,2
  1520     0243  2A45               	goto	u2791
  1521     0244  2A46               	goto	u2790
  1522     0245                     u2791:
  1523     0245  2A4B               	goto	l2137
  1524     0246                     u2790:
  1525     0246                     l2135:
  1526                           
  1527                           ;main.c: 238:           lastflowcheck = millis;
  1528     0246  0829               	movf	_millis+1,w	;volatile
  1529     0247  00B1               	movwf	_lastflowcheck+1
  1530     0248  0828               	movf	_millis,w	;volatile
  1531     0249  00B0               	movwf	_lastflowcheck
  1532                           
  1533                           ;main.c: 239:         } else if (millis - lastflowcheck >= sensorbuffer) {
  1534     024A  2AC4               	goto	l2149
  1535     024B                     l2137:
  1536     024B  0830               	movf	_lastflowcheck,w
  1537     024C  00E0               	movwf	??_main
  1538     024D  0831               	movf	_lastflowcheck+1,w
  1539     024E  00E1               	movwf	??_main+1
  1540     024F  01E2               	clrf	??_main+2
  1541     0250  01E3               	clrf	??_main+3
  1542     0251  0828               	movf	_millis,w	;volatile
  1543     0252  00E4               	movwf	??_main+4
  1544     0253  0829               	movf	_millis+1,w	;volatile
  1545     0254  00E5               	movwf	??_main+5
  1546     0255  082A               	movf	_millis+2,w	;volatile
  1547     0256  00E6               	movwf	??_main+6
  1548     0257  082B               	movf	_millis+3,w	;volatile
  1549     0258  00E7               	movwf	??_main+7
  1550     0259  0860               	movf	??_main,w
  1551     025A  02E4               	subwf	??_main+4,f
  1552     025B  0861               	movf	??_main+1,w
  1553     025C  1C03               	skipc
  1554     025D  0F61               	incfsz	??_main+1,w
  1555     025E  2A60               	goto	u2801
  1556     025F  2A61               	goto	u2802
  1557     0260                     u2801:
  1558     0260  02E5               	subwf	??_main+5,f
  1559     0261                     u2802:
  1560     0261  0862               	movf	??_main+2,w
  1561     0262  1C03               	skipc
  1562     0263  0F62               	incfsz	??_main+2,w
  1563     0264  2A66               	goto	u2803
  1564     0265  2A67               	goto	u2804
  1565     0266                     u2803:
  1566     0266  02E6               	subwf	??_main+6,f
  1567     0267                     u2804:
  1568     0267  0863               	movf	??_main+3,w
  1569     0268  1C03               	skipc
  1570     0269  0F63               	incfsz	??_main+3,w
  1571     026A  2A6C               	goto	u2805
  1572     026B  2A6D               	goto	u2806
  1573     026C                     u2805:
  1574     026C  02E7               	subwf	??_main+7,f
  1575     026D                     u2806:
  1576     026D  0867               	movf	??_main+7,w
  1577     026E  1D03               	btfss	3,2
  1578     026F  2A7F               	goto	u2810
  1579     0270  0866               	movf	??_main+6,w
  1580     0271  1D03               	btfss	3,2
  1581     0272  2A7F               	goto	u2810
  1582     0273  3027               	movlw	39
  1583     0274  0265               	subwf	??_main+5,w
  1584     0275  1D03               	skipz
  1585     0276  2A7B               	goto	u2813
  1586     0277  3010               	movlw	16
  1587     0278  0264               	subwf	??_main+4,w
  1588     0279  1D03               	skipz
  1589     027A  2A7B               	goto	u2813
  1590     027B                     u2813:
  1591     027B  1C03               	btfss	3,0
  1592     027C  2A7E               	goto	u2811
  1593     027D  2A7F               	goto	u2810
  1594     027E                     u2811:
  1595     027E  2AC4               	goto	l2149
  1596     027F                     u2810:
  1597     027F                     l2139:
  1598                           
  1599                           ;main.c: 240:           lastflowcheck = 0;
  1600     027F  1283               	bcf	3,5	;RP0=0, select bank0
  1601     0280  1303               	bcf	3,6	;RP1=0, select bank0
  1602     0281  01B0               	clrf	_lastflowcheck
  1603     0282  01B1               	clrf	_lastflowcheck+1
  1604     0283                     l2141:
  1605                           
  1606                           ;main.c: 241:           flowactive = flow_sensor_active;
  1607     0283  0844               	movf	_flow_sensor_active,w
  1608     0284  00B4               	movwf	_flowactive
  1609     0285  2AC4               	goto	l2149
  1610     0286                     l2143:
  1611     0286  0830               	movf	_lastflowcheck,w
  1612     0287  0431               	iorwf	_lastflowcheck+1,w
  1613     0288  1903               	btfsc	3,2
  1614     0289  2A8B               	goto	u2821
  1615     028A  2A8C               	goto	u2820
  1616     028B                     u2821:
  1617     028B  2AC4               	goto	l2149
  1618     028C                     u2820:
  1619     028C                     l2145:
  1620     028C  0830               	movf	_lastflowcheck,w
  1621     028D  00E0               	movwf	??_main
  1622     028E  0831               	movf	_lastflowcheck+1,w
  1623     028F  00E1               	movwf	??_main+1
  1624     0290  01E2               	clrf	??_main+2
  1625     0291  01E3               	clrf	??_main+3
  1626     0292  0828               	movf	_millis,w	;volatile
  1627     0293  00E4               	movwf	??_main+4
  1628     0294  0829               	movf	_millis+1,w	;volatile
  1629     0295  00E5               	movwf	??_main+5
  1630     0296  082A               	movf	_millis+2,w	;volatile
  1631     0297  00E6               	movwf	??_main+6
  1632     0298  082B               	movf	_millis+3,w	;volatile
  1633     0299  00E7               	movwf	??_main+7
  1634     029A  0860               	movf	??_main,w
  1635     029B  02E4               	subwf	??_main+4,f
  1636     029C  0861               	movf	??_main+1,w
  1637     029D  1C03               	skipc
  1638     029E  0F61               	incfsz	??_main+1,w
  1639     029F  2AA1               	goto	u2831
  1640     02A0  2AA2               	goto	u2832
  1641     02A1                     u2831:
  1642     02A1  02E5               	subwf	??_main+5,f
  1643     02A2                     u2832:
  1644     02A2  0862               	movf	??_main+2,w
  1645     02A3  1C03               	skipc
  1646     02A4  0F62               	incfsz	??_main+2,w
  1647     02A5  2AA7               	goto	u2833
  1648     02A6  2AA8               	goto	u2834
  1649     02A7                     u2833:
  1650     02A7  02E6               	subwf	??_main+6,f
  1651     02A8                     u2834:
  1652     02A8  0863               	movf	??_main+3,w
  1653     02A9  1C03               	skipc
  1654     02AA  0F63               	incfsz	??_main+3,w
  1655     02AB  2AAD               	goto	u2835
  1656     02AC  2AAE               	goto	u2836
  1657     02AD                     u2835:
  1658     02AD  02E7               	subwf	??_main+7,f
  1659     02AE                     u2836:
  1660     02AE  0867               	movf	??_main+7,w
  1661     02AF  1D03               	btfss	3,2
  1662     02B0  2AC0               	goto	u2840
  1663     02B1  0866               	movf	??_main+6,w
  1664     02B2  1D03               	btfss	3,2
  1665     02B3  2AC0               	goto	u2840
  1666     02B4  3027               	movlw	39
  1667     02B5  0265               	subwf	??_main+5,w
  1668     02B6  1D03               	skipz
  1669     02B7  2ABC               	goto	u2843
  1670     02B8  3010               	movlw	16
  1671     02B9  0264               	subwf	??_main+4,w
  1672     02BA  1D03               	skipz
  1673     02BB  2ABC               	goto	u2843
  1674     02BC                     u2843:
  1675     02BC  1C03               	btfss	3,0
  1676     02BD  2ABF               	goto	u2841
  1677     02BE  2AC0               	goto	u2840
  1678     02BF                     u2841:
  1679     02BF  2AC4               	goto	l2149
  1680     02C0                     u2840:
  1681     02C0                     l2147:
  1682                           
  1683                           ;main.c: 244:         lastflowcheck = 0;
  1684     02C0  1283               	bcf	3,5	;RP0=0, select bank0
  1685     02C1  1303               	bcf	3,6	;RP1=0, select bank0
  1686     02C2  01B0               	clrf	_lastflowcheck
  1687     02C3  01B1               	clrf	_lastflowcheck+1
  1688     02C4                     l2149:
  1689                           
  1690                           ;main.c: 248:     if (tankempty) {
  1691     02C4  1283               	bcf	3,5	;RP0=0, select bank0
  1692     02C5  1303               	bcf	3,6	;RP1=0, select bank0
  1693     02C6  0836               	movf	_tankempty,w
  1694     02C7  1903               	btfsc	3,2
  1695     02C8  2ACA               	goto	u2851
  1696     02C9  2ACB               	goto	u2850
  1697     02CA                     u2851:
  1698     02CA  2BEA               	goto	l2191
  1699     02CB                     u2850:
  1700     02CB                     l2151:
  1701                           
  1702                           ;main.c: 249:       if (!timeouterror && !voltageerror && !dryrunerror && !motorrunning)
      +                           {
  1703     02CB  0838               	movf	_timeouterror,w
  1704     02CC  1D03               	btfss	3,2
  1705     02CD  2ACF               	goto	u2861
  1706     02CE  2AD0               	goto	u2860
  1707     02CF                     u2861:
  1708     02CF  2B01               	goto	l2167
  1709     02D0                     u2860:
  1710     02D0                     l2153:
  1711     02D0  083A               	movf	_voltageerror,w
  1712     02D1  1D03               	btfss	3,2
  1713     02D2  2AD4               	goto	u2871
  1714     02D3  2AD5               	goto	u2870
  1715     02D4                     u2871:
  1716     02D4  2B01               	goto	l2167
  1717     02D5                     u2870:
  1718     02D5                     l2155:
  1719     02D5  0839               	movf	_dryrunerror,w
  1720     02D6  1D03               	btfss	3,2
  1721     02D7  2AD9               	goto	u2881
  1722     02D8  2ADA               	goto	u2880
  1723     02D9                     u2881:
  1724     02D9  2B01               	goto	l2167
  1725     02DA                     u2880:
  1726     02DA                     l2157:
  1727     02DA  0837               	movf	_motorrunning,w
  1728     02DB  1D03               	btfss	3,2
  1729     02DC  2ADE               	goto	u2891
  1730     02DD  2ADF               	goto	u2890
  1731     02DE                     u2891:
  1732     02DE  2B01               	goto	l2167
  1733     02DF                     u2890:
  1734     02DF                     l2159:
  1735                           
  1736                           ;main.c: 251:         PORTCbits.RC3 = 1;
  1737     02DF  1587               	bsf	7,3	;volatile
  1738     02E0                     l2161:
  1739                           
  1740                           ;main.c: 252:         motorstarttime = seconds_counter;
  1741     02E0  082F               	movf	_seconds_counter+3,w	;volatile
  1742     02E1  1683               	bsf	3,5	;RP0=1, select bank1
  1743     02E2  1303               	bcf	3,6	;RP1=0, select bank1
  1744     02E3  00AB               	movwf	(_motorstarttime+3)^(0+128)
  1745     02E4  1283               	bcf	3,5	;RP0=0, select bank0
  1746     02E5  1303               	bcf	3,6	;RP1=0, select bank0
  1747     02E6  082E               	movf	_seconds_counter+2,w	;volatile
  1748     02E7  1683               	bsf	3,5	;RP0=1, select bank1
  1749     02E8  1303               	bcf	3,6	;RP1=0, select bank1
  1750     02E9  00AA               	movwf	(_motorstarttime+2)^(0+128)
  1751     02EA  1283               	bcf	3,5	;RP0=0, select bank0
  1752     02EB  1303               	bcf	3,6	;RP1=0, select bank0
  1753     02EC  082D               	movf	_seconds_counter+1,w	;volatile
  1754     02ED  1683               	bsf	3,5	;RP0=1, select bank1
  1755     02EE  1303               	bcf	3,6	;RP1=0, select bank1
  1756     02EF  00A9               	movwf	(_motorstarttime+1)^(0+128)
  1757     02F0  1283               	bcf	3,5	;RP0=0, select bank0
  1758     02F1  1303               	bcf	3,6	;RP1=0, select bank0
  1759     02F2  082C               	movf	_seconds_counter,w	;volatile
  1760     02F3  1683               	bsf	3,5	;RP0=1, select bank1
  1761     02F4  1303               	bcf	3,6	;RP1=0, select bank1
  1762     02F5  00A8               	movwf	_motorstarttime^(0+128)
  1763     02F6                     l2163:
  1764                           
  1765                           ;main.c: 253:         motorrunning = 1;
  1766     02F6  3001               	movlw	1
  1767     02F7  1283               	bcf	3,5	;RP0=0, select bank0
  1768     02F8  1303               	bcf	3,6	;RP1=0, select bank0
  1769     02F9  00B7               	movwf	_motorrunning
  1770     02FA                     l2165:
  1771                           
  1772                           ;main.c: 254:         trigger_buzzer(1000);
  1773     02FA  30E8               	movlw	232
  1774     02FB  00F2               	movwf	trigger_buzzer@duration_seconds
  1775     02FC  3003               	movlw	3
  1776     02FD  00F3               	movwf	trigger_buzzer@duration_seconds+1
  1777     02FE  158A  27B1  118A   	fcall	_trigger_buzzer
  1778     0301                     l2167:
  1779                           
  1780                           ;main.c: 256:       if (motorrunning) {
  1781     0301  1283               	bcf	3,5	;RP0=0, select bank0
  1782     0302  1303               	bcf	3,6	;RP1=0, select bank0
  1783     0303  0837               	movf	_motorrunning,w
  1784     0304  1903               	btfsc	3,2
  1785     0305  2B07               	goto	u2901
  1786     0306  2B08               	goto	u2900
  1787     0307                     u2901:
  1788     0307  2BF2               	goto	l2197
  1789     0308                     u2900:
  1790     0308                     l2169:
  1791                           
  1792                           ;main.c: 257:         if (seconds_counter - motorstarttime >= maxruntime[4]) {
  1793     0308  1683               	bsf	3,5	;RP0=1, select bank1
  1794     0309  1303               	bcf	3,6	;RP1=0, select bank1
  1795     030A  0846               	movf	(_maxruntime^(0+128)+8),w
  1796     030B  1283               	bcf	3,5	;RP0=0, select bank0
  1797     030C  1303               	bcf	3,6	;RP1=0, select bank0
  1798     030D  00E0               	movwf	??_main
  1799     030E  1683               	bsf	3,5	;RP0=1, select bank1
  1800     030F  1303               	bcf	3,6	;RP1=0, select bank1
  1801     0310  0847               	movf	((_maxruntime+1)^(0+128)+8),w
  1802     0311  1283               	bcf	3,5	;RP0=0, select bank0
  1803     0312  1303               	bcf	3,6	;RP1=0, select bank0
  1804     0313  00E1               	movwf	??_main+1
  1805     0314  01E2               	clrf	??_main+2
  1806     0315  01E3               	clrf	??_main+3
  1807     0316  082C               	movf	_seconds_counter,w	;volatile
  1808     0317  00E4               	movwf	??_main+4
  1809     0318  082D               	movf	_seconds_counter+1,w	;volatile
  1810     0319  00E5               	movwf	??_main+5
  1811     031A  082E               	movf	_seconds_counter+2,w	;volatile
  1812     031B  00E6               	movwf	??_main+6
  1813     031C  082F               	movf	_seconds_counter+3,w	;volatile
  1814     031D  00E7               	movwf	??_main+7
  1815     031E  1683               	bsf	3,5	;RP0=1, select bank1
  1816     031F  1303               	bcf	3,6	;RP1=0, select bank1
  1817     0320  0828               	movf	_motorstarttime^(0+128),w
  1818     0321  1283               	bcf	3,5	;RP0=0, select bank0
  1819     0322  1303               	bcf	3,6	;RP1=0, select bank0
  1820     0323  02E4               	subwf	??_main+4,f
  1821     0324  1683               	bsf	3,5	;RP0=1, select bank1
  1822     0325  1303               	bcf	3,6	;RP1=0, select bank1
  1823     0326  0829               	movf	(_motorstarttime+1)^(0+128),w
  1824     0327  1C03               	skipc
  1825     0328  0F29               	incfsz	(_motorstarttime+1)^(0+128),w
  1826     0329  2B2B               	goto	u2911
  1827     032A  2B2E               	goto	u2912
  1828     032B                     u2911:
  1829     032B  1283               	bcf	3,5	;RP0=0, select bank0
  1830     032C  1303               	bcf	3,6	;RP1=0, select bank0
  1831     032D  02E5               	subwf	??_main+5,f
  1832     032E                     u2912:
  1833     032E  1683               	bsf	3,5	;RP0=1, select bank1
  1834     032F  1303               	bcf	3,6	;RP1=0, select bank1
  1835     0330  082A               	movf	(_motorstarttime+2)^(0+128),w
  1836     0331  1C03               	skipc
  1837     0332  0F2A               	incfsz	(_motorstarttime+2)^(0+128),w
  1838     0333  2B35               	goto	u2913
  1839     0334  2B38               	goto	u2914
  1840     0335                     u2913:
  1841     0335  1283               	bcf	3,5	;RP0=0, select bank0
  1842     0336  1303               	bcf	3,6	;RP1=0, select bank0
  1843     0337  02E6               	subwf	??_main+6,f
  1844     0338                     u2914:
  1845     0338  1683               	bsf	3,5	;RP0=1, select bank1
  1846     0339  1303               	bcf	3,6	;RP1=0, select bank1
  1847     033A  082B               	movf	(_motorstarttime+3)^(0+128),w
  1848     033B  1C03               	skipc
  1849     033C  0F2B               	incfsz	(_motorstarttime+3)^(0+128),w
  1850     033D  2B3F               	goto	u2915
  1851     033E  2B42               	goto	u2916
  1852     033F                     u2915:
  1853     033F  1283               	bcf	3,5	;RP0=0, select bank0
  1854     0340  1303               	bcf	3,6	;RP1=0, select bank0
  1855     0341  02E7               	subwf	??_main+7,f
  1856     0342                     u2916:
  1857     0342  1683               	bsf	3,5	;RP0=1, select bank1
  1858     0343  1303               	bcf	3,6	;RP1=0, select bank1
  1859     0344  1283               	bcf	3,5	;RP0=0, select bank0
  1860     0345  1303               	bcf	3,6	;RP1=0, select bank0
  1861     0346  0863               	movf	??_main+3,w
  1862     0347  0267               	subwf	??_main+7,w
  1863     0348  1D03               	skipz
  1864     0349  2B54               	goto	u2925
  1865     034A  0862               	movf	??_main+2,w
  1866     034B  0266               	subwf	??_main+6,w
  1867     034C  1D03               	skipz
  1868     034D  2B54               	goto	u2925
  1869     034E  0861               	movf	??_main+1,w
  1870     034F  0265               	subwf	??_main+5,w
  1871     0350  1D03               	skipz
  1872     0351  2B54               	goto	u2925
  1873     0352  0860               	movf	??_main,w
  1874     0353  0264               	subwf	??_main+4,w
  1875     0354                     u2925:
  1876     0354  1C03               	skipc
  1877     0355  2B57               	goto	u2921
  1878     0356  2B58               	goto	u2920
  1879     0357                     u2921:
  1880     0357  2B5A               	goto	l2173
  1881     0358                     u2920:
  1882     0358                     l2171:
  1883                           
  1884                           ;main.c: 258:           timeouterror = 1;
  1885     0358  3001               	movlw	1
  1886     0359  00B8               	movwf	_timeouterror
  1887     035A                     l2173:
  1888                           
  1889                           ;main.c: 260:         if (!flowactive) {
  1890     035A  0834               	movf	_flowactive,w
  1891     035B  1D03               	btfss	3,2
  1892     035C  2B5E               	goto	u2931
  1893     035D  2B5F               	goto	u2930
  1894     035E                     u2931:
  1895     035E  2BDB               	goto	l2187
  1896     035F                     u2930:
  1897     035F                     l2175:
  1898                           
  1899                           ;main.c: 261:           if (seconds_counter % 2 == 0) {
  1900     035F  182C               	btfsc	_seconds_counter,0	;volatile
  1901     0360  2B62               	goto	u2941
  1902     0361  2B63               	goto	u2940
  1903     0362                     u2941:
  1904     0362  2B65               	goto	l214
  1905     0363                     u2940:
  1906     0363                     l2177:
  1907                           
  1908                           ;main.c: 263:             PORTAbits.RA2 = 1;
  1909     0363  1505               	bsf	5,2	;volatile
  1910                           
  1911                           ;main.c: 264:           } else {
  1912     0364  2B66               	goto	l2179
  1913     0365                     l214:
  1914                           
  1915                           ;main.c: 266:             PORTAbits.RA2 = 0;
  1916     0365  1105               	bcf	5,2	;volatile
  1917     0366                     l2179:
  1918                           
  1919                           ;main.c: 268:           if (lastdryruncheck == 0) {
  1920     0366  1683               	bsf	3,5	;RP0=1, select bank1
  1921     0367  1303               	bcf	3,6	;RP1=0, select bank1
  1922     0368  082F               	movf	(_lastdryruncheck+3)^(0+128),w
  1923     0369  042E               	iorwf	(_lastdryruncheck+2)^(0+128),w
  1924     036A  042D               	iorwf	(_lastdryruncheck+1)^(0+128),w
  1925     036B  042C               	iorwf	_lastdryruncheck^(0+128),w
  1926     036C  1D03               	skipz
  1927     036D  2B6F               	goto	u2951
  1928     036E  2B70               	goto	u2950
  1929     036F                     u2951:
  1930     036F  2B89               	goto	l2183
  1931     0370                     u2950:
  1932     0370                     l2181:
  1933                           
  1934                           ;main.c: 269:             lastdryruncheck = millis;
  1935     0370  1283               	bcf	3,5	;RP0=0, select bank0
  1936     0371  1303               	bcf	3,6	;RP1=0, select bank0
  1937     0372  082B               	movf	_millis+3,w	;volatile
  1938     0373  1683               	bsf	3,5	;RP0=1, select bank1
  1939     0374  1303               	bcf	3,6	;RP1=0, select bank1
  1940     0375  00AF               	movwf	(_lastdryruncheck+3)^(0+128)
  1941     0376  1283               	bcf	3,5	;RP0=0, select bank0
  1942     0377  1303               	bcf	3,6	;RP1=0, select bank0
  1943     0378  082A               	movf	_millis+2,w	;volatile
  1944     0379  1683               	bsf	3,5	;RP0=1, select bank1
  1945     037A  1303               	bcf	3,6	;RP1=0, select bank1
  1946     037B  00AE               	movwf	(_lastdryruncheck+2)^(0+128)
  1947     037C  1283               	bcf	3,5	;RP0=0, select bank0
  1948     037D  1303               	bcf	3,6	;RP1=0, select bank0
  1949     037E  0829               	movf	_millis+1,w	;volatile
  1950     037F  1683               	bsf	3,5	;RP0=1, select bank1
  1951     0380  1303               	bcf	3,6	;RP1=0, select bank1
  1952     0381  00AD               	movwf	(_lastdryruncheck+1)^(0+128)
  1953     0382  1283               	bcf	3,5	;RP0=0, select bank0
  1954     0383  1303               	bcf	3,6	;RP1=0, select bank0
  1955     0384  0828               	movf	_millis,w	;volatile
  1956     0385  1683               	bsf	3,5	;RP0=1, select bank1
  1957     0386  1303               	bcf	3,6	;RP1=0, select bank1
  1958     0387  00AC               	movwf	_lastdryruncheck^(0+128)
  1959                           
  1960                           ;main.c: 270:           } else if (millis - lastdryruncheck >= dryruntime) {
  1961     0388  2BF2               	goto	l2197
  1962     0389                     l2183:
  1963     0389  0838               	movf	_dryruntime^(0+128),w
  1964     038A  1283               	bcf	3,5	;RP0=0, select bank0
  1965     038B  1303               	bcf	3,6	;RP1=0, select bank0
  1966     038C  00E0               	movwf	??_main
  1967     038D  1683               	bsf	3,5	;RP0=1, select bank1
  1968     038E  1303               	bcf	3,6	;RP1=0, select bank1
  1969     038F  0839               	movf	(_dryruntime+1)^(0+128),w
  1970     0390  1283               	bcf	3,5	;RP0=0, select bank0
  1971     0391  1303               	bcf	3,6	;RP1=0, select bank0
  1972     0392  00E1               	movwf	??_main+1
  1973     0393  01E2               	clrf	??_main+2
  1974     0394  01E3               	clrf	??_main+3
  1975     0395  0828               	movf	_millis,w	;volatile
  1976     0396  00E4               	movwf	??_main+4
  1977     0397  0829               	movf	_millis+1,w	;volatile
  1978     0398  00E5               	movwf	??_main+5
  1979     0399  082A               	movf	_millis+2,w	;volatile
  1980     039A  00E6               	movwf	??_main+6
  1981     039B  082B               	movf	_millis+3,w	;volatile
  1982     039C  00E7               	movwf	??_main+7
  1983     039D  1683               	bsf	3,5	;RP0=1, select bank1
  1984     039E  1303               	bcf	3,6	;RP1=0, select bank1
  1985     039F  082C               	movf	_lastdryruncheck^(0+128),w
  1986     03A0  1283               	bcf	3,5	;RP0=0, select bank0
  1987     03A1  1303               	bcf	3,6	;RP1=0, select bank0
  1988     03A2  02E4               	subwf	??_main+4,f
  1989     03A3  1683               	bsf	3,5	;RP0=1, select bank1
  1990     03A4  1303               	bcf	3,6	;RP1=0, select bank1
  1991     03A5  082D               	movf	(_lastdryruncheck+1)^(0+128),w
  1992     03A6  1C03               	skipc
  1993     03A7  0F2D               	incfsz	(_lastdryruncheck+1)^(0+128),w
  1994     03A8  2BAA               	goto	u2961
  1995     03A9  2BAD               	goto	u2962
  1996     03AA                     u2961:
  1997     03AA  1283               	bcf	3,5	;RP0=0, select bank0
  1998     03AB  1303               	bcf	3,6	;RP1=0, select bank0
  1999     03AC  02E5               	subwf	??_main+5,f
  2000     03AD                     u2962:
  2001     03AD  1683               	bsf	3,5	;RP0=1, select bank1
  2002     03AE  1303               	bcf	3,6	;RP1=0, select bank1
  2003     03AF  082E               	movf	(_lastdryruncheck+2)^(0+128),w
  2004     03B0  1C03               	skipc
  2005     03B1  0F2E               	incfsz	(_lastdryruncheck+2)^(0+128),w
  2006     03B2  2BB4               	goto	u2963
  2007     03B3  2BB7               	goto	u2964
  2008     03B4                     u2963:
  2009     03B4  1283               	bcf	3,5	;RP0=0, select bank0
  2010     03B5  1303               	bcf	3,6	;RP1=0, select bank0
  2011     03B6  02E6               	subwf	??_main+6,f
  2012     03B7                     u2964:
  2013     03B7  1683               	bsf	3,5	;RP0=1, select bank1
  2014     03B8  1303               	bcf	3,6	;RP1=0, select bank1
  2015     03B9  082F               	movf	(_lastdryruncheck+3)^(0+128),w
  2016     03BA  1C03               	skipc
  2017     03BB  0F2F               	incfsz	(_lastdryruncheck+3)^(0+128),w
  2018     03BC  2BBE               	goto	u2965
  2019     03BD  2BC1               	goto	u2966
  2020     03BE                     u2965:
  2021     03BE  1283               	bcf	3,5	;RP0=0, select bank0
  2022     03BF  1303               	bcf	3,6	;RP1=0, select bank0
  2023     03C0  02E7               	subwf	??_main+7,f
  2024     03C1                     u2966:
  2025     03C1  1683               	bsf	3,5	;RP0=1, select bank1
  2026     03C2  1303               	bcf	3,6	;RP1=0, select bank1
  2027     03C3  1283               	bcf	3,5	;RP0=0, select bank0
  2028     03C4  1303               	bcf	3,6	;RP1=0, select bank0
  2029     03C5  0863               	movf	??_main+3,w
  2030     03C6  0267               	subwf	??_main+7,w
  2031     03C7  1D03               	skipz
  2032     03C8  2BD3               	goto	u2975
  2033     03C9  0862               	movf	??_main+2,w
  2034     03CA  0266               	subwf	??_main+6,w
  2035     03CB  1D03               	skipz
  2036     03CC  2BD3               	goto	u2975
  2037     03CD  0861               	movf	??_main+1,w
  2038     03CE  0265               	subwf	??_main+5,w
  2039     03CF  1D03               	skipz
  2040     03D0  2BD3               	goto	u2975
  2041     03D1  0860               	movf	??_main,w
  2042     03D2  0264               	subwf	??_main+4,w
  2043     03D3                     u2975:
  2044     03D3  1C03               	skipc
  2045     03D4  2BD6               	goto	u2971
  2046     03D5  2BD7               	goto	u2970
  2047     03D6                     u2971:
  2048     03D6  2BE9               	goto	l211
  2049     03D7                     u2970:
  2050     03D7                     l2185:
  2051                           
  2052                           ;main.c: 271:             dryrunerror = 1;
  2053     03D7  3001               	movlw	1
  2054     03D8  00B9               	movwf	_dryrunerror
  2055                           
  2056                           ;main.c: 272:             PORTAbits.RA2 = 1;
  2057     03D9  1505               	bsf	5,2	;volatile
  2058     03DA  2BF2               	goto	l2197
  2059     03DB                     l2187:
  2060                           
  2061                           ;main.c: 275:           lastdryruncheck = 0;
  2062     03DB  3000               	movlw	0
  2063     03DC  1683               	bsf	3,5	;RP0=1, select bank1
  2064     03DD  1303               	bcf	3,6	;RP1=0, select bank1
  2065     03DE  00AF               	movwf	(_lastdryruncheck+3)^(0+128)
  2066     03DF  3000               	movlw	0
  2067     03E0  00AE               	movwf	(_lastdryruncheck+2)^(0+128)
  2068     03E1  3000               	movlw	0
  2069     03E2  00AD               	movwf	(_lastdryruncheck+1)^(0+128)
  2070     03E3  3000               	movlw	0
  2071     03E4  00AC               	movwf	_lastdryruncheck^(0+128)
  2072     03E5                     l2189:
  2073                           
  2074                           ;main.c: 276:           PORTAbits.RA2 = 0;
  2075     03E5  1283               	bcf	3,5	;RP0=0, select bank0
  2076     03E6  1303               	bcf	3,6	;RP1=0, select bank0
  2077     03E7  1105               	bcf	5,2	;volatile
  2078     03E8  2BF2               	goto	l2197
  2079     03E9                     l211:	
  2080                           ;main.c: 284:       }
  2081                           
  2082                           
  2083                           ;main.c: 285:     } else {
  2084     03E9  2BF2               	goto	l2197
  2085     03EA                     l2191:
  2086                           
  2087                           ;main.c: 286:       if (motorrunning) {
  2088     03EA  0837               	movf	_motorrunning,w
  2089     03EB  1903               	btfsc	3,2
  2090     03EC  2BEE               	goto	u2981
  2091     03ED  2BEF               	goto	u2980
  2092     03EE                     u2981:
  2093     03EE  2BF2               	goto	l2197
  2094     03EF                     u2980:
  2095     03EF                     l2193:
  2096                           
  2097                           ;main.c: 287:         motorrunning = 0;
  2098     03EF  01B7               	clrf	_motorrunning
  2099                           
  2100                           ;main.c: 288:         mannualon = 0;
  2101     03F0  01BB               	clrf	_mannualon
  2102     03F1                     l2195:
  2103                           
  2104                           ;main.c: 289:         PORTCbits.RC3 = 0;
  2105     03F1  1187               	bcf	7,3	;volatile
  2106     03F2                     l2197:
  2107                           
  2108                           ;main.c: 292:     if (timeouterror) {
  2109     03F2  1283               	bcf	3,5	;RP0=0, select bank0
  2110     03F3  0838               	movf	_timeouterror,w
  2111     03F4  1903               	btfsc	3,2
  2112     03F5  2BF7               	goto	u2991
  2113     03F6  2BF8               	goto	u2990
  2114     03F7                     u2991:
  2115     03F7  2BF9               	goto	l2201
  2116     03F8                     u2990:
  2117     03F8                     l2199:
  2118                           
  2119                           ;main.c: 293:       motorrunning = 0;
  2120     03F8  01B7               	clrf	_motorrunning
  2121     03F9                     l2201:
  2122                           
  2123                           ;main.c: 295:     if (dryrunerror) {
  2124     03F9  0839               	movf	_dryrunerror,w
  2125     03FA  1903               	btfsc	3,2
  2126     03FB  2BFD               	goto	u3001
  2127     03FC  2BFE               	goto	u3000
  2128     03FD                     u3001:
  2129     03FD  2BFF               	goto	l2205
  2130     03FE                     u3000:
  2131     03FE                     l2203:
  2132                           
  2133                           ;main.c: 296:       motorrunning = 0;
  2134     03FE  01B7               	clrf	_motorrunning
  2135     03FF                     l2205:
  2136                           
  2137                           ;main.c: 298:     if (voltageerror) {
  2138     03FF  083A               	movf	_voltageerror,w
  2139     0400  1903               	btfsc	3,2
  2140     0401  2C03               	goto	u3011
  2141     0402  2C04               	goto	u3010
  2142     0403                     u3011:
  2143     0403  2C51               	goto	l2219
  2144     0404                     u3010:
  2145     0404                     l2207:
  2146                           
  2147                           ;main.c: 299:       if (lastvoltageerror == 0) {
  2148     0404  0827               	movf	_lastvoltageerror+3,w
  2149     0405  0426               	iorwf	_lastvoltageerror+2,w
  2150     0406  0425               	iorwf	_lastvoltageerror+1,w
  2151     0407  0424               	iorwf	_lastvoltageerror,w
  2152     0408  1D03               	skipz
  2153     0409  2C0B               	goto	u3021
  2154     040A  2C0C               	goto	u3020
  2155     040B                     u3021:
  2156     040B  2C15               	goto	l2211
  2157     040C                     u3020:
  2158     040C                     l2209:
  2159                           
  2160                           ;main.c: 300:         lastvoltageerror = seconds_counter;
  2161     040C  082F               	movf	_seconds_counter+3,w	;volatile
  2162     040D  00A7               	movwf	_lastvoltageerror+3
  2163     040E  082E               	movf	_seconds_counter+2,w	;volatile
  2164     040F  00A6               	movwf	_lastvoltageerror+2
  2165     0410  082D               	movf	_seconds_counter+1,w	;volatile
  2166     0411  00A5               	movwf	_lastvoltageerror+1
  2167     0412  082C               	movf	_seconds_counter,w	;volatile
  2168     0413  00A4               	movwf	_lastvoltageerror
  2169                           
  2170                           ;main.c: 301:       } else if (seconds_counter - lastvoltageerror >= maxvoltageerrortime
      +                          ) {
  2171     0414  2C4D               	goto	l2217
  2172     0415                     l2211:
  2173     0415  082C               	movf	_seconds_counter,w	;volatile
  2174     0416  00E0               	movwf	??_main
  2175     0417  082D               	movf	_seconds_counter+1,w	;volatile
  2176     0418  00E1               	movwf	??_main+1
  2177     0419  082E               	movf	_seconds_counter+2,w	;volatile
  2178     041A  00E2               	movwf	??_main+2
  2179     041B  082F               	movf	_seconds_counter+3,w	;volatile
  2180     041C  00E3               	movwf	??_main+3
  2181     041D  0824               	movf	_lastvoltageerror,w
  2182     041E  02E0               	subwf	??_main,f
  2183     041F  0825               	movf	_lastvoltageerror+1,w
  2184     0420  1C03               	skipc
  2185     0421  0F25               	incfsz	_lastvoltageerror+1,w
  2186     0422  2C24               	goto	u3031
  2187     0423  2C25               	goto	u3032
  2188     0424                     u3031:
  2189     0424  02E1               	subwf	??_main+1,f
  2190     0425                     u3032:
  2191     0425  0826               	movf	_lastvoltageerror+2,w
  2192     0426  1C03               	skipc
  2193     0427  0F26               	incfsz	_lastvoltageerror+2,w
  2194     0428  2C2A               	goto	u3033
  2195     0429  2C2B               	goto	u3034
  2196     042A                     u3033:
  2197     042A  02E2               	subwf	??_main+2,f
  2198     042B                     u3034:
  2199     042B  0827               	movf	_lastvoltageerror+3,w
  2200     042C  1C03               	skipc
  2201     042D  0F27               	incfsz	_lastvoltageerror+3,w
  2202     042E  2C30               	goto	u3035
  2203     042F  2C31               	goto	u3036
  2204     0430                     u3035:
  2205     0430  02E3               	subwf	??_main+3,f
  2206     0431                     u3036:
  2207     0431  0863               	movf	??_main+3,w
  2208     0432  1D03               	btfss	3,2
  2209     0433  2C42               	goto	u3040
  2210     0434  0862               	movf	??_main+2,w
  2211     0435  1D03               	btfss	3,2
  2212     0436  2C42               	goto	u3040
  2213     0437  0861               	movf	??_main+1,w
  2214     0438  1D03               	btfss	3,2
  2215     0439  2C42               	goto	u3040
  2216     043A  300A               	movlw	10
  2217     043B  0260               	subwf	??_main,w
  2218     043C  1D03               	skipz
  2219     043D  2C3E               	goto	u3043
  2220     043E                     u3043:
  2221     043E  1C03               	btfss	3,0
  2222     043F  2C41               	goto	u3041
  2223     0440  2C42               	goto	u3040
  2224     0441                     u3041:
  2225     0441  2C4D               	goto	l2217
  2226     0442                     u3040:
  2227     0442                     l2213:
  2228                           
  2229                           ;main.c: 302:         voltageerror = 0;
  2230     0442  1283               	bcf	3,5	;RP0=0, select bank0
  2231     0443  1303               	bcf	3,6	;RP1=0, select bank0
  2232     0444  01BA               	clrf	_voltageerror
  2233     0445                     l2215:
  2234                           
  2235                           ;main.c: 303:         lastvoltageerror = 0;
  2236     0445  3000               	movlw	0
  2237     0446  00A7               	movwf	_lastvoltageerror+3
  2238     0447  3000               	movlw	0
  2239     0448  00A6               	movwf	_lastvoltageerror+2
  2240     0449  3000               	movlw	0
  2241     044A  00A5               	movwf	_lastvoltageerror+1
  2242     044B  3000               	movlw	0
  2243     044C  00A4               	movwf	_lastvoltageerror
  2244     044D                     l2217:
  2245                           
  2246                           ;main.c: 306:       motorrunning = 0;
  2247     044D  1283               	bcf	3,5	;RP0=0, select bank0
  2248     044E  1303               	bcf	3,6	;RP1=0, select bank0
  2249     044F  01B7               	clrf	_motorrunning
  2250                           
  2251                           ;main.c: 307:     }else if (lastvoltageerror !=0 && (seconds_counter - lastvoltageerror 
      +                          >= maxvoltageerrortime)){
  2252     0450  2C90               	goto	l2225
  2253     0451                     l2219:
  2254     0451  0827               	movf	_lastvoltageerror+3,w
  2255     0452  0426               	iorwf	_lastvoltageerror+2,w
  2256     0453  0425               	iorwf	_lastvoltageerror+1,w
  2257     0454  0424               	iorwf	_lastvoltageerror,w
  2258     0455  1903               	skipnz
  2259     0456  2C58               	goto	u3051
  2260     0457  2C59               	goto	u3050
  2261     0458                     u3051:
  2262     0458  2C90               	goto	l2225
  2263     0459                     u3050:
  2264     0459                     l2221:
  2265     0459  082C               	movf	_seconds_counter,w	;volatile
  2266     045A  00E0               	movwf	??_main
  2267     045B  082D               	movf	_seconds_counter+1,w	;volatile
  2268     045C  00E1               	movwf	??_main+1
  2269     045D  082E               	movf	_seconds_counter+2,w	;volatile
  2270     045E  00E2               	movwf	??_main+2
  2271     045F  082F               	movf	_seconds_counter+3,w	;volatile
  2272     0460  00E3               	movwf	??_main+3
  2273     0461  0824               	movf	_lastvoltageerror,w
  2274     0462  02E0               	subwf	??_main,f
  2275     0463  0825               	movf	_lastvoltageerror+1,w
  2276     0464  1C03               	skipc
  2277     0465  0F25               	incfsz	_lastvoltageerror+1,w
  2278     0466  2C68               	goto	u3061
  2279     0467  2C69               	goto	u3062
  2280     0468                     u3061:
  2281     0468  02E1               	subwf	??_main+1,f
  2282     0469                     u3062:
  2283     0469  0826               	movf	_lastvoltageerror+2,w
  2284     046A  1C03               	skipc
  2285     046B  0F26               	incfsz	_lastvoltageerror+2,w
  2286     046C  2C6E               	goto	u3063
  2287     046D  2C6F               	goto	u3064
  2288     046E                     u3063:
  2289     046E  02E2               	subwf	??_main+2,f
  2290     046F                     u3064:
  2291     046F  0827               	movf	_lastvoltageerror+3,w
  2292     0470  1C03               	skipc
  2293     0471  0F27               	incfsz	_lastvoltageerror+3,w
  2294     0472  2C74               	goto	u3065
  2295     0473  2C75               	goto	u3066
  2296     0474                     u3065:
  2297     0474  02E3               	subwf	??_main+3,f
  2298     0475                     u3066:
  2299     0475  0863               	movf	??_main+3,w
  2300     0476  1D03               	btfss	3,2
  2301     0477  2C86               	goto	u3070
  2302     0478  0862               	movf	??_main+2,w
  2303     0479  1D03               	btfss	3,2
  2304     047A  2C86               	goto	u3070
  2305     047B  0861               	movf	??_main+1,w
  2306     047C  1D03               	btfss	3,2
  2307     047D  2C86               	goto	u3070
  2308     047E  300A               	movlw	10
  2309     047F  0260               	subwf	??_main,w
  2310     0480  1D03               	skipz
  2311     0481  2C82               	goto	u3073
  2312     0482                     u3073:
  2313     0482  1C03               	btfss	3,0
  2314     0483  2C85               	goto	u3071
  2315     0484  2C86               	goto	u3070
  2316     0485                     u3071:
  2317     0485  2C90               	goto	l2225
  2318     0486                     u3070:
  2319     0486                     l2223:
  2320                           
  2321                           ;main.c: 308:       lastvoltageerror = 0;
  2322     0486  3000               	movlw	0
  2323     0487  1283               	bcf	3,5	;RP0=0, select bank0
  2324     0488  1303               	bcf	3,6	;RP1=0, select bank0
  2325     0489  00A7               	movwf	_lastvoltageerror+3
  2326     048A  3000               	movlw	0
  2327     048B  00A6               	movwf	_lastvoltageerror+2
  2328     048C  3000               	movlw	0
  2329     048D  00A5               	movwf	_lastvoltageerror+1
  2330     048E  3000               	movlw	0
  2331     048F  00A4               	movwf	_lastvoltageerror
  2332     0490                     l2225:
  2333                           
  2334                           ;main.c: 310:     if (!motorrunning) {
  2335     0490  1283               	bcf	3,5	;RP0=0, select bank0
  2336     0491  1303               	bcf	3,6	;RP1=0, select bank0
  2337     0492  0837               	movf	_motorrunning,w
  2338     0493  1D03               	btfss	3,2
  2339     0494  2C96               	goto	u3081
  2340     0495  2C97               	goto	u3080
  2341     0496                     u3081:
  2342     0496  2CB4               	goto	l230
  2343     0497                     u3080:
  2344     0497                     l2227:
  2345                           
  2346                           ;main.c: 311:       if (voltage > maxvoltagelimit || voltage < minvoltagelimit) {
  2347     0497  0840               	movf	_voltage,w
  2348     0498  00E0               	movwf	??_main
  2349     0499  01E1               	clrf	??_main+1
  2350     049A  0861               	movf	??_main+1,w
  2351     049B  026B               	subwf	_maxvoltagelimit+1,w
  2352     049C  1D03               	skipz
  2353     049D  2CA0               	goto	u3095
  2354     049E  0860               	movf	??_main,w
  2355     049F  026A               	subwf	_maxvoltagelimit,w
  2356     04A0                     u3095:
  2357     04A0  1C03               	skipc
  2358     04A1  2CA3               	goto	u3091
  2359     04A2  2CA4               	goto	u3090
  2360     04A3                     u3091:
  2361     04A3  2CAF               	goto	l233
  2362     04A4                     u3090:
  2363     04A4                     l2229:
  2364     04A4  0840               	movf	_voltage,w
  2365     04A5  00E0               	movwf	??_main
  2366     04A6  086D               	movf	_minvoltagelimit+1,w
  2367     04A7  1D03               	skipz
  2368     04A8  2CAB               	goto	u3105
  2369     04A9  086C               	movf	_minvoltagelimit,w
  2370     04AA  0260               	subwf	??_main,w
  2371     04AB                     u3105:
  2372     04AB  1803               	skipnc
  2373     04AC  2CAE               	goto	u3101
  2374     04AD  2CAF               	goto	u3100
  2375     04AE                     u3101:
  2376     04AE  2CB1               	goto	l231
  2377     04AF                     u3100:
  2378     04AF                     l233:
  2379                           
  2380                           ;main.c: 312:           voltageerror = 1;
  2381     04AF  3001               	movlw	1
  2382     04B0  00BA               	movwf	_voltageerror
  2383     04B1                     l231:	
  2384                           ;main.c: 313:         }
  2385                           
  2386                           
  2387                           ;main.c: 314:       PORTCbits.RC3 = 0;
  2388     04B1  1187               	bcf	7,3	;volatile
  2389                           
  2390                           ;main.c: 315:       PORTAbits.RA1 = 0;
  2391     04B2  1085               	bcf	5,1	;volatile
  2392                           
  2393                           ;main.c: 316:     } else {
  2394     04B3  2D17               	goto	l2237
  2395     04B4                     l230:
  2396                           
  2397                           ;main.c: 317:       PORTAbits.RA1 = 1;
  2398     04B4  1485               	bsf	5,1	;volatile
  2399                           
  2400                           ;main.c: 318:       PORTCbits.RC3 = 1;
  2401     04B5  1587               	bsf	7,3	;volatile
  2402     04B6                     l2231:
  2403                           
  2404                           ;main.c: 319:       if (millis - lt >= 20000) {
  2405     04B6  0828               	movf	_millis,w	;volatile
  2406     04B7  00E0               	movwf	??_main
  2407     04B8  0829               	movf	_millis+1,w	;volatile
  2408     04B9  00E1               	movwf	??_main+1
  2409     04BA  082A               	movf	_millis+2,w	;volatile
  2410     04BB  00E2               	movwf	??_main+2
  2411     04BC  082B               	movf	_millis+3,w	;volatile
  2412     04BD  00E3               	movwf	??_main+3
  2413     04BE  1683               	bsf	3,5	;RP0=1, select bank1
  2414     04BF  1303               	bcf	3,6	;RP1=0, select bank1
  2415     04C0  0820               	movf	_lt^(0+128),w
  2416     04C1  1283               	bcf	3,5	;RP0=0, select bank0
  2417     04C2  1303               	bcf	3,6	;RP1=0, select bank0
  2418     04C3  02E0               	subwf	??_main,f
  2419     04C4  1683               	bsf	3,5	;RP0=1, select bank1
  2420     04C5  1303               	bcf	3,6	;RP1=0, select bank1
  2421     04C6  0821               	movf	(_lt+1)^(0+128),w
  2422     04C7  1C03               	skipc
  2423     04C8  0F21               	incfsz	(_lt+1)^(0+128),w
  2424     04C9  2CCB               	goto	u3111
  2425     04CA  2CCE               	goto	u3112
  2426     04CB                     u3111:
  2427     04CB  1283               	bcf	3,5	;RP0=0, select bank0
  2428     04CC  1303               	bcf	3,6	;RP1=0, select bank0
  2429     04CD  02E1               	subwf	??_main+1,f
  2430     04CE                     u3112:
  2431     04CE  1683               	bsf	3,5	;RP0=1, select bank1
  2432     04CF  1303               	bcf	3,6	;RP1=0, select bank1
  2433     04D0  0822               	movf	(_lt+2)^(0+128),w
  2434     04D1  1C03               	skipc
  2435     04D2  0F22               	incfsz	(_lt+2)^(0+128),w
  2436     04D3  2CD5               	goto	u3113
  2437     04D4  2CD8               	goto	u3114
  2438     04D5                     u3113:
  2439     04D5  1283               	bcf	3,5	;RP0=0, select bank0
  2440     04D6  1303               	bcf	3,6	;RP1=0, select bank0
  2441     04D7  02E2               	subwf	??_main+2,f
  2442     04D8                     u3114:
  2443     04D8  1683               	bsf	3,5	;RP0=1, select bank1
  2444     04D9  1303               	bcf	3,6	;RP1=0, select bank1
  2445     04DA  0823               	movf	(_lt+3)^(0+128),w
  2446     04DB  1C03               	skipc
  2447     04DC  0F23               	incfsz	(_lt+3)^(0+128),w
  2448     04DD  2CDF               	goto	u3115
  2449     04DE  2CE2               	goto	u3116
  2450     04DF                     u3115:
  2451     04DF  1283               	bcf	3,5	;RP0=0, select bank0
  2452     04E0  1303               	bcf	3,6	;RP1=0, select bank0
  2453     04E1  02E3               	subwf	??_main+3,f
  2454     04E2                     u3116:
  2455     04E2  1683               	bsf	3,5	;RP0=1, select bank1
  2456     04E3  1303               	bcf	3,6	;RP1=0, select bank1
  2457     04E4  1283               	bcf	3,5	;RP0=0, select bank0
  2458     04E5  1303               	bcf	3,6	;RP1=0, select bank0
  2459     04E6  0863               	movf	??_main+3,w
  2460     04E7  1D03               	btfss	3,2
  2461     04E8  2CF8               	goto	u3120
  2462     04E9  0862               	movf	??_main+2,w
  2463     04EA  1D03               	btfss	3,2
  2464     04EB  2CF8               	goto	u3120
  2465     04EC  304E               	movlw	78
  2466     04ED  0261               	subwf	??_main+1,w
  2467     04EE  1D03               	skipz
  2468     04EF  2CF4               	goto	u3123
  2469     04F0  3020               	movlw	32
  2470     04F1  0260               	subwf	??_main,w
  2471     04F2  1D03               	skipz
  2472     04F3  2CF4               	goto	u3123
  2473     04F4                     u3123:
  2474     04F4  1C03               	btfss	3,0
  2475     04F5  2CF7               	goto	u3121
  2476     04F6  2CF8               	goto	u3120
  2477     04F7                     u3121:
  2478     04F7  2D17               	goto	l2237
  2479     04F8                     u3120:
  2480     04F8                     l2233:
  2481                           
  2482                           ;main.c: 320:         lt = millis;
  2483     04F8  1283               	bcf	3,5	;RP0=0, select bank0
  2484     04F9  1303               	bcf	3,6	;RP1=0, select bank0
  2485     04FA  082B               	movf	_millis+3,w	;volatile
  2486     04FB  1683               	bsf	3,5	;RP0=1, select bank1
  2487     04FC  1303               	bcf	3,6	;RP1=0, select bank1
  2488     04FD  00A3               	movwf	(_lt+3)^(0+128)
  2489     04FE  1283               	bcf	3,5	;RP0=0, select bank0
  2490     04FF  1303               	bcf	3,6	;RP1=0, select bank0
  2491     0500  082A               	movf	_millis+2,w	;volatile
  2492     0501  1683               	bsf	3,5	;RP0=1, select bank1
  2493     0502  1303               	bcf	3,6	;RP1=0, select bank1
  2494     0503  00A2               	movwf	(_lt+2)^(0+128)
  2495     0504  1283               	bcf	3,5	;RP0=0, select bank0
  2496     0505  1303               	bcf	3,6	;RP1=0, select bank0
  2497     0506  0829               	movf	_millis+1,w	;volatile
  2498     0507  1683               	bsf	3,5	;RP0=1, select bank1
  2499     0508  1303               	bcf	3,6	;RP1=0, select bank1
  2500     0509  00A1               	movwf	(_lt+1)^(0+128)
  2501     050A  1283               	bcf	3,5	;RP0=0, select bank0
  2502     050B  1303               	bcf	3,6	;RP1=0, select bank0
  2503     050C  0828               	movf	_millis,w	;volatile
  2504     050D  1683               	bsf	3,5	;RP0=1, select bank1
  2505     050E  1303               	bcf	3,6	;RP1=0, select bank1
  2506     050F  00A0               	movwf	_lt^(0+128)
  2507     0510                     l2235:
  2508                           
  2509                           ;main.c: 322:         trigger_buzzer(200);
  2510     0510  30C8               	movlw	200
  2511     0511  00F2               	movwf	trigger_buzzer@duration_seconds
  2512     0512  3000               	movlw	0
  2513     0513  00F3               	movwf	trigger_buzzer@duration_seconds+1
  2514     0514  158A  27B1  118A   	fcall	_trigger_buzzer
  2515     0517                     l2237:
  2516                           
  2517                           ;main.c: 327:     if ((millis - last_millis) >= 1000) {
  2518     0517  1283               	bcf	3,5	;RP0=0, select bank0
  2519     0518  1303               	bcf	3,6	;RP1=0, select bank0
  2520     0519  0828               	movf	_millis,w	;volatile
  2521     051A  00E0               	movwf	??_main
  2522     051B  0829               	movf	_millis+1,w	;volatile
  2523     051C  00E1               	movwf	??_main+1
  2524     051D  082A               	movf	_millis+2,w	;volatile
  2525     051E  00E2               	movwf	??_main+2
  2526     051F  082B               	movf	_millis+3,w	;volatile
  2527     0520  00E3               	movwf	??_main+3
  2528     0521  1683               	bsf	3,5	;RP0=1, select bank1
  2529     0522  1303               	bcf	3,6	;RP1=0, select bank1
  2530     0523  0830               	movf	_last_millis^(0+128),w
  2531     0524  1283               	bcf	3,5	;RP0=0, select bank0
  2532     0525  1303               	bcf	3,6	;RP1=0, select bank0
  2533     0526  02E0               	subwf	??_main,f
  2534     0527  1683               	bsf	3,5	;RP0=1, select bank1
  2535     0528  1303               	bcf	3,6	;RP1=0, select bank1
  2536     0529  0831               	movf	(_last_millis+1)^(0+128),w
  2537     052A  1C03               	skipc
  2538     052B  0F31               	incfsz	(_last_millis+1)^(0+128),w
  2539     052C  2D2E               	goto	u3131
  2540     052D  2D31               	goto	u3132
  2541     052E                     u3131:
  2542     052E  1283               	bcf	3,5	;RP0=0, select bank0
  2543     052F  1303               	bcf	3,6	;RP1=0, select bank0
  2544     0530  02E1               	subwf	??_main+1,f
  2545     0531                     u3132:
  2546     0531  1683               	bsf	3,5	;RP0=1, select bank1
  2547     0532  1303               	bcf	3,6	;RP1=0, select bank1
  2548     0533  0832               	movf	(_last_millis+2)^(0+128),w
  2549     0534  1C03               	skipc
  2550     0535  0F32               	incfsz	(_last_millis+2)^(0+128),w
  2551     0536  2D38               	goto	u3133
  2552     0537  2D3B               	goto	u3134
  2553     0538                     u3133:
  2554     0538  1283               	bcf	3,5	;RP0=0, select bank0
  2555     0539  1303               	bcf	3,6	;RP1=0, select bank0
  2556     053A  02E2               	subwf	??_main+2,f
  2557     053B                     u3134:
  2558     053B  1683               	bsf	3,5	;RP0=1, select bank1
  2559     053C  1303               	bcf	3,6	;RP1=0, select bank1
  2560     053D  0833               	movf	(_last_millis+3)^(0+128),w
  2561     053E  1C03               	skipc
  2562     053F  0F33               	incfsz	(_last_millis+3)^(0+128),w
  2563     0540  2D42               	goto	u3135
  2564     0541  2D45               	goto	u3136
  2565     0542                     u3135:
  2566     0542  1283               	bcf	3,5	;RP0=0, select bank0
  2567     0543  1303               	bcf	3,6	;RP1=0, select bank0
  2568     0544  02E3               	subwf	??_main+3,f
  2569     0545                     u3136:
  2570     0545  1683               	bsf	3,5	;RP0=1, select bank1
  2571     0546  1303               	bcf	3,6	;RP1=0, select bank1
  2572     0547  1283               	bcf	3,5	;RP0=0, select bank0
  2573     0548  1303               	bcf	3,6	;RP1=0, select bank0
  2574     0549  0863               	movf	??_main+3,w
  2575     054A  1D03               	btfss	3,2
  2576     054B  2D5B               	goto	u3140
  2577     054C  0862               	movf	??_main+2,w
  2578     054D  1D03               	btfss	3,2
  2579     054E  2D5B               	goto	u3140
  2580     054F  3003               	movlw	3
  2581     0550  0261               	subwf	??_main+1,w
  2582     0551  1D03               	skipz
  2583     0552  2D57               	goto	u3143
  2584     0553  30E8               	movlw	232
  2585     0554  0260               	subwf	??_main,w
  2586     0555  1D03               	skipz
  2587     0556  2D57               	goto	u3143
  2588     0557                     u3143:
  2589     0557  1C03               	btfss	3,0
  2590     0558  2D5A               	goto	u3141
  2591     0559  2D5B               	goto	u3140
  2592     055A                     u3141:
  2593     055A  28D9               	goto	l2063
  2594     055B                     u3140:
  2595     055B                     l2239:
  2596                           
  2597                           ;main.c: 328:         seconds_counter ++;
  2598     055B  3001               	movlw	1
  2599     055C  1283               	bcf	3,5	;RP0=0, select bank0
  2600     055D  1303               	bcf	3,6	;RP1=0, select bank0
  2601     055E  07AC               	addwf	_seconds_counter,f	;volatile
  2602     055F  3000               	movlw	0
  2603     0560  1803               	skipnc
  2604     0561  3001               	movlw	1
  2605     0562  07AD               	addwf	_seconds_counter+1,f	;volatile
  2606     0563  3000               	movlw	0
  2607     0564  1803               	skipnc
  2608     0565  3001               	movlw	1
  2609     0566  07AE               	addwf	_seconds_counter+2,f	;volatile
  2610     0567  3000               	movlw	0
  2611     0568  1803               	skipnc
  2612     0569  3001               	movlw	1
  2613     056A  07AF               	addwf	_seconds_counter+3,f	;volatile
  2614                           
  2615                           ;main.c: 329:         last_millis = millis;
  2616     056B  082B               	movf	_millis+3,w	;volatile
  2617     056C  1683               	bsf	3,5	;RP0=1, select bank1
  2618     056D  1303               	bcf	3,6	;RP1=0, select bank1
  2619     056E  00B3               	movwf	(_last_millis+3)^(0+128)
  2620     056F  1283               	bcf	3,5	;RP0=0, select bank0
  2621     0570  1303               	bcf	3,6	;RP1=0, select bank0
  2622     0571  082A               	movf	_millis+2,w	;volatile
  2623     0572  1683               	bsf	3,5	;RP0=1, select bank1
  2624     0573  1303               	bcf	3,6	;RP1=0, select bank1
  2625     0574  00B2               	movwf	(_last_millis+2)^(0+128)
  2626     0575  1283               	bcf	3,5	;RP0=0, select bank0
  2627     0576  1303               	bcf	3,6	;RP1=0, select bank0
  2628     0577  0829               	movf	_millis+1,w	;volatile
  2629     0578  1683               	bsf	3,5	;RP0=1, select bank1
  2630     0579  1303               	bcf	3,6	;RP1=0, select bank1
  2631     057A  00B1               	movwf	(_last_millis+1)^(0+128)
  2632     057B  1283               	bcf	3,5	;RP0=0, select bank0
  2633     057C  1303               	bcf	3,6	;RP1=0, select bank0
  2634     057D  0828               	movf	_millis,w	;volatile
  2635     057E  1683               	bsf	3,5	;RP0=1, select bank1
  2636     057F  1303               	bcf	3,6	;RP1=0, select bank1
  2637     0580  00B0               	movwf	_last_millis^(0+128)
  2638     0581  28D9               	goto	l2063
  2639     0582  118A  280B         	ljmp	start
  2640     0584                     __end_of_main:
  2641                           
  2642                           	psect	text1
  2643     0FB1                     __ptext1:	
  2644 ;; *************** function _trigger_buzzer *****************
  2645 ;; Defined at:
  2646 ;;		line 522 in file "main.c"
  2647 ;; Parameters:    Size  Location     Type
  2648 ;;  duration_sec    2    2[COMMON] unsigned int 
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;		None
  2651 ;; Return value:  Size  Location     Type
  2652 ;;                  1    wreg      void 
  2653 ;; Registers used:
  2654 ;;		wreg, status,2, status,0
  2655 ;; Tracked objects:
  2656 ;;		On entry : 0/0
  2657 ;;		On exit  : 0/0
  2658 ;;		Unchanged: 0/0
  2659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2660 ;;      Params:         2       0       0       0
  2661 ;;      Locals:         0       0       0       0
  2662 ;;      Temps:          0       0       0       0
  2663 ;;      Totals:         2       0       0       0
  2664 ;;Total ram usage:        2 bytes
  2665 ;; Hardware stack levels used: 1
  2666 ;; Hardware stack levels required when called: 1
  2667 ;; This function calls:
  2668 ;;		Nothing
  2669 ;; This function is called by:
  2670 ;;		_main
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674     0FB1                     _trigger_buzzer:	
  2675                           ;psect for function _trigger_buzzer
  2676                           
  2677     0FB1                     l1899:	
  2678                           ;incstack = 0
  2679                           ; Regs used in _trigger_buzzer: [wreg+status,2+status,0]
  2680                           
  2681                           
  2682                           ;main.c: 523:   if (!buzzer_active) {
  2683     0FB1  1283               	bcf	3,5	;RP0=0, select bank0
  2684     0FB2  1303               	bcf	3,6	;RP1=0, select bank0
  2685     0FB3  0832               	movf	_buzzer_active,w
  2686     0FB4  1D03               	btfss	3,2
  2687     0FB5  2FB7               	goto	u2211
  2688     0FB6  2FB8               	goto	u2210
  2689     0FB7                     u2211:
  2690     0FB7  2FD7               	goto	l306
  2691     0FB8                     u2210:
  2692     0FB8                     l1901:
  2693                           
  2694                           ;main.c: 524:     PORTCbits.RC4 = 1;
  2695     0FB8  1607               	bsf	7,4	;volatile
  2696     0FB9                     l1903:
  2697                           
  2698                           ;main.c: 525:     buzzer_start_time = millis;
  2699     0FB9  082B               	movf	_millis+3,w	;volatile
  2700     0FBA  1683               	bsf	3,5	;RP0=1, select bank1
  2701     0FBB  1303               	bcf	3,6	;RP1=0, select bank1
  2702     0FBC  00A7               	movwf	(_buzzer_start_time+3)^(0+128)
  2703     0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  2704     0FBE  1303               	bcf	3,6	;RP1=0, select bank0
  2705     0FBF  082A               	movf	_millis+2,w	;volatile
  2706     0FC0  1683               	bsf	3,5	;RP0=1, select bank1
  2707     0FC1  1303               	bcf	3,6	;RP1=0, select bank1
  2708     0FC2  00A6               	movwf	(_buzzer_start_time+2)^(0+128)
  2709     0FC3  1283               	bcf	3,5	;RP0=0, select bank0
  2710     0FC4  1303               	bcf	3,6	;RP1=0, select bank0
  2711     0FC5  0829               	movf	_millis+1,w	;volatile
  2712     0FC6  1683               	bsf	3,5	;RP0=1, select bank1
  2713     0FC7  1303               	bcf	3,6	;RP1=0, select bank1
  2714     0FC8  00A5               	movwf	(_buzzer_start_time+1)^(0+128)
  2715     0FC9  1283               	bcf	3,5	;RP0=0, select bank0
  2716     0FCA  1303               	bcf	3,6	;RP1=0, select bank0
  2717     0FCB  0828               	movf	_millis,w	;volatile
  2718     0FCC  1683               	bsf	3,5	;RP0=1, select bank1
  2719     0FCD  1303               	bcf	3,6	;RP1=0, select bank1
  2720     0FCE  00A4               	movwf	_buzzer_start_time^(0+128)
  2721                           
  2722                           ;main.c: 526:     buzzer_duration = duration_seconds;
  2723     0FCF  0873               	movf	trigger_buzzer@duration_seconds+1,w
  2724     0FD0  00B5               	movwf	(_buzzer_duration+1)^(0+128)
  2725     0FD1  0872               	movf	trigger_buzzer@duration_seconds,w
  2726     0FD2  00B4               	movwf	_buzzer_duration^(0+128)
  2727     0FD3                     l1905:
  2728                           
  2729                           ;main.c: 527:     buzzer_active = 1;
  2730     0FD3  3001               	movlw	1
  2731     0FD4  1283               	bcf	3,5	;RP0=0, select bank0
  2732     0FD5  1303               	bcf	3,6	;RP1=0, select bank0
  2733     0FD6  00B2               	movwf	_buzzer_active
  2734     0FD7                     l306:
  2735     0FD7  0008               	return
  2736     0FD8                     __end_of_trigger_buzzer:
  2737                           
  2738                           	psect	text2
  2739     0EEB                     __ptext2:	
  2740 ;; *************** function _startSensorReading *****************
  2741 ;; Defined at:
  2742 ;;		line 381 in file "main.c"
  2743 ;; Parameters:    Size  Location     Type
  2744 ;;		None
  2745 ;; Auto vars:     Size  Location     Type
  2746 ;;		None
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  1    wreg      void 
  2749 ;; Registers used:
  2750 ;;		wreg, status,2, status,0
  2751 ;; Tracked objects:
  2752 ;;		On entry : 0/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2756 ;;      Params:         0       0       0       0
  2757 ;;      Locals:         0       0       0       0
  2758 ;;      Temps:          0       0       0       0
  2759 ;;      Totals:         0       0       0       0
  2760 ;;Total ram usage:        0 bytes
  2761 ;; Hardware stack levels used: 1
  2762 ;; Hardware stack levels required when called: 1
  2763 ;; This function calls:
  2764 ;;		Nothing
  2765 ;; This function is called by:
  2766 ;;		_main
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770     0EEB                     _startSensorReading:	
  2771                           ;psect for function _startSensorReading
  2772                           
  2773     0EEB                     l1961:	
  2774                           ;incstack = 0
  2775                           ; Regs used in _startSensorReading: [wreg+status,2+status,0]
  2776                           
  2777                           
  2778                           ;main.c: 382:   if (!sensors_reading_in_progress) {
  2779     0EEB  1283               	bcf	3,5	;RP0=0, select bank0
  2780     0EEC  1303               	bcf	3,6	;RP1=0, select bank0
  2781     0EED  083C               	movf	_sensors_reading_in_progress,w	;volatile
  2782     0EEE  1D03               	btfss	3,2
  2783     0EEF  2EF1               	goto	u2311
  2784     0EF0  2EF2               	goto	u2310
  2785     0EF1                     u2311:
  2786     0EF1  2EF9               	goto	l255
  2787     0EF2                     u2310:
  2788     0EF2                     l1963:
  2789                           
  2790                           ;main.c: 383:     reading_count = 0;
  2791     0EF2  01FB               	clrf	_reading_count	;volatile
  2792                           
  2793                           ;main.c: 384:     low_sensor_high_count = 0;
  2794     0EF3  01FA               	clrf	_low_sensor_high_count	;volatile
  2795                           
  2796                           ;main.c: 385:     high_sensor_high_count = 0;
  2797     0EF4  01BF               	clrf	_high_sensor_high_count	;volatile
  2798                           
  2799                           ;main.c: 386:     flow_sensor_high_count = 0;
  2800     0EF5  01BE               	clrf	_flow_sensor_high_count	;volatile
  2801                           
  2802                           ;main.c: 387:     sensors_reading_complete = 0;
  2803     0EF6  01BD               	clrf	_sensors_reading_complete	;volatile
  2804     0EF7                     l1965:
  2805                           
  2806                           ;main.c: 388:     sensors_reading_in_progress = 1;
  2807     0EF7  3001               	movlw	1
  2808     0EF8  00BC               	movwf	_sensors_reading_in_progress	;volatile
  2809     0EF9                     l255:
  2810     0EF9  0008               	return
  2811     0EFA                     __end_of_startSensorReading:
  2812                           
  2813                           	psect	text3
  2814     0ECE                     __ptext3:	
  2815 ;; *************** function _setupTimer0 *****************
  2816 ;; Defined at:
  2817 ;;		line 366 in file "main.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;		None
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;		None
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  1    wreg      void 
  2824 ;; Registers used:
  2825 ;;		wreg, status,2, status,0
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2831 ;;      Params:         0       0       0       0
  2832 ;;      Locals:         0       0       0       0
  2833 ;;      Temps:          0       0       0       0
  2834 ;;      Totals:         0       0       0       0
  2835 ;;Total ram usage:        0 bytes
  2836 ;; Hardware stack levels used: 1
  2837 ;; Hardware stack levels required when called: 1
  2838 ;; This function calls:
  2839 ;;		Nothing
  2840 ;; This function is called by:
  2841 ;;		_main
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845     0ECE                     _setupTimer0:	
  2846                           ;psect for function _setupTimer0
  2847                           
  2848     0ECE                     l1953:	
  2849                           ;incstack = 0
  2850                           ; Regs used in _setupTimer0: [wreg+status,2+status,0]
  2851                           
  2852                           
  2853                           ;main.c: 367:   OPTION_REGbits.T0CS = 0;
  2854     0ECE  1683               	bsf	3,5	;RP0=1, select bank1
  2855     0ECF  1303               	bcf	3,6	;RP1=0, select bank1
  2856     0ED0  1281               	bcf	1,5	;volatile
  2857                           
  2858                           ;main.c: 368:   OPTION_REGbits.PSA = 0;
  2859     0ED1  1181               	bcf	1,3	;volatile
  2860     0ED2                     l1955:
  2861                           
  2862                           ;main.c: 369:   OPTION_REGbits.PS = 0b011;
  2863     0ED2  0801               	movf	1,w	;volatile
  2864     0ED3  39F8               	andlw	-8
  2865     0ED4  3803               	iorlw	3
  2866     0ED5  0081               	movwf	1	;volatile
  2867     0ED6                     l1957:
  2868                           
  2869                           ;main.c: 377:   TMR0 = 6;
  2870     0ED6  3006               	movlw	6
  2871     0ED7  1283               	bcf	3,5	;RP0=0, select bank0
  2872     0ED8  1303               	bcf	3,6	;RP1=0, select bank0
  2873     0ED9  0081               	movwf	1	;volatile
  2874     0EDA                     l1959:
  2875                           
  2876                           ;main.c: 378:   INTCONbits.TMR0IE = 1;
  2877     0EDA  168B               	bsf	11,5	;volatile
  2878     0EDB                     l251:
  2879     0EDB  0008               	return
  2880     0EDC                     __end_of_setupTimer0:
  2881                           
  2882                           	psect	text4
  2883     0781                     __ptext4:	
  2884 ;; *************** function _saveSettings *****************
  2885 ;; Defined at:
  2886 ;;		line 510 in file "main.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  value8bit       1    wreg     unsigned char 
  2889 ;;  value16bit1     2    0[BANK0 ] unsigned int 
  2890 ;;  value16bit2     2    2[BANK0 ] unsigned int 
  2891 ;;  value16bit3     2    4[BANK0 ] unsigned int 
  2892 ;;  value16bit4     2    6[BANK0 ] unsigned int 
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;  value8bit       1    7[COMMON] unsigned char 
  2895 ;; Return value:  Size  Location     Type
  2896 ;;                  1    wreg      void 
  2897 ;; Registers used:
  2898 ;;		wreg, status,2, status,0, pclath, cstack
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2904 ;;      Params:         0       8       0       0
  2905 ;;      Locals:         1       0       0       0
  2906 ;;      Temps:          0       0       0       0
  2907 ;;      Totals:         1       8       0       0
  2908 ;;Total ram usage:        9 bytes
  2909 ;; Hardware stack levels used: 1
  2910 ;; Hardware stack levels required when called: 3
  2911 ;; This function calls:
  2912 ;;		_EEPROM_Write
  2913 ;;		_EEPROM_Write16
  2914 ;; This function is called by:
  2915 ;;		_main
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919     0781                     _saveSettings:	
  2920                           ;psect for function _saveSettings
  2921                           
  2922                           
  2923                           ;incstack = 0
  2924                           ; Regs used in _saveSettings: [wreg+status,2+status,0+pclath+cstack]
  2925                           ;saveSettings@value8bit stored from wreg
  2926     0781  00F7               	movwf	saveSettings@value8bit
  2927     0782                     l1887:
  2928                           
  2929                           ;main.c: 510: void saveSettings(unsigned char value8bit, unsigned int value16bit1,;main.
      +                          c: 511:                   unsigned int value16bit2, unsigned int value16bit3,;main.c: 51
      +                          2:                   unsigned int value16bit4) {;main.c: 514:   EEPROM_Write(0x01, value
      +                          8bit);
  2930     0782  0877               	movf	saveSettings@value8bit,w
  2931     0783  00F2               	movwf	EEPROM_Write@data
  2932     0784  3001               	movlw	1
  2933     0785  158A  274A  118A   	fcall	_EEPROM_Write
  2934                           
  2935                           ;main.c: 515:   EEPROM_Write16(0x02, value16bit1);
  2936     0788  1283               	bcf	3,5	;RP0=0, select bank0
  2937     0789  1303               	bcf	3,6	;RP1=0, select bank0
  2938     078A  0848               	movf	saveSettings@value16bit1+1,w
  2939     078B  00F5               	movwf	EEPROM_Write16@data+1
  2940     078C  0847               	movf	saveSettings@value16bit1,w
  2941     078D  00F4               	movwf	EEPROM_Write16@data
  2942     078E  3002               	movlw	2
  2943     078F  158A  26DC  118A   	fcall	_EEPROM_Write16
  2944                           
  2945                           ;main.c: 516:   EEPROM_Write16(0x04, value16bit2);
  2946     0792  1283               	bcf	3,5	;RP0=0, select bank0
  2947     0793  1303               	bcf	3,6	;RP1=0, select bank0
  2948     0794  084A               	movf	saveSettings@value16bit2+1,w
  2949     0795  00F5               	movwf	EEPROM_Write16@data+1
  2950     0796  0849               	movf	saveSettings@value16bit2,w
  2951     0797  00F4               	movwf	EEPROM_Write16@data
  2952     0798  3004               	movlw	4
  2953     0799  158A  26DC  118A   	fcall	_EEPROM_Write16
  2954                           
  2955                           ;main.c: 517:   EEPROM_Write16(0x06, value16bit3);
  2956     079C  1283               	bcf	3,5	;RP0=0, select bank0
  2957     079D  1303               	bcf	3,6	;RP1=0, select bank0
  2958     079E  084C               	movf	saveSettings@value16bit3+1,w
  2959     079F  00F5               	movwf	EEPROM_Write16@data+1
  2960     07A0  084B               	movf	saveSettings@value16bit3,w
  2961     07A1  00F4               	movwf	EEPROM_Write16@data
  2962     07A2  3006               	movlw	6
  2963     07A3  158A  26DC  118A   	fcall	_EEPROM_Write16
  2964                           
  2965                           ;main.c: 518:   EEPROM_Write16(0x08, value16bit4);
  2966     07A6  1283               	bcf	3,5	;RP0=0, select bank0
  2967     07A7  1303               	bcf	3,6	;RP1=0, select bank0
  2968     07A8  084E               	movf	saveSettings@value16bit4+1,w
  2969     07A9  00F5               	movwf	EEPROM_Write16@data+1
  2970     07AA  084D               	movf	saveSettings@value16bit4,w
  2971     07AB  00F4               	movwf	EEPROM_Write16@data
  2972     07AC  3008               	movlw	8
  2973     07AD  158A  26DC  118A   	fcall	_EEPROM_Write16
  2974                           
  2975                           ;main.c: 519:   EEPROM_Write(0x00, 0xAA);
  2976     07B0  30AA               	movlw	170
  2977     07B1  00F2               	movwf	EEPROM_Write@data
  2978     07B2  3000               	movlw	0
  2979     07B3  158A  274A  118A   	fcall	_EEPROM_Write
  2980     07B6                     l302:
  2981     07B6  0008               	return
  2982     07B7                     __end_of_saveSettings:
  2983                           
  2984                           	psect	text5
  2985     0EDC                     __ptext5:	
  2986 ;; *************** function _EEPROM_Write16 *****************
  2987 ;; Defined at:
  2988 ;;		line 484 in file "main.c"
  2989 ;; Parameters:    Size  Location     Type
  2990 ;;  address         1    wreg     unsigned char 
  2991 ;;  data            2    4[COMMON] unsigned int 
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;  address         1    6[COMMON] unsigned char 
  2994 ;; Return value:  Size  Location     Type
  2995 ;;                  1    wreg      void 
  2996 ;; Registers used:
  2997 ;;		wreg, status,2, status,0, pclath, cstack
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3003 ;;      Params:         2       0       0       0
  3004 ;;      Locals:         1       0       0       0
  3005 ;;      Temps:          0       0       0       0
  3006 ;;      Totals:         3       0       0       0
  3007 ;;Total ram usage:        3 bytes
  3008 ;; Hardware stack levels used: 1
  3009 ;; Hardware stack levels required when called: 2
  3010 ;; This function calls:
  3011 ;;		_EEPROM_Write
  3012 ;; This function is called by:
  3013 ;;		_saveSettings
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017     0EDC                     _EEPROM_Write16:	
  3018                           ;psect for function _EEPROM_Write16
  3019                           
  3020                           
  3021                           ;incstack = 0
  3022                           ; Regs used in _EEPROM_Write16: [wreg+status,2+status,0+pclath+cstack]
  3023                           ;EEPROM_Write16@address stored from wreg
  3024     0EDC  00F6               	movwf	EEPROM_Write16@address
  3025     0EDD                     l1833:
  3026                           
  3027                           ;main.c: 485:   EEPROM_Write(address, data & 0xFF);
  3028     0EDD  0874               	movf	EEPROM_Write16@data,w
  3029     0EDE  00F2               	movwf	EEPROM_Write@data
  3030     0EDF  0876               	movf	EEPROM_Write16@address,w
  3031     0EE0  158A  274A  158A   	fcall	_EEPROM_Write
  3032                           
  3033                           ;main.c: 486:   EEPROM_Write(address + 1, data >> 8);
  3034     0EE3  0875               	movf	EEPROM_Write16@data+1,w
  3035     0EE4  00F2               	movwf	EEPROM_Write@data
  3036     0EE5  0876               	movf	EEPROM_Write16@address,w
  3037     0EE6  3E01               	addlw	1
  3038     0EE7  158A  274A  158A   	fcall	_EEPROM_Write
  3039     0EEA                     l292:
  3040     0EEA  0008               	return
  3041     0EEB                     __end_of_EEPROM_Write16:
  3042                           
  3043                           	psect	text6
  3044     0F4A                     __ptext6:	
  3045 ;; *************** function _EEPROM_Write *****************
  3046 ;; Defined at:
  3047 ;;		line 453 in file "main.c"
  3048 ;; Parameters:    Size  Location     Type
  3049 ;;  address         1    wreg     unsigned char 
  3050 ;;  data            1    2[COMMON] unsigned char 
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;  address         1    3[COMMON] unsigned char 
  3053 ;; Return value:  Size  Location     Type
  3054 ;;                  1    wreg      void 
  3055 ;; Registers used:
  3056 ;;		wreg
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3062 ;;      Params:         1       0       0       0
  3063 ;;      Locals:         1       0       0       0
  3064 ;;      Temps:          0       0       0       0
  3065 ;;      Totals:         2       0       0       0
  3066 ;;Total ram usage:        2 bytes
  3067 ;; Hardware stack levels used: 1
  3068 ;; Hardware stack levels required when called: 1
  3069 ;; This function calls:
  3070 ;;		Nothing
  3071 ;; This function is called by:
  3072 ;;		_EEPROM_Write16
  3073 ;;		_saveSettings
  3074 ;; This function uses a non-reentrant model
  3075 ;;
  3076                           
  3077     0F4A                     _EEPROM_Write:	
  3078                           ;psect for function _EEPROM_Write
  3079                           
  3080                           
  3081                           ;incstack = 0
  3082                           ; Regs used in _EEPROM_Write: [wreg]
  3083                           ;EEPROM_Write@address stored from wreg
  3084     0F4A  00F3               	movwf	EEPROM_Write@address
  3085     0F4B                     l1807:
  3086     0F4B                     l277:	
  3087                           ;main.c: 455:     ;
  3088                           
  3089                           
  3090                           ;main.c: 454:   while (EECON1bits.WR)
  3091     0F4B  1683               	bsf	3,5	;RP0=1, select bank3
  3092     0F4C  1703               	bsf	3,6	;RP1=1, select bank3
  3093     0F4D  188C               	btfsc	12,1	;volsfr
  3094     0F4E  2F50               	goto	u2151
  3095     0F4F  2F51               	goto	u2150
  3096     0F50                     u2151:
  3097     0F50  2F4B               	goto	l277
  3098     0F51                     u2150:
  3099     0F51                     l1809:
  3100                           
  3101                           ;main.c: 457:   EEADR = address;
  3102     0F51  0873               	movf	EEPROM_Write@address,w
  3103     0F52  1283               	bcf	3,5	;RP0=0, select bank2
  3104     0F53  1703               	bsf	3,6	;RP1=1, select bank2
  3105     0F54  008D               	movwf	13	;volatile
  3106                           
  3107                           ;main.c: 458:   EEDATA = data;
  3108     0F55  0872               	movf	EEPROM_Write@data,w
  3109     0F56  008C               	movwf	12	;volatile
  3110     0F57                     l1811:
  3111                           
  3112                           ;main.c: 460:   EECON1bits.EEPGD = 0;
  3113     0F57  1683               	bsf	3,5	;RP0=1, select bank3
  3114     0F58  1703               	bsf	3,6	;RP1=1, select bank3
  3115     0F59  138C               	bcf	12,7	;volsfr
  3116     0F5A                     l1813:
  3117                           
  3118                           ;main.c: 461:   EECON1bits.WREN = 1;
  3119     0F5A  150C               	bsf	12,2	;volsfr
  3120     0F5B                     l1815:
  3121                           
  3122                           ;main.c: 463:   INTCONbits.GIE = 0;
  3123     0F5B  138B               	bcf	11,7	;volatile
  3124     0F5C                     l1817:
  3125                           
  3126                           ;main.c: 464:   EECON2 = 0x55;
  3127     0F5C  3055               	movlw	85
  3128     0F5D  008D               	movwf	13	;volsfr
  3129     0F5E                     l1819:
  3130                           
  3131                           ;main.c: 465:   EECON2 = 0xAA;
  3132     0F5E  30AA               	movlw	170
  3133     0F5F  008D               	movwf	13	;volsfr
  3134     0F60                     l1821:
  3135                           
  3136                           ;main.c: 466:   EECON1bits.WR = 1;
  3137     0F60  148C               	bsf	12,1	;volsfr
  3138     0F61                     l280:	
  3139                           ;main.c: 469:     ;
  3140                           
  3141                           
  3142                           ;main.c: 468:   while (EECON1bits.WR)
  3143     0F61  188C               	btfsc	12,1	;volsfr
  3144     0F62  2F64               	goto	u2161
  3145     0F63  2F65               	goto	u2160
  3146     0F64                     u2161:
  3147     0F64  2F61               	goto	l280
  3148     0F65                     u2160:
  3149     0F65                     l282:
  3150                           
  3151                           ;main.c: 471:   EECON1bits.WREN = 0;
  3152     0F65  110C               	bcf	12,2	;volsfr
  3153                           
  3154                           ;main.c: 472:   INTCONbits.GIE = 1;
  3155     0F66  178B               	bsf	11,7	;volatile
  3156     0F67                     l283:
  3157     0F67  0008               	return
  3158     0F68                     __end_of_EEPROM_Write:
  3159                           
  3160                           	psect	text7
  3161     0F68                     __ptext7:	
  3162 ;; *************** function _readADC *****************
  3163 ;; Defined at:
  3164 ;;		line 352 in file "main.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;  channel         1    wreg     unsigned char 
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;  channel         1    5[COMMON] unsigned char 
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  2    2[COMMON] unsigned int 
  3171 ;; Registers used:
  3172 ;;		wreg, status,2, status,0
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3178 ;;      Params:         2       0       0       0
  3179 ;;      Locals:         1       0       0       0
  3180 ;;      Temps:          1       0       0       0
  3181 ;;      Totals:         4       0       0       0
  3182 ;;Total ram usage:        4 bytes
  3183 ;; Hardware stack levels used: 1
  3184 ;; Hardware stack levels required when called: 1
  3185 ;; This function calls:
  3186 ;;		Nothing
  3187 ;; This function is called by:
  3188 ;;		_main
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192     0F68                     _readADC:	
  3193                           ;psect for function _readADC
  3194                           
  3195                           
  3196                           ;incstack = 0
  3197                           ; Regs used in _readADC: [wreg+status,2+status,0]
  3198                           ;readADC@channel stored from wreg
  3199     0F68  00F5               	movwf	readADC@channel
  3200     0F69                     l1889:
  3201                           
  3202                           ;main.c: 354:   ADCON0 = (ADCON0 & 0b11000011) | ((uint8_t)(channel << 2));
  3203     0F69  0875               	movf	readADC@channel,w
  3204     0F6A  00F4               	movwf	??_readADC
  3205     0F6B  3002               	movlw	2
  3206     0F6C                     u2195:
  3207     0F6C  1003               	clrc
  3208     0F6D  0DF4               	rlf	??_readADC,f
  3209     0F6E  3EFF               	addlw	-1
  3210     0F6F  1D03               	skipz
  3211     0F70  2F6C               	goto	u2195
  3212     0F71  1283               	bcf	3,5	;RP0=0, select bank0
  3213     0F72  1303               	bcf	3,6	;RP1=0, select bank0
  3214     0F73  081F               	movf	31,w	;volatile
  3215     0F74  39C3               	andlw	195
  3216     0F75  0474               	iorwf	??_readADC,w
  3217     0F76  009F               	movwf	31	;volatile
  3218     0F77                     l1891:
  3219                           
  3220                           ;main.c: 355:   _delay((unsigned long)((10)*(8000000/4000000.0)));
  3221     0F77  3006               	movlw	6
  3222     0F78  00F4               	movwf	??_readADC
  3223     0F79                     u3157:
  3224     0F79  0BF4               	decfsz	??_readADC,f
  3225     0F7A  2F79               	goto	u3157
  3226     0F7B  0000               	nop
  3227     0F7C                     l1893:
  3228                           
  3229                           ;main.c: 356:   ADCON0bits.GO = 1;
  3230     0F7C  1283               	bcf	3,5	;RP0=0, select bank0
  3231     0F7D  1303               	bcf	3,6	;RP1=0, select bank0
  3232     0F7E  149F               	bsf	31,1	;volatile
  3233     0F7F                     l245:	
  3234                           ;main.c: 360:     ;
  3235                           
  3236                           
  3237                           ;main.c: 359:   while (ADCON0bits.GO)
  3238     0F7F  189F               	btfsc	31,1	;volatile
  3239     0F80  2F82               	goto	u2201
  3240     0F81  2F83               	goto	u2200
  3241     0F82                     u2201:
  3242     0F82  2F7F               	goto	l245
  3243     0F83                     u2200:
  3244     0F83                     l1895:
  3245                           
  3246                           ;main.c: 363:   return ((unsigned int)ADRESH << 8) | ADRESL;
  3247     0F83  081E               	movf	30,w	;volatile
  3248     0F84  00F3               	movwf	?_readADC+1
  3249     0F85  1683               	bsf	3,5	;RP0=1, select bank1
  3250     0F86  1303               	bcf	3,6	;RP1=0, select bank1
  3251     0F87  081E               	movf	30,w	;volatile
  3252     0F88  00F2               	movwf	?_readADC
  3253     0F89                     l248:
  3254     0F89  0008               	return
  3255     0F8A                     __end_of_readADC:
  3256                           
  3257                           	psect	text8
  3258     0656                     __ptext8:	
  3259 ;; *************** function _loadSettings *****************
  3260 ;; Defined at:
  3261 ;;		line 496 in file "main.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;  value8bit       1    0[BANK0 ] PTR unsigned char 
  3264 ;;		 -> maxruntimeindex(1), 
  3265 ;;  value16bit1     1    1[BANK0 ] PTR unsigned int 
  3266 ;;		 -> minvoltagelimit(2), 
  3267 ;;  value16bit2     1    2[BANK0 ] PTR unsigned int 
  3268 ;;		 -> maxvoltagelimit(2), 
  3269 ;;  value16bit3     1    3[BANK0 ] PTR unsigned int 
  3270 ;;		 -> minimumrunningvoltage(2), 
  3271 ;;  value16bit4     1    4[BANK0 ] PTR unsigned int 
  3272 ;;		 -> maximumrinningvoltage(2), 
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;		None
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  1    wreg      _Bool 
  3277 ;; Registers used:
  3278 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3284 ;;      Params:         0       5       0       0
  3285 ;;      Locals:         0       0       0       0
  3286 ;;      Temps:          0       0       0       0
  3287 ;;      Totals:         0       5       0       0
  3288 ;;Total ram usage:        5 bytes
  3289 ;; Hardware stack levels used: 1
  3290 ;; Hardware stack levels required when called: 3
  3291 ;; This function calls:
  3292 ;;		_EEPROM_Read
  3293 ;;		_EEPROM_Read16
  3294 ;; This function is called by:
  3295 ;;		_main
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299     0656                     _loadSettings:	
  3300                           ;psect for function _loadSettings
  3301                           
  3302     0656                     l1867:	
  3303                           ;incstack = 0
  3304                           ; Regs used in _loadSettings: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3305                           
  3306                           
  3307                           ;main.c: 496: _Bool loadSettings(unsigned char *value8bit, unsigned int *value16bit1,;ma
      +                          in.c: 497:                   unsigned int *value16bit2, unsigned int *value16bit3,;main.
      +                          c: 498:                   unsigned int *value16bit4) {;main.c: 499:   if (EEPROM_Read(0x
      +                          00) != 0xAA) {
  3308     0656  3000               	movlw	0
  3309     0657  118A  27E5  118A   	fcall	_EEPROM_Read
  3310     065A  3AAA               	xorlw	170
  3311     065B  1903               	skipnz
  3312     065C  2E5E               	goto	u2181
  3313     065D  2E5F               	goto	u2180
  3314     065E                     u2181:
  3315     065E  2E61               	goto	l1873
  3316     065F                     u2180:
  3317     065F                     l1869:
  3318                           
  3319                           ;main.c: 500:     return 0;
  3320     065F  3000               	movlw	0
  3321     0660  2EA4               	goto	l299
  3322     0661                     l1873:
  3323                           
  3324                           ;main.c: 502:   *value8bit = EEPROM_Read(0x01);
  3325     0661  1283               	bcf	3,5	;RP0=0, select bank0
  3326     0662  1303               	bcf	3,6	;RP1=0, select bank0
  3327     0663  0847               	movf	loadSettings@value8bit,w
  3328     0664  0084               	movwf	4
  3329     0665  3001               	movlw	1
  3330     0666  118A  27E5  118A   	fcall	_EEPROM_Read
  3331     0669  1383               	bcf	3,7	;select IRP bank0
  3332     066A  0080               	movwf	0
  3333     066B                     l1875:
  3334                           
  3335                           ;main.c: 503:   *value16bit1 = EEPROM_Read16(0x02);
  3336     066B  3002               	movlw	2
  3337     066C  158A  272C  118A   	fcall	_EEPROM_Read16
  3338     066F  1283               	bcf	3,5	;RP0=0, select bank0
  3339     0670  1303               	bcf	3,6	;RP1=0, select bank0
  3340     0671  0848               	movf	loadSettings@value16bit1,w
  3341     0672  0084               	movwf	4
  3342     0673  0873               	movf	?_EEPROM_Read16,w
  3343     0674  1383               	bcf	3,7	;select IRP bank0
  3344     0675  0080               	movwf	0
  3345     0676  0A84               	incf	4,f
  3346     0677  0874               	movf	?_EEPROM_Read16+1,w
  3347     0678  0080               	movwf	0
  3348     0679                     l1877:
  3349                           
  3350                           ;main.c: 504:   *value16bit2 = EEPROM_Read16(0x04);
  3351     0679  3004               	movlw	4
  3352     067A  158A  272C  118A   	fcall	_EEPROM_Read16
  3353     067D  1283               	bcf	3,5	;RP0=0, select bank0
  3354     067E  1303               	bcf	3,6	;RP1=0, select bank0
  3355     067F  0849               	movf	loadSettings@value16bit2,w
  3356     0680  0084               	movwf	4
  3357     0681  0873               	movf	?_EEPROM_Read16,w
  3358     0682  1383               	bcf	3,7	;select IRP bank0
  3359     0683  0080               	movwf	0
  3360     0684  0A84               	incf	4,f
  3361     0685  0874               	movf	?_EEPROM_Read16+1,w
  3362     0686  0080               	movwf	0
  3363     0687                     l1879:
  3364                           
  3365                           ;main.c: 505:   *value16bit3 = EEPROM_Read16(0x06);
  3366     0687  3006               	movlw	6
  3367     0688  158A  272C  118A   	fcall	_EEPROM_Read16
  3368     068B  1283               	bcf	3,5	;RP0=0, select bank0
  3369     068C  1303               	bcf	3,6	;RP1=0, select bank0
  3370     068D  084A               	movf	loadSettings@value16bit3,w
  3371     068E  0084               	movwf	4
  3372     068F  0873               	movf	?_EEPROM_Read16,w
  3373     0690  1383               	bcf	3,7	;select IRP bank0
  3374     0691  0080               	movwf	0
  3375     0692  0A84               	incf	4,f
  3376     0693  0874               	movf	?_EEPROM_Read16+1,w
  3377     0694  0080               	movwf	0
  3378     0695                     l1881:
  3379                           
  3380                           ;main.c: 506:   *value16bit4 = EEPROM_Read16(0x08);
  3381     0695  3008               	movlw	8
  3382     0696  158A  272C  118A   	fcall	_EEPROM_Read16
  3383     0699  1283               	bcf	3,5	;RP0=0, select bank0
  3384     069A  1303               	bcf	3,6	;RP1=0, select bank0
  3385     069B  084B               	movf	loadSettings@value16bit4,w
  3386     069C  0084               	movwf	4
  3387     069D  0873               	movf	?_EEPROM_Read16,w
  3388     069E  1383               	bcf	3,7	;select IRP bank0
  3389     069F  0080               	movwf	0
  3390     06A0  0A84               	incf	4,f
  3391     06A1  0874               	movf	?_EEPROM_Read16+1,w
  3392     06A2  0080               	movwf	0
  3393     06A3                     l1883:
  3394                           
  3395                           ;main.c: 507:   return 1;
  3396     06A3  3001               	movlw	1
  3397     06A4                     l299:
  3398     06A4  0008               	return
  3399     06A5                     __end_of_loadSettings:
  3400                           
  3401                           	psect	text9
  3402     0F2C                     __ptext9:	
  3403 ;; *************** function _EEPROM_Read16 *****************
  3404 ;; Defined at:
  3405 ;;		line 489 in file "main.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;  address         1    wreg     unsigned char 
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;  address         1    9[COMMON] unsigned char 
  3410 ;;  result          2    7[COMMON] unsigned int 
  3411 ;; Return value:  Size  Location     Type
  3412 ;;                  2    3[COMMON] unsigned int 
  3413 ;; Registers used:
  3414 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3415 ;; Tracked objects:
  3416 ;;		On entry : 0/0
  3417 ;;		On exit  : 0/0
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3420 ;;      Params:         2       0       0       0
  3421 ;;      Locals:         3       0       0       0
  3422 ;;      Temps:          2       0       0       0
  3423 ;;      Totals:         7       0       0       0
  3424 ;;Total ram usage:        7 bytes
  3425 ;; Hardware stack levels used: 1
  3426 ;; Hardware stack levels required when called: 2
  3427 ;; This function calls:
  3428 ;;		_EEPROM_Read
  3429 ;; This function is called by:
  3430 ;;		_loadSettings
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434     0F2C                     _EEPROM_Read16:	
  3435                           ;psect for function _EEPROM_Read16
  3436                           
  3437                           
  3438                           ;incstack = 0
  3439                           ; Regs used in _EEPROM_Read16: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3440                           ;EEPROM_Read16@address stored from wreg
  3441     0F2C  00F9               	movwf	EEPROM_Read16@address
  3442     0F2D                     l1835:
  3443                           
  3444                           ;main.c: 490:   unsigned int result;;main.c: 491:   result = EEPROM_Read(address);
  3445     0F2D  0879               	movf	EEPROM_Read16@address,w
  3446     0F2E  118A  27E5  158A   	fcall	_EEPROM_Read
  3447     0F31  00F5               	movwf	??_EEPROM_Read16
  3448     0F32  01F6               	clrf	??_EEPROM_Read16+1
  3449     0F33  0875               	movf	??_EEPROM_Read16,w
  3450     0F34  00F7               	movwf	EEPROM_Read16@result
  3451     0F35  0876               	movf	??_EEPROM_Read16+1,w
  3452     0F36  00F8               	movwf	EEPROM_Read16@result+1
  3453     0F37                     l1837:
  3454                           
  3455                           ;main.c: 492:   result |= ((unsigned int)EEPROM_Read(address + 1)) << 8;
  3456     0F37  0879               	movf	EEPROM_Read16@address,w
  3457     0F38  3E01               	addlw	1
  3458     0F39  118A  27E5  158A   	fcall	_EEPROM_Read
  3459     0F3C  00F5               	movwf	??_EEPROM_Read16
  3460     0F3D  01F6               	clrf	??_EEPROM_Read16+1
  3461     0F3E  0875               	movf	??_EEPROM_Read16,w
  3462     0F3F  00F6               	movwf	??_EEPROM_Read16+1
  3463     0F40  01F5               	clrf	??_EEPROM_Read16
  3464     0F41  0875               	movf	??_EEPROM_Read16,w
  3465     0F42  04F7               	iorwf	EEPROM_Read16@result,f
  3466     0F43  0876               	movf	??_EEPROM_Read16+1,w
  3467     0F44  04F8               	iorwf	EEPROM_Read16@result+1,f
  3468     0F45                     l1839:
  3469                           
  3470                           ;main.c: 493:   return result;
  3471     0F45  0878               	movf	EEPROM_Read16@result+1,w
  3472     0F46  00F4               	movwf	?_EEPROM_Read16+1
  3473     0F47  0877               	movf	EEPROM_Read16@result,w
  3474     0F48  00F3               	movwf	?_EEPROM_Read16
  3475     0F49                     l295:
  3476     0F49  0008               	return
  3477     0F4A                     __end_of_EEPROM_Read16:
  3478                           
  3479                           	psect	text10
  3480     07E5                     __ptext10:	
  3481 ;; *************** function _EEPROM_Read *****************
  3482 ;; Defined at:
  3483 ;;		line 475 in file "main.c"
  3484 ;; Parameters:    Size  Location     Type
  3485 ;;  address         1    wreg     unsigned char 
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;  address         1    2[COMMON] unsigned char 
  3488 ;; Return value:  Size  Location     Type
  3489 ;;                  1    wreg      unsigned char 
  3490 ;; Registers used:
  3491 ;;		wreg
  3492 ;; Tracked objects:
  3493 ;;		On entry : 0/0
  3494 ;;		On exit  : 0/0
  3495 ;;		Unchanged: 0/0
  3496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3497 ;;      Params:         0       0       0       0
  3498 ;;      Locals:         1       0       0       0
  3499 ;;      Temps:          0       0       0       0
  3500 ;;      Totals:         1       0       0       0
  3501 ;;Total ram usage:        1 bytes
  3502 ;; Hardware stack levels used: 1
  3503 ;; Hardware stack levels required when called: 1
  3504 ;; This function calls:
  3505 ;;		Nothing
  3506 ;; This function is called by:
  3507 ;;		_EEPROM_Read16
  3508 ;;		_loadSettings
  3509 ;; This function uses a non-reentrant model
  3510 ;;
  3511                           
  3512     07E5                     _EEPROM_Read:	
  3513                           ;psect for function _EEPROM_Read
  3514                           
  3515                           
  3516                           ;incstack = 0
  3517                           ; Regs used in _EEPROM_Read: [wreg]
  3518                           ;EEPROM_Read@address stored from wreg
  3519     07E5  00F2               	movwf	EEPROM_Read@address
  3520     07E6                     l1823:
  3521     07E6                     l286:	
  3522                           ;main.c: 477:     ;
  3523                           
  3524                           
  3525                           ;main.c: 476:   while (EECON1bits.WR)
  3526     07E6  1683               	bsf	3,5	;RP0=1, select bank3
  3527     07E7  1703               	bsf	3,6	;RP1=1, select bank3
  3528     07E8  188C               	btfsc	12,1	;volsfr
  3529     07E9  2FEB               	goto	u2171
  3530     07EA  2FEC               	goto	u2170
  3531     07EB                     u2171:
  3532     07EB  2FE6               	goto	l286
  3533     07EC                     u2170:
  3534     07EC                     l1825:
  3535                           
  3536                           ;main.c: 478:   EEADR = address;
  3537     07EC  0872               	movf	EEPROM_Read@address,w
  3538     07ED  1283               	bcf	3,5	;RP0=0, select bank2
  3539     07EE  1703               	bsf	3,6	;RP1=1, select bank2
  3540     07EF  008D               	movwf	13	;volatile
  3541     07F0                     l1827:
  3542                           
  3543                           ;main.c: 479:   EECON1bits.EEPGD = 0;
  3544     07F0  1683               	bsf	3,5	;RP0=1, select bank3
  3545     07F1  1703               	bsf	3,6	;RP1=1, select bank3
  3546     07F2  138C               	bcf	12,7	;volsfr
  3547     07F3                     l1829:
  3548                           
  3549                           ;main.c: 480:   EECON1bits.RD = 1;
  3550     07F3  140C               	bsf	12,0	;volsfr
  3551                           
  3552                           ;main.c: 481:   return EEDATA;
  3553     07F4  1283               	bcf	3,5	;RP0=0, select bank2
  3554     07F5  1703               	bsf	3,6	;RP1=1, select bank2
  3555     07F6  080C               	movf	12,w	;volatile
  3556     07F7                     l289:
  3557     07F7  0008               	return
  3558     07F8                     __end_of_EEPROM_Read:
  3559                           
  3560                           	psect	text11
  3561     0F0A                     __ptext11:	
  3562 ;; *************** function _init_timer *****************
  3563 ;; Defined at:
  3564 ;;		line 440 in file "main.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;		None
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;		None
  3569 ;; Return value:  Size  Location     Type
  3570 ;;                  1    wreg      void 
  3571 ;; Registers used:
  3572 ;;		None
  3573 ;; Tracked objects:
  3574 ;;		On entry : 0/0
  3575 ;;		On exit  : 0/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3578 ;;      Params:         0       0       0       0
  3579 ;;      Locals:         0       0       0       0
  3580 ;;      Temps:          0       0       0       0
  3581 ;;      Totals:         0       0       0       0
  3582 ;;Total ram usage:        0 bytes
  3583 ;; Hardware stack levels used: 1
  3584 ;; Hardware stack levels required when called: 1
  3585 ;; This function calls:
  3586 ;;		Nothing
  3587 ;; This function is called by:
  3588 ;;		_main
  3589 ;; This function uses a non-reentrant model
  3590 ;;
  3591                           
  3592     0F0A                     _init_timer:	
  3593                           ;psect for function _init_timer
  3594                           
  3595     0F0A                     l1915:	
  3596                           ;incstack = 0
  3597                           ; Regs used in _init_timer: []
  3598                           
  3599                           
  3600                           ;main.c: 441:   T1CON = 0b00110000;
  3601     0F0A  3030               	movlw	48
  3602     0F0B  1283               	bcf	3,5	;RP0=0, select bank0
  3603     0F0C  1303               	bcf	3,6	;RP1=0, select bank0
  3604     0F0D  0090               	movwf	16	;volatile
  3605                           
  3606                           ;main.c: 443:   TMR1H = 255;
  3607     0F0E  30FF               	movlw	255
  3608     0F0F  008F               	movwf	15	;volatile
  3609                           
  3610                           ;main.c: 444:   TMR1L = 14;
  3611     0F10  300E               	movlw	14
  3612     0F11  008E               	movwf	14	;volatile
  3613                           
  3614                           ;main.c: 446:   PIE1bits.TMR1IE = 1;
  3615     0F12  1683               	bsf	3,5	;RP0=1, select bank1
  3616     0F13  1303               	bcf	3,6	;RP1=0, select bank1
  3617     0F14  140C               	bsf	12,0	;volatile
  3618                           
  3619                           ;main.c: 447:   INTCONbits.PEIE = 1;
  3620     0F15  170B               	bsf	11,6	;volatile
  3621                           
  3622                           ;main.c: 448:   INTCONbits.GIE = 1;
  3623     0F16  178B               	bsf	11,7	;volatile
  3624                           
  3625                           ;main.c: 450:   T1CONbits.TMR1ON = 1;
  3626     0F17  1283               	bcf	3,5	;RP0=0, select bank0
  3627     0F18  1303               	bcf	3,6	;RP1=0, select bank0
  3628     0F19  1410               	bsf	16,0	;volatile
  3629     0F1A                     l274:
  3630     0F1A  0008               	return
  3631     0F1B                     __end_of_init_timer:
  3632                           
  3633                           	psect	text12
  3634     0FD8                     __ptext12:	
  3635 ;; *************** function _initSystem *****************
  3636 ;; Defined at:
  3637 ;;		line 334 in file "main.c"
  3638 ;; Parameters:    Size  Location     Type
  3639 ;;		None
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;		None
  3642 ;; Return value:  Size  Location     Type
  3643 ;;                  1    wreg      void 
  3644 ;; Registers used:
  3645 ;;		wreg, status,2, status,0
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3651 ;;      Params:         0       0       0       0
  3652 ;;      Locals:         0       0       0       0
  3653 ;;      Temps:          2       0       0       0
  3654 ;;      Totals:         2       0       0       0
  3655 ;;Total ram usage:        2 bytes
  3656 ;; Hardware stack levels used: 1
  3657 ;; Hardware stack levels required when called: 1
  3658 ;; This function calls:
  3659 ;;		Nothing
  3660 ;; This function is called by:
  3661 ;;		_main
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665     0FD8                     _initSystem:	
  3666                           ;psect for function _initSystem
  3667                           
  3668     0FD8                     l1843:	
  3669                           ;incstack = 0
  3670                           ; Regs used in _initSystem: [wreg+status,2+status,0]
  3671                           
  3672                           
  3673                           ;main.c: 336:   OSCCONbits.IRCF = 0b111;
  3674     0FD8  3070               	movlw	112
  3675     0FD9  1683               	bsf	3,5	;RP0=1, select bank1
  3676     0FDA  1303               	bcf	3,6	;RP1=0, select bank1
  3677     0FDB  048F               	iorwf	15,f	;volatile
  3678     0FDC                     l1845:
  3679                           
  3680                           ;main.c: 337:   ANSEL = 0b00011000;
  3681     0FDC  3018               	movlw	24
  3682     0FDD  1683               	bsf	3,5	;RP0=1, select bank3
  3683     0FDE  1703               	bsf	3,6	;RP1=1, select bank3
  3684     0FDF  0088               	movwf	8	;volatile
  3685     0FE0                     l1847:
  3686                           
  3687                           ;main.c: 338:   ANSELH = 0x00;
  3688     0FE0  0189               	clrf	9	;volatile
  3689     0FE1                     l1849:
  3690                           
  3691                           ;main.c: 339:   TRISA = 0b11101000;
  3692     0FE1  30E8               	movlw	232
  3693     0FE2  1683               	bsf	3,5	;RP0=1, select bank1
  3694     0FE3  1303               	bcf	3,6	;RP1=0, select bank1
  3695     0FE4  0085               	movwf	5	;volatile
  3696     0FE5                     l1851:
  3697                           
  3698                           ;main.c: 340:   TRISB = 0b00111000;
  3699     0FE5  3038               	movlw	56
  3700     0FE6  0086               	movwf	6	;volatile
  3701     0FE7                     l1853:
  3702                           
  3703                           ;main.c: 341:   TRISC = 0b00000011;
  3704     0FE7  3003               	movlw	3
  3705     0FE8  0087               	movwf	7	;volatile
  3706     0FE9                     l1855:
  3707                           
  3708                           ;main.c: 343:   ADCON0 = 0b00001101;
  3709     0FE9  300D               	movlw	13
  3710     0FEA  1283               	bcf	3,5	;RP0=0, select bank0
  3711     0FEB  1303               	bcf	3,6	;RP1=0, select bank0
  3712     0FEC  009F               	movwf	31	;volatile
  3713     0FED                     l1857:
  3714                           
  3715                           ;main.c: 344:   ADCON1 = 0b10000000;
  3716     0FED  3080               	movlw	128
  3717     0FEE  1683               	bsf	3,5	;RP0=1, select bank1
  3718     0FEF  1303               	bcf	3,6	;RP1=0, select bank1
  3719     0FF0  009F               	movwf	31	;volatile
  3720     0FF1                     l1859:
  3721                           
  3722                           ;main.c: 346:   _delay((unsigned long)((10)*(8000000/4000.0)));
  3723     0FF1  301A               	movlw	26
  3724     0FF2  00F3               	movwf	??_initSystem+1
  3725     0FF3  30F8               	movlw	248
  3726     0FF4  00F2               	movwf	??_initSystem
  3727     0FF5                     u3167:
  3728     0FF5  0BF2               	decfsz	??_initSystem,f
  3729     0FF6  2FF5               	goto	u3167
  3730     0FF7  0BF3               	decfsz	??_initSystem+1,f
  3731     0FF8  2FF5               	goto	u3167
  3732     0FF9  0000               	nop
  3733     0FFA                     l1861:
  3734                           
  3735                           ;main.c: 347:   PORTA = 0x00;
  3736     0FFA  1283               	bcf	3,5	;RP0=0, select bank0
  3737     0FFB  1303               	bcf	3,6	;RP1=0, select bank0
  3738     0FFC  0185               	clrf	5	;volatile
  3739     0FFD                     l1863:
  3740                           
  3741                           ;main.c: 348:   PORTB = 0x00;
  3742     0FFD  0186               	clrf	6	;volatile
  3743     0FFE                     l1865:
  3744                           
  3745                           ;main.c: 349:   PORTC = 0x00;
  3746     0FFE  0187               	clrf	7	;volatile
  3747     0FFF                     l242:
  3748     0FFF  0008               	return
  3749     1000                     __end_of_initSystem:
  3750                           
  3751                           	psect	text13
  3752     07B7                     __ptext13:	
  3753 ;; *************** function _getSensorResults *****************
  3754 ;; Defined at:
  3755 ;;		line 392 in file "main.c"
  3756 ;; Parameters:    Size  Location     Type
  3757 ;;  low_active      1    2[COMMON] PTR _Bool 
  3758 ;;		 -> low_sensor_active(1), 
  3759 ;;  high_active     1    3[COMMON] PTR _Bool 
  3760 ;;		 -> high_sensor_active(1), 
  3761 ;;  flow_active     1    4[COMMON] PTR _Bool 
  3762 ;;		 -> flow_sensor_active(1), 
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;		None
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  1    wreg      _Bool 
  3767 ;; Registers used:
  3768 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3774 ;;      Params:         3       0       0       0
  3775 ;;      Locals:         0       0       0       0
  3776 ;;      Temps:          0       0       0       0
  3777 ;;      Totals:         3       0       0       0
  3778 ;;Total ram usage:        3 bytes
  3779 ;; Hardware stack levels used: 1
  3780 ;; Hardware stack levels required when called: 1
  3781 ;; This function calls:
  3782 ;;		Nothing
  3783 ;; This function is called by:
  3784 ;;		_main
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788     07B7                     _getSensorResults:	
  3789                           ;psect for function _getSensorResults
  3790                           
  3791     07B7                     l1967:	
  3792                           ;incstack = 0
  3793                           ; Regs used in _getSensorResults: [wreg-fsr0h+status,2+status,0]
  3794                           
  3795                           
  3796                           ;main.c: 393:   if (sensors_reading_complete) {
  3797     07B7  1283               	bcf	3,5	;RP0=0, select bank0
  3798     07B8  1303               	bcf	3,6	;RP1=0, select bank0
  3799     07B9  083D               	movf	_sensors_reading_complete,w	;volatile
  3800     07BA  1903               	btfsc	3,2
  3801     07BB  2FBD               	goto	u2321
  3802     07BC  2FBE               	goto	u2320
  3803     07BD                     u2321:
  3804     07BD  2FE3               	goto	l1977
  3805     07BE                     u2320:
  3806     07BE                     l1969:
  3807                           
  3808                           ;main.c: 394:     *low_active = (low_sensor_high_count < 45);
  3809     07BE  0872               	movf	getSensorResults@low_active,w
  3810     07BF  0084               	movwf	4
  3811     07C0  302D               	movlw	45
  3812     07C1  027A               	subwf	_low_sensor_high_count,w	;volatile
  3813     07C2  1C03               	skipc
  3814     07C3  2FC5               	goto	u2331
  3815     07C4  2FC7               	goto	u2330
  3816     07C5                     u2331:
  3817     07C5  3001               	movlw	1
  3818     07C6  2FC8               	goto	u2340
  3819     07C7                     u2330:
  3820     07C7  3000               	movlw	0
  3821     07C8                     u2340:
  3822     07C8  1383               	bcf	3,7	;select IRP bank0
  3823     07C9  0080               	movwf	0
  3824                           
  3825                           ;main.c: 395:     *high_active = (high_sensor_high_count < 45);
  3826     07CA  0873               	movf	getSensorResults@high_active,w
  3827     07CB  0084               	movwf	4
  3828     07CC  302D               	movlw	45
  3829     07CD  023F               	subwf	_high_sensor_high_count,w	;volatile
  3830     07CE  1C03               	skipc
  3831     07CF  2FD1               	goto	u2351
  3832     07D0  2FD3               	goto	u2350
  3833     07D1                     u2351:
  3834     07D1  3001               	movlw	1
  3835     07D2  2FD4               	goto	u2360
  3836     07D3                     u2350:
  3837     07D3  3000               	movlw	0
  3838     07D4                     u2360:
  3839     07D4  0080               	movwf	0
  3840                           
  3841                           ;main.c: 396:     *flow_active = (flow_sensor_high_count < 45);
  3842     07D5  0874               	movf	getSensorResults@flow_active,w
  3843     07D6  0084               	movwf	4
  3844     07D7  302D               	movlw	45
  3845     07D8  023E               	subwf	_flow_sensor_high_count,w	;volatile
  3846     07D9  1C03               	skipc
  3847     07DA  2FDC               	goto	u2371
  3848     07DB  2FDE               	goto	u2370
  3849     07DC                     u2371:
  3850     07DC  3001               	movlw	1
  3851     07DD  2FDF               	goto	u2380
  3852     07DE                     u2370:
  3853     07DE  3000               	movlw	0
  3854     07DF                     u2380:
  3855     07DF  0080               	movwf	0
  3856     07E0                     l1971:
  3857                           
  3858                           ;main.c: 397:     sensors_reading_complete = 0;
  3859     07E0  01BD               	clrf	_sensors_reading_complete	;volatile
  3860     07E1                     l1973:
  3861                           
  3862                           ;main.c: 398:     return 1;
  3863     07E1  3001               	movlw	1
  3864     07E2  2FE4               	goto	l259
  3865     07E3                     l1977:
  3866                           
  3867                           ;main.c: 400:   return 0;
  3868     07E3  3000               	movlw	0
  3869     07E4                     l259:
  3870     07E4  0008               	return
  3871     07E5                     __end_of_getSensorResults:
  3872                           
  3873                           	psect	text14
  3874     0584                     __ptext14:	
  3875 ;; *************** function _check_button_press *****************
  3876 ;; Defined at:
  3877 ;;		line 540 in file "main.c"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;		None
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;  hold_count      2    6[COMMON] unsigned int 
  3882 ;;  long_press_t    2    4[COMMON] unsigned int 
  3883 ;;  long_press      1    8[COMMON] _Bool 
  3884 ;; Return value:  Size  Location     Type
  3885 ;;                  1    wreg      _Bool 
  3886 ;; Registers used:
  3887 ;;		wreg, status,2, status,0
  3888 ;; Tracked objects:
  3889 ;;		On entry : 0/0
  3890 ;;		On exit  : 0/0
  3891 ;;		Unchanged: 0/0
  3892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3893 ;;      Params:         0       0       0       0
  3894 ;;      Locals:         5       0       0       0
  3895 ;;      Temps:          2       0       0       0
  3896 ;;      Totals:         7       0       0       0
  3897 ;;Total ram usage:        7 bytes
  3898 ;; Hardware stack levels used: 1
  3899 ;; Hardware stack levels required when called: 1
  3900 ;; This function calls:
  3901 ;;		Nothing
  3902 ;; This function is called by:
  3903 ;;		_main
  3904 ;; This function uses a non-reentrant model
  3905 ;;
  3906                           
  3907     0584                     _check_button_press:	
  3908                           ;psect for function _check_button_press
  3909                           
  3910     0584                     l1917:	
  3911                           ;incstack = 0
  3912                           ; Regs used in _check_button_press: [wreg+status,2+status,0]
  3913                           
  3914                           
  3915                           ;main.c: 541:   _Bool long_press = 0;
  3916     0584  01F8               	clrf	check_button_press@long_press
  3917     0585                     l1919:
  3918                           
  3919                           ;main.c: 544:   if (PORTCbits.RC1 == 0) {
  3920     0585  1283               	bcf	3,5	;RP0=0, select bank0
  3921     0586  1303               	bcf	3,6	;RP1=0, select bank0
  3922     0587  1887               	btfsc	7,1	;volatile
  3923     0588  2D8A               	goto	u2251
  3924     0589  2D8B               	goto	u2250
  3925     058A                     u2251:
  3926     058A  2DEE               	goto	l1949
  3927     058B                     u2250:
  3928     058B                     l1921:
  3929                           
  3930                           ;main.c: 546:     _delay((unsigned long)((50)*(8000000/4000.0)));
  3931     058B  3082               	movlw	130
  3932     058C  00F3               	movwf	??_check_button_press+1
  3933     058D  30DD               	movlw	221
  3934     058E  00F2               	movwf	??_check_button_press
  3935     058F                     u3177:
  3936     058F  0BF2               	decfsz	??_check_button_press,f
  3937     0590  2D8F               	goto	u3177
  3938     0591  0BF3               	decfsz	??_check_button_press+1,f
  3939     0592  2D8F               	goto	u3177
  3940     0593  2D94               	nop2
  3941     0594                     l1923:
  3942                           
  3943                           ;main.c: 549:     if (PORTCbits.RC1 == 0) {
  3944     0594  1283               	bcf	3,5	;RP0=0, select bank0
  3945     0595  1303               	bcf	3,6	;RP1=0, select bank0
  3946     0596  1887               	btfsc	7,1	;volatile
  3947     0597  2D99               	goto	u2261
  3948     0598  2D9A               	goto	u2260
  3949     0599                     u2261:
  3950     0599  2DEE               	goto	l1949
  3951     059A                     u2260:
  3952     059A                     l1925:
  3953                           
  3954                           ;main.c: 551:       unsigned int hold_count = 0;
  3955     059A  01F6               	clrf	check_button_press@hold_count
  3956     059B  01F7               	clrf	check_button_press@hold_count+1
  3957     059C                     l1927:
  3958                           
  3959                           ;main.c: 552:       unsigned int long_press_threshold = 20;
  3960     059C  3014               	movlw	20
  3961     059D  00F4               	movwf	check_button_press@long_press_threshold
  3962     059E  3000               	movlw	0
  3963     059F  00F5               	movwf	check_button_press@long_press_threshold+1
  3964                           
  3965                           ;main.c: 555:       while (PORTCbits.RC1 == 0) {
  3966     05A0  2DD6               	goto	l315
  3967     05A1                     l1929:
  3968                           
  3969                           ;main.c: 556:         _delay((unsigned long)((10)*(8000000/4000.0)));
  3970     05A1  301A               	movlw	26
  3971     05A2  00F3               	movwf	??_check_button_press+1
  3972     05A3  30F8               	movlw	248
  3973     05A4  00F2               	movwf	??_check_button_press
  3974     05A5                     u3187:
  3975     05A5  0BF2               	decfsz	??_check_button_press,f
  3976     05A6  2DA5               	goto	u3187
  3977     05A7  0BF3               	decfsz	??_check_button_press+1,f
  3978     05A8  2DA5               	goto	u3187
  3979     05A9  0000               	nop
  3980                           
  3981                           ;main.c: 557:         hold_count++;
  3982     05AA  3001               	movlw	1
  3983     05AB  07F6               	addwf	check_button_press@hold_count,f
  3984     05AC  1803               	skipnc
  3985     05AD  0AF7               	incf	check_button_press@hold_count+1,f
  3986     05AE  3000               	movlw	0
  3987     05AF  07F7               	addwf	check_button_press@hold_count+1,f
  3988                           
  3989                           ;main.c: 560:         if (hold_count >= long_press_threshold) {
  3990     05B0  0875               	movf	check_button_press@long_press_threshold+1,w
  3991     05B1  0277               	subwf	check_button_press@hold_count+1,w
  3992     05B2  1D03               	skipz
  3993     05B3  2DB6               	goto	u2275
  3994     05B4  0874               	movf	check_button_press@long_press_threshold,w
  3995     05B5  0276               	subwf	check_button_press@hold_count,w
  3996     05B6                     u2275:
  3997     05B6  1C03               	skipc
  3998     05B7  2DB9               	goto	u2271
  3999     05B8  2DBA               	goto	u2270
  4000     05B9                     u2271:
  4001     05B9  2DD6               	goto	l315
  4002     05BA                     u2270:
  4003     05BA                     l1931:
  4004                           
  4005                           ;main.c: 561:           long_press = 1;
  4006     05BA  3001               	movlw	1
  4007     05BB  00F8               	movwf	check_button_press@long_press
  4008                           
  4009                           ;main.c: 566:           while (PORTCbits.RC1 == 0) {
  4010     05BC  2DC6               	goto	l1935
  4011     05BD                     l1933:
  4012                           
  4013                           ;main.c: 567:             _delay((unsigned long)((10)*(8000000/4000.0)));
  4014     05BD  301A               	movlw	26
  4015     05BE  00F3               	movwf	??_check_button_press+1
  4016     05BF  30F8               	movlw	248
  4017     05C0  00F2               	movwf	??_check_button_press
  4018     05C1                     u3197:
  4019     05C1  0BF2               	decfsz	??_check_button_press,f
  4020     05C2  2DC1               	goto	u3197
  4021     05C3  0BF3               	decfsz	??_check_button_press+1,f
  4022     05C4  2DC1               	goto	u3197
  4023     05C5  0000               	nop
  4024     05C6                     l1935:
  4025                           
  4026                           ;main.c: 566:           while (PORTCbits.RC1 == 0) {
  4027     05C6  1283               	bcf	3,5	;RP0=0, select bank0
  4028     05C7  1303               	bcf	3,6	;RP1=0, select bank0
  4029     05C8  1C87               	btfss	7,1	;volatile
  4030     05C9  2DCB               	goto	u2281
  4031     05CA  2DCC               	goto	u2280
  4032     05CB                     u2281:
  4033     05CB  2DBD               	goto	l1933
  4034     05CC                     u2280:
  4035     05CC                     l1937:
  4036                           
  4037                           ;main.c: 571:           _delay((unsigned long)((50)*(8000000/4000.0)));
  4038     05CC  3082               	movlw	130
  4039     05CD  00F3               	movwf	??_check_button_press+1
  4040     05CE  30DD               	movlw	221
  4041     05CF  00F2               	movwf	??_check_button_press
  4042     05D0                     u3207:
  4043     05D0  0BF2               	decfsz	??_check_button_press,f
  4044     05D1  2DD0               	goto	u3207
  4045     05D2  0BF3               	decfsz	??_check_button_press+1,f
  4046     05D3  2DD0               	goto	u3207
  4047     05D4  2DD5               	nop2
  4048                           
  4049                           ;main.c: 572:           break;
  4050     05D5  2DDC               	goto	l1939
  4051     05D6                     l315:	
  4052                           ;main.c: 574:       }
  4053                           
  4054                           
  4055                           ;main.c: 555:       while (PORTCbits.RC1 == 0) {
  4056     05D6  1283               	bcf	3,5	;RP0=0, select bank0
  4057     05D7  1303               	bcf	3,6	;RP1=0, select bank0
  4058     05D8  1C87               	btfss	7,1	;volatile
  4059     05D9  2DDB               	goto	u2291
  4060     05DA  2DDC               	goto	u2290
  4061     05DB                     u2291:
  4062     05DB  2DA1               	goto	l1929
  4063     05DC                     u2290:
  4064     05DC                     l1939:
  4065                           
  4066                           ;main.c: 577:       if (!long_press) {
  4067     05DC  0878               	movf	check_button_press@long_press,w
  4068     05DD  1D03               	btfss	3,2
  4069     05DE  2DE0               	goto	u2301
  4070     05DF  2DE1               	goto	u2300
  4071     05E0                     u2301:
  4072     05E0  2DEC               	goto	l1945
  4073     05E1                     u2300:
  4074     05E1                     l1941:
  4075                           
  4076                           ;main.c: 579:         _delay((unsigned long)((50)*(8000000/4000.0)));
  4077     05E1  3082               	movlw	130
  4078     05E2  00F3               	movwf	??_check_button_press+1
  4079     05E3  30DD               	movlw	221
  4080     05E4  00F2               	movwf	??_check_button_press
  4081     05E5                     u3217:
  4082     05E5  0BF2               	decfsz	??_check_button_press,f
  4083     05E6  2DE5               	goto	u3217
  4084     05E7  0BF3               	decfsz	??_check_button_press+1,f
  4085     05E8  2DE5               	goto	u3217
  4086     05E9  2DEA               	nop2
  4087                           
  4088                           ;main.c: 580:         return 0;
  4089     05EA  3000               	movlw	0
  4090     05EB  2DEF               	goto	l323
  4091     05EC                     l1945:
  4092                           
  4093                           ;main.c: 583:       return 1;
  4094     05EC  3001               	movlw	1
  4095     05ED  2DEF               	goto	l323
  4096     05EE                     l1949:
  4097                           
  4098                           ;main.c: 587:   return 0;
  4099     05EE  3000               	movlw	0
  4100     05EF                     l323:
  4101     05EF  0008               	return
  4102     05F0                     __end_of_check_button_press:
  4103                           
  4104                           	psect	text15
  4105     06A5                     __ptext15:	
  4106 ;; *************** function _buzzer_update *****************
  4107 ;; Defined at:
  4108 ;;		line 531 in file "main.c"
  4109 ;; Parameters:    Size  Location     Type
  4110 ;;		None
  4111 ;; Auto vars:     Size  Location     Type
  4112 ;;		None
  4113 ;; Return value:  Size  Location     Type
  4114 ;;                  1    wreg      void 
  4115 ;; Registers used:
  4116 ;;		wreg, status,2, status,0
  4117 ;; Tracked objects:
  4118 ;;		On entry : 0/0
  4119 ;;		On exit  : 0/0
  4120 ;;		Unchanged: 0/0
  4121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4122 ;;      Params:         0       0       0       0
  4123 ;;      Locals:         0       0       0       0
  4124 ;;      Temps:          8       0       0       0
  4125 ;;      Totals:         8       0       0       0
  4126 ;;Total ram usage:        8 bytes
  4127 ;; Hardware stack levels used: 1
  4128 ;; Hardware stack levels required when called: 1
  4129 ;; This function calls:
  4130 ;;		Nothing
  4131 ;; This function is called by:
  4132 ;;		_main
  4133 ;; This function uses a non-reentrant model
  4134 ;;
  4135                           
  4136     06A5                     _buzzer_update:	
  4137                           ;psect for function _buzzer_update
  4138                           
  4139     06A5                     l1907:	
  4140                           ;incstack = 0
  4141                           ; Regs used in _buzzer_update: [wreg+status,2+status,0]
  4142                           
  4143                           
  4144                           ;main.c: 532:   if (buzzer_active &&
  4145     06A5  1283               	bcf	3,5	;RP0=0, select bank0
  4146     06A6  1303               	bcf	3,6	;RP1=0, select bank0
  4147     06A7  0832               	movf	_buzzer_active,w
  4148     06A8  1903               	btfsc	3,2
  4149     06A9  2EAB               	goto	u2221
  4150     06AA  2EAC               	goto	u2220
  4151     06AB                     u2221:
  4152     06AB  2EEE               	goto	l310
  4153     06AC                     u2220:
  4154     06AC                     l1909:
  4155     06AC  1683               	bsf	3,5	;RP0=1, select bank1
  4156     06AD  1303               	bcf	3,6	;RP1=0, select bank1
  4157     06AE  0834               	movf	_buzzer_duration^(0+128),w
  4158     06AF  00F2               	movwf	??_buzzer_update
  4159     06B0  0835               	movf	(_buzzer_duration+1)^(0+128),w
  4160     06B1  00F3               	movwf	??_buzzer_update+1
  4161     06B2  01F4               	clrf	??_buzzer_update+2
  4162     06B3  01F5               	clrf	??_buzzer_update+3
  4163     06B4  1283               	bcf	3,5	;RP0=0, select bank0
  4164     06B5  1303               	bcf	3,6	;RP1=0, select bank0
  4165     06B6  0828               	movf	_millis,w	;volatile
  4166     06B7  00F6               	movwf	??_buzzer_update+4
  4167     06B8  0829               	movf	_millis+1,w	;volatile
  4168     06B9  00F7               	movwf	??_buzzer_update+5
  4169     06BA  082A               	movf	_millis+2,w	;volatile
  4170     06BB  00F8               	movwf	??_buzzer_update+6
  4171     06BC  082B               	movf	_millis+3,w	;volatile
  4172     06BD  00F9               	movwf	??_buzzer_update+7
  4173     06BE  1683               	bsf	3,5	;RP0=1, select bank1
  4174     06BF  1303               	bcf	3,6	;RP1=0, select bank1
  4175     06C0  0824               	movf	_buzzer_start_time^(0+128),w
  4176     06C1  02F6               	subwf	??_buzzer_update+4,f
  4177     06C2  0825               	movf	(_buzzer_start_time+1)^(0+128),w
  4178     06C3  1C03               	skipc
  4179     06C4  0F25               	incfsz	(_buzzer_start_time+1)^(0+128),w
  4180     06C5  2EC7               	goto	u2231
  4181     06C6  2EC8               	goto	u2232
  4182     06C7                     u2231:
  4183     06C7  02F7               	subwf	??_buzzer_update+5,f
  4184     06C8                     u2232:
  4185     06C8  0826               	movf	(_buzzer_start_time+2)^(0+128),w
  4186     06C9  1C03               	skipc
  4187     06CA  0F26               	incfsz	(_buzzer_start_time+2)^(0+128),w
  4188     06CB  2ECD               	goto	u2233
  4189     06CC  2ECE               	goto	u2234
  4190     06CD                     u2233:
  4191     06CD  02F8               	subwf	??_buzzer_update+6,f
  4192     06CE                     u2234:
  4193     06CE  0827               	movf	(_buzzer_start_time+3)^(0+128),w
  4194     06CF  1C03               	skipc
  4195     06D0  0F27               	incfsz	(_buzzer_start_time+3)^(0+128),w
  4196     06D1  2ED3               	goto	u2235
  4197     06D2  2ED4               	goto	u2236
  4198     06D3                     u2235:
  4199     06D3  02F9               	subwf	??_buzzer_update+7,f
  4200     06D4                     u2236:
  4201     06D4  0875               	movf	??_buzzer_update+3,w
  4202     06D5  0279               	subwf	??_buzzer_update+7,w
  4203     06D6  1D03               	skipz
  4204     06D7  2EE2               	goto	u2245
  4205     06D8  0874               	movf	??_buzzer_update+2,w
  4206     06D9  0278               	subwf	??_buzzer_update+6,w
  4207     06DA  1D03               	skipz
  4208     06DB  2EE2               	goto	u2245
  4209     06DC  0873               	movf	??_buzzer_update+1,w
  4210     06DD  0277               	subwf	??_buzzer_update+5,w
  4211     06DE  1D03               	skipz
  4212     06DF  2EE2               	goto	u2245
  4213     06E0  0872               	movf	??_buzzer_update,w
  4214     06E1  0276               	subwf	??_buzzer_update+4,w
  4215     06E2                     u2245:
  4216     06E2  1C03               	skipc
  4217     06E3  2EE5               	goto	u2241
  4218     06E4  2EE6               	goto	u2240
  4219     06E5                     u2241:
  4220     06E5  2EEE               	goto	l310
  4221     06E6                     u2240:
  4222     06E6                     l1911:
  4223                           
  4224                           ;main.c: 533:       (millis - buzzer_start_time >= buzzer_duration)) {;main.c: 534:     
      +                          PORTCbits.RC4 = 0;
  4225     06E6  1283               	bcf	3,5	;RP0=0, select bank0
  4226     06E7  1303               	bcf	3,6	;RP1=0, select bank0
  4227     06E8  1207               	bcf	7,4	;volatile
  4228     06E9                     l1913:
  4229                           
  4230                           ;main.c: 535:     buzzer_active = 0;
  4231     06E9  01B2               	clrf	_buzzer_active
  4232                           
  4233                           ;main.c: 536:     buzzer_duration = 0;
  4234     06EA  1683               	bsf	3,5	;RP0=1, select bank1
  4235     06EB  1303               	bcf	3,6	;RP1=0, select bank1
  4236     06EC  01B4               	clrf	_buzzer_duration^(0+128)
  4237     06ED  01B5               	clrf	(_buzzer_duration+1)^(0+128)
  4238     06EE                     l310:
  4239     06EE  0008               	return
  4240     06EF                     __end_of_buzzer_update:
  4241                           
  4242                           	psect	text16
  4243     0F8A                     __ptext16:	
  4244 ;; *************** function ___wmul *****************
  4245 ;; Defined at:
  4246 ;;		line 15 in file "/opt/microchip/xc8/v3.00/pic/sources/c99/common/Umul16.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;  multiplier      2   19[BANK0 ] unsigned int 
  4249 ;;  multiplicand    2   21[BANK0 ] unsigned int 
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;  product         2   23[BANK0 ] unsigned int 
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  2   19[BANK0 ] unsigned int 
  4254 ;; Registers used:
  4255 ;;		wreg, status,2, status,0
  4256 ;; Tracked objects:
  4257 ;;		On entry : 0/0
  4258 ;;		On exit  : 0/0
  4259 ;;		Unchanged: 0/0
  4260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4261 ;;      Params:         0       4       0       0
  4262 ;;      Locals:         0       2       0       0
  4263 ;;      Temps:          0       0       0       0
  4264 ;;      Totals:         0       6       0       0
  4265 ;;Total ram usage:        6 bytes
  4266 ;; Hardware stack levels used: 1
  4267 ;; Hardware stack levels required when called: 1
  4268 ;; This function calls:
  4269 ;;		Nothing
  4270 ;; This function is called by:
  4271 ;;		_main
  4272 ;; This function uses a non-reentrant model
  4273 ;;
  4274                           
  4275     0F8A                     ___wmul:	
  4276                           ;psect for function ___wmul
  4277                           
  4278     0F8A                     l1981:	
  4279                           ;incstack = 0
  4280                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4281                           
  4282     0F8A  1283               	bcf	3,5	;RP0=0, select bank0
  4283     0F8B  1303               	bcf	3,6	;RP1=0, select bank0
  4284     0F8C  01DE               	clrf	___wmul@product
  4285     0F8D  01DF               	clrf	___wmul@product+1
  4286     0F8E                     l1983:
  4287     0F8E  1C5A               	btfss	___wmul@multiplier,0
  4288     0F8F  2F91               	goto	u2391
  4289     0F90  2F92               	goto	u2390
  4290     0F91                     u2391:
  4291     0F91  2F98               	goto	l409
  4292     0F92                     u2390:
  4293     0F92                     l1985:
  4294     0F92  085C               	movf	___wmul@multiplicand,w
  4295     0F93  07DE               	addwf	___wmul@product,f
  4296     0F94  1803               	skipnc
  4297     0F95  0ADF               	incf	___wmul@product+1,f
  4298     0F96  085D               	movf	___wmul@multiplicand+1,w
  4299     0F97  07DF               	addwf	___wmul@product+1,f
  4300     0F98                     l409:
  4301     0F98  3001               	movlw	1
  4302     0F99                     u2405:
  4303     0F99  1003               	clrc
  4304     0F9A  0DDC               	rlf	___wmul@multiplicand,f
  4305     0F9B  0DDD               	rlf	___wmul@multiplicand+1,f
  4306     0F9C  3EFF               	addlw	-1
  4307     0F9D  1D03               	skipz
  4308     0F9E  2F99               	goto	u2405
  4309     0F9F                     l1987:
  4310     0F9F  3001               	movlw	1
  4311     0FA0                     u2415:
  4312     0FA0  1003               	clrc
  4313     0FA1  0CDB               	rrf	___wmul@multiplier+1,f
  4314     0FA2  0CDA               	rrf	___wmul@multiplier,f
  4315     0FA3  3EFF               	addlw	-1
  4316     0FA4  1D03               	skipz
  4317     0FA5  2FA0               	goto	u2415
  4318     0FA6                     l1989:
  4319     0FA6  085A               	movf	___wmul@multiplier,w
  4320     0FA7  045B               	iorwf	___wmul@multiplier+1,w
  4321     0FA8  1D03               	btfss	3,2
  4322     0FA9  2FAB               	goto	u2421
  4323     0FAA  2FAC               	goto	u2420
  4324     0FAB                     u2421:
  4325     0FAB  2F8E               	goto	l1983
  4326     0FAC                     u2420:
  4327     0FAC                     l1991:
  4328     0FAC  085F               	movf	___wmul@product+1,w
  4329     0FAD  00DB               	movwf	?___wmul+1
  4330     0FAE  085E               	movf	___wmul@product,w
  4331     0FAF  00DA               	movwf	?___wmul
  4332     0FB0                     l411:
  4333     0FB0  0008               	return
  4334     0FB1                     __end_of___wmul:
  4335                           
  4336                           	psect	text17
  4337     0739                     __ptext17:	
  4338 ;; *************** function ___lmul *****************
  4339 ;; Defined at:
  4340 ;;		line 15 in file "/opt/microchip/xc8/v3.00/pic/sources/c99/common/Umul32.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;  multiplier      4    2[COMMON] unsigned long 
  4343 ;;  multiplicand    4    6[COMMON] unsigned long 
  4344 ;; Auto vars:     Size  Location     Type
  4345 ;;  product         4    1[BANK0 ] unsigned long 
  4346 ;; Return value:  Size  Location     Type
  4347 ;;                  4    2[COMMON] unsigned long 
  4348 ;; Registers used:
  4349 ;;		wreg, status,2, status,0
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4355 ;;      Params:         8       0       0       0
  4356 ;;      Locals:         0       4       0       0
  4357 ;;      Temps:          0       1       0       0
  4358 ;;      Totals:         8       5       0       0
  4359 ;;Total ram usage:       13 bytes
  4360 ;; Hardware stack levels used: 1
  4361 ;; Hardware stack levels required when called: 1
  4362 ;; This function calls:
  4363 ;;		Nothing
  4364 ;; This function is called by:
  4365 ;;		_main
  4366 ;; This function uses a non-reentrant model
  4367 ;;
  4368                           
  4369     0739                     ___lmul:	
  4370                           ;psect for function ___lmul
  4371                           
  4372     0739                     l1995:	
  4373                           ;incstack = 0
  4374                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4375                           
  4376     0739  3000               	movlw	0
  4377     073A  1283               	bcf	3,5	;RP0=0, select bank0
  4378     073B  1303               	bcf	3,6	;RP1=0, select bank0
  4379     073C  00CB               	movwf	___lmul@product+3
  4380     073D  3000               	movlw	0
  4381     073E  00CA               	movwf	___lmul@product+2
  4382     073F  3000               	movlw	0
  4383     0740  00C9               	movwf	___lmul@product+1
  4384     0741  3000               	movlw	0
  4385     0742  00C8               	movwf	___lmul@product
  4386     0743                     l1997:
  4387     0743  1C72               	btfss	___lmul@multiplier,0
  4388     0744  2F46               	goto	u2431
  4389     0745  2F47               	goto	u2430
  4390     0746                     u2431:
  4391     0746  2F5E               	goto	l2001
  4392     0747                     u2430:
  4393     0747                     l1999:
  4394     0747  0876               	movf	___lmul@multiplicand,w
  4395     0748  07C8               	addwf	___lmul@product,f
  4396     0749  0877               	movf	___lmul@multiplicand+1,w
  4397     074A  1103               	clrz
  4398     074B  1803               	skipnc
  4399     074C  3E01               	addlw	1
  4400     074D  1903               	skipnz
  4401     074E  2F50               	goto	u2441
  4402     074F  07C9               	addwf	___lmul@product+1,f
  4403     0750                     u2441:
  4404     0750  0878               	movf	___lmul@multiplicand+2,w
  4405     0751  1103               	clrz
  4406     0752  1803               	skipnc
  4407     0753  3E01               	addlw	1
  4408     0754  1903               	skipnz
  4409     0755  2F57               	goto	u2442
  4410     0756  07CA               	addwf	___lmul@product+2,f
  4411     0757                     u2442:
  4412     0757  0879               	movf	___lmul@multiplicand+3,w
  4413     0758  1103               	clrz
  4414     0759  1803               	skipnc
  4415     075A  3E01               	addlw	1
  4416     075B  1903               	skipnz
  4417     075C  2F5E               	goto	u2443
  4418     075D  07CB               	addwf	___lmul@product+3,f
  4419     075E                     u2443:
  4420     075E                     l2001:
  4421     075E  3001               	movlw	1
  4422     075F  00C7               	movwf	??___lmul
  4423     0760                     u2455:
  4424     0760  1003               	clrc
  4425     0761  0DF6               	rlf	___lmul@multiplicand,f
  4426     0762  0DF7               	rlf	___lmul@multiplicand+1,f
  4427     0763  0DF8               	rlf	___lmul@multiplicand+2,f
  4428     0764  0DF9               	rlf	___lmul@multiplicand+3,f
  4429     0765  0BC7               	decfsz	??___lmul,f
  4430     0766  2F60               	goto	u2455
  4431     0767                     l2003:
  4432     0767  3001               	movlw	1
  4433     0768                     u2465:
  4434     0768  1003               	clrc
  4435     0769  0CF5               	rrf	___lmul@multiplier+3,f
  4436     076A  0CF4               	rrf	___lmul@multiplier+2,f
  4437     076B  0CF3               	rrf	___lmul@multiplier+1,f
  4438     076C  0CF2               	rrf	___lmul@multiplier,f
  4439     076D  3EFF               	addlw	-1
  4440     076E  1D03               	skipz
  4441     076F  2F68               	goto	u2465
  4442     0770  0875               	movf	___lmul@multiplier+3,w
  4443     0771  0474               	iorwf	___lmul@multiplier+2,w
  4444     0772  0473               	iorwf	___lmul@multiplier+1,w
  4445     0773  0472               	iorwf	___lmul@multiplier,w
  4446     0774  1D03               	skipz
  4447     0775  2F77               	goto	u2471
  4448     0776  2F78               	goto	u2470
  4449     0777                     u2471:
  4450     0777  2F43               	goto	l1997
  4451     0778                     u2470:
  4452     0778                     l2005:
  4453     0778  084B               	movf	___lmul@product+3,w
  4454     0779  00F5               	movwf	?___lmul+3
  4455     077A  084A               	movf	___lmul@product+2,w
  4456     077B  00F4               	movwf	?___lmul+2
  4457     077C  0849               	movf	___lmul@product+1,w
  4458     077D  00F3               	movwf	?___lmul+1
  4459     077E  0848               	movf	___lmul@product,w
  4460     077F  00F2               	movwf	?___lmul
  4461     0780                     l423:
  4462     0780  0008               	return
  4463     0781                     __end_of___lmul:
  4464                           
  4465                           	psect	text18
  4466     05F0                     __ptext18:	
  4467 ;; *************** function ___lldiv *****************
  4468 ;; Defined at:
  4469 ;;		line 5 in file "/opt/microchip/xc8/v3.00/pic/sources/c99/common/__lldiv.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;  divisor         4    5[BANK0 ] unsigned long 
  4472 ;;  dividend        4    9[BANK0 ] unsigned long 
  4473 ;; Auto vars:     Size  Location     Type
  4474 ;;  quotient        4   14[BANK0 ] unsigned long 
  4475 ;;  counter         1   18[BANK0 ] unsigned char 
  4476 ;; Return value:  Size  Location     Type
  4477 ;;                  4    5[BANK0 ] unsigned long 
  4478 ;; Registers used:
  4479 ;;		wreg, status,2, status,0
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4485 ;;      Params:         0       8       0       0
  4486 ;;      Locals:         0       5       0       0
  4487 ;;      Temps:          0       1       0       0
  4488 ;;      Totals:         0      14       0       0
  4489 ;;Total ram usage:       14 bytes
  4490 ;; Hardware stack levels used: 1
  4491 ;; Hardware stack levels required when called: 1
  4492 ;; This function calls:
  4493 ;;		Nothing
  4494 ;; This function is called by:
  4495 ;;		_main
  4496 ;; This function uses a non-reentrant model
  4497 ;;
  4498                           
  4499     05F0                     ___lldiv:	
  4500                           ;psect for function ___lldiv
  4501                           
  4502     05F0                     l2009:	
  4503                           ;incstack = 0
  4504                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4505                           
  4506     05F0  3000               	movlw	0
  4507     05F1  1283               	bcf	3,5	;RP0=0, select bank0
  4508     05F2  1303               	bcf	3,6	;RP1=0, select bank0
  4509     05F3  00D8               	movwf	___lldiv@quotient+3
  4510     05F4  3000               	movlw	0
  4511     05F5  00D7               	movwf	___lldiv@quotient+2
  4512     05F6  3000               	movlw	0
  4513     05F7  00D6               	movwf	___lldiv@quotient+1
  4514     05F8  3000               	movlw	0
  4515     05F9  00D5               	movwf	___lldiv@quotient
  4516     05FA  084F               	movf	___lldiv@divisor+3,w
  4517     05FB  044E               	iorwf	___lldiv@divisor+2,w
  4518     05FC  044D               	iorwf	___lldiv@divisor+1,w
  4519     05FD  044C               	iorwf	___lldiv@divisor,w
  4520     05FE  1903               	skipnz
  4521     05FF  2E01               	goto	u2481
  4522     0600  2E02               	goto	u2480
  4523     0601                     u2481:
  4524     0601  2E4D               	goto	l2029
  4525     0602                     u2480:
  4526     0602                     l2011:
  4527     0602  3001               	movlw	1
  4528     0603  00D9               	movwf	___lldiv@counter
  4529     0604  2E10               	goto	l2015
  4530     0605                     l2013:
  4531     0605  3001               	movlw	1
  4532     0606  00D4               	movwf	??___lldiv
  4533     0607                     u2495:
  4534     0607  1003               	clrc
  4535     0608  0DCC               	rlf	___lldiv@divisor,f
  4536     0609  0DCD               	rlf	___lldiv@divisor+1,f
  4537     060A  0DCE               	rlf	___lldiv@divisor+2,f
  4538     060B  0DCF               	rlf	___lldiv@divisor+3,f
  4539     060C  0BD4               	decfsz	??___lldiv,f
  4540     060D  2E07               	goto	u2495
  4541     060E  3001               	movlw	1
  4542     060F  07D9               	addwf	___lldiv@counter,f
  4543     0610                     l2015:
  4544     0610  1FCF               	btfss	___lldiv@divisor+3,7
  4545     0611  2E13               	goto	u2501
  4546     0612  2E14               	goto	u2500
  4547     0613                     u2501:
  4548     0613  2E05               	goto	l2013
  4549     0614                     u2500:
  4550     0614                     l2017:
  4551     0614  3001               	movlw	1
  4552     0615  00D4               	movwf	??___lldiv
  4553     0616                     u2515:
  4554     0616  1003               	clrc
  4555     0617  0DD5               	rlf	___lldiv@quotient,f
  4556     0618  0DD6               	rlf	___lldiv@quotient+1,f
  4557     0619  0DD7               	rlf	___lldiv@quotient+2,f
  4558     061A  0DD8               	rlf	___lldiv@quotient+3,f
  4559     061B  0BD4               	decfsz	??___lldiv,f
  4560     061C  2E16               	goto	u2515
  4561     061D                     l2019:
  4562     061D  084F               	movf	___lldiv@divisor+3,w
  4563     061E  0253               	subwf	___lldiv@dividend+3,w
  4564     061F  1D03               	skipz
  4565     0620  2E2B               	goto	u2525
  4566     0621  084E               	movf	___lldiv@divisor+2,w
  4567     0622  0252               	subwf	___lldiv@dividend+2,w
  4568     0623  1D03               	skipz
  4569     0624  2E2B               	goto	u2525
  4570     0625  084D               	movf	___lldiv@divisor+1,w
  4571     0626  0251               	subwf	___lldiv@dividend+1,w
  4572     0627  1D03               	skipz
  4573     0628  2E2B               	goto	u2525
  4574     0629  084C               	movf	___lldiv@divisor,w
  4575     062A  0250               	subwf	___lldiv@dividend,w
  4576     062B                     u2525:
  4577     062B  1C03               	skipc
  4578     062C  2E2E               	goto	u2521
  4579     062D  2E2F               	goto	u2520
  4580     062E                     u2521:
  4581     062E  2E3E               	goto	l2025
  4582     062F                     u2520:
  4583     062F                     l2021:
  4584     062F  084C               	movf	___lldiv@divisor,w
  4585     0630  02D0               	subwf	___lldiv@dividend,f
  4586     0631  084D               	movf	___lldiv@divisor+1,w
  4587     0632  1C03               	skipc
  4588     0633  0F4D               	incfsz	___lldiv@divisor+1,w
  4589     0634  02D1               	subwf	___lldiv@dividend+1,f
  4590     0635  084E               	movf	___lldiv@divisor+2,w
  4591     0636  1C03               	skipc
  4592     0637  0F4E               	incfsz	___lldiv@divisor+2,w
  4593     0638  02D2               	subwf	___lldiv@dividend+2,f
  4594     0639  084F               	movf	___lldiv@divisor+3,w
  4595     063A  1C03               	skipc
  4596     063B  0F4F               	incfsz	___lldiv@divisor+3,w
  4597     063C  02D3               	subwf	___lldiv@dividend+3,f
  4598     063D                     l2023:
  4599     063D  1455               	bsf	___lldiv@quotient,0
  4600     063E                     l2025:
  4601     063E  3001               	movlw	1
  4602     063F                     u2535:
  4603     063F  1003               	clrc
  4604     0640  0CCF               	rrf	___lldiv@divisor+3,f
  4605     0641  0CCE               	rrf	___lldiv@divisor+2,f
  4606     0642  0CCD               	rrf	___lldiv@divisor+1,f
  4607     0643  0CCC               	rrf	___lldiv@divisor,f
  4608     0644  3EFF               	addlw	-1
  4609     0645  1D03               	skipz
  4610     0646  2E3F               	goto	u2535
  4611     0647                     l2027:
  4612     0647  3001               	movlw	1
  4613     0648  02D9               	subwf	___lldiv@counter,f
  4614     0649  1D03               	btfss	3,2
  4615     064A  2E4C               	goto	u2541
  4616     064B  2E4D               	goto	u2540
  4617     064C                     u2541:
  4618     064C  2E14               	goto	l2017
  4619     064D                     u2540:
  4620     064D                     l2029:
  4621     064D  0858               	movf	___lldiv@quotient+3,w
  4622     064E  00CF               	movwf	?___lldiv+3
  4623     064F  0857               	movf	___lldiv@quotient+2,w
  4624     0650  00CE               	movwf	?___lldiv+2
  4625     0651  0856               	movf	___lldiv@quotient+1,w
  4626     0652  00CD               	movwf	?___lldiv+1
  4627     0653  0855               	movf	___lldiv@quotient,w
  4628     0654  00CC               	movwf	?___lldiv
  4629     0655                     l445:
  4630     0655  0008               	return
  4631     0656                     __end_of___lldiv:
  4632                           
  4633                           	psect	text19
  4634     06EF                     __ptext19:	
  4635 ;; *************** function _isr *****************
  4636 ;; Defined at:
  4637 ;;		line 403 in file "main.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;		None
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;		None
  4642 ;; Return value:  Size  Location     Type
  4643 ;;                  1    wreg      void 
  4644 ;; Registers used:
  4645 ;;		wreg, status,2, status,0
  4646 ;; Tracked objects:
  4647 ;;		On entry : 0/0
  4648 ;;		On exit  : 0/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4651 ;;      Params:         0       0       0       0
  4652 ;;      Locals:         0       0       0       0
  4653 ;;      Temps:          2       0       0       0
  4654 ;;      Totals:         2       0       0       0
  4655 ;;Total ram usage:        2 bytes
  4656 ;; Hardware stack levels used: 1
  4657 ;; This function calls:
  4658 ;;		Nothing
  4659 ;; This function is called by:
  4660 ;;		Interrupt level 1
  4661 ;; This function uses a non-reentrant model
  4662 ;;
  4663                           
  4664     06EF                     _isr:	
  4665                           ;psect for function _isr
  4666                           
  4667     06EF                     i1l1771:
  4668                           
  4669                           ;main.c: 405:   if (PIR1bits.TMR1IF) {
  4670     06EF  1283               	bcf	3,5	;RP0=0, select bank0
  4671     06F0  1303               	bcf	3,6	;RP1=0, select bank0
  4672     06F1  1C0C               	btfss	12,0	;volatile
  4673     06F2  2EF4               	goto	u208_21
  4674     06F3  2EF5               	goto	u208_20
  4675     06F4                     u208_21:
  4676     06F4  2F08               	goto	i1l1781
  4677     06F5                     u208_20:
  4678     06F5                     i1l1773:
  4679                           
  4680                           ;main.c: 406:     millis ++;
  4681     06F5  3001               	movlw	1
  4682     06F6  07A8               	addwf	_millis,f	;volatile
  4683     06F7  3000               	movlw	0
  4684     06F8  1803               	skipnc
  4685     06F9  3001               	movlw	1
  4686     06FA  07A9               	addwf	_millis+1,f	;volatile
  4687     06FB  3000               	movlw	0
  4688     06FC  1803               	skipnc
  4689     06FD  3001               	movlw	1
  4690     06FE  07AA               	addwf	_millis+2,f	;volatile
  4691     06FF  3000               	movlw	0
  4692     0700  1803               	skipnc
  4693     0701  3001               	movlw	1
  4694     0702  07AB               	addwf	_millis+3,f	;volatile
  4695     0703                     i1l1775:
  4696                           
  4697                           ;main.c: 407:     PIR1bits.TMR1IF = 0;
  4698     0703  100C               	bcf	12,0	;volatile
  4699     0704                     i1l1777:
  4700                           
  4701                           ;main.c: 408:     TMR1H = 255;
  4702     0704  30FF               	movlw	255
  4703     0705  008F               	movwf	15	;volatile
  4704     0706                     i1l1779:
  4705                           
  4706                           ;main.c: 409:     TMR1L = 14;
  4707     0706  300E               	movlw	14
  4708     0707  008E               	movwf	14	;volatile
  4709     0708                     i1l1781:
  4710                           
  4711                           ;main.c: 412:   if (INTCONbits.TMR0IF) {
  4712     0708  1D0B               	btfss	11,2	;volatile
  4713     0709  2F0B               	goto	u209_21
  4714     070A  2F0C               	goto	u209_20
  4715     070B                     u209_21:
  4716     070B  2F32               	goto	i1l271
  4717     070C                     u209_20:
  4718     070C                     i1l1783:
  4719                           
  4720                           ;main.c: 414:     TMR0 = 6;
  4721     070C  3006               	movlw	6
  4722     070D  0081               	movwf	1	;volatile
  4723                           
  4724                           ;main.c: 415:     INTCONbits.TMR0IF = 0;
  4725     070E  110B               	bcf	11,2	;volatile
  4726     070F                     i1l1785:
  4727                           
  4728                           ;main.c: 418:     if (sensors_reading_in_progress) {
  4729     070F  083C               	movf	_sensors_reading_in_progress,w	;volatile
  4730     0710  1903               	btfsc	3,2
  4731     0711  2F13               	goto	u210_21
  4732     0712  2F14               	goto	u210_20
  4733     0713                     u210_21:
  4734     0713  2F32               	goto	i1l271
  4735     0714                     u210_20:
  4736     0714                     i1l1787:
  4737                           
  4738                           ;main.c: 420:       if (PORTBbits.RB5)
  4739     0714  1E86               	btfss	6,5	;volatile
  4740     0715  2F17               	goto	u211_21
  4741     0716  2F18               	goto	u211_20
  4742     0717                     u211_21:
  4743     0717  2F1A               	goto	i1l1791
  4744     0718                     u211_20:
  4745     0718                     i1l1789:
  4746                           
  4747                           ;main.c: 421:         low_sensor_high_count++;
  4748     0718  3001               	movlw	1
  4749     0719  07FA               	addwf	_low_sensor_high_count,f	;volatile
  4750     071A                     i1l1791:
  4751                           
  4752                           ;main.c: 422:       if (PORTBbits.RB4)
  4753     071A  1E06               	btfss	6,4	;volatile
  4754     071B  2F1D               	goto	u212_21
  4755     071C  2F1E               	goto	u212_20
  4756     071D                     u212_21:
  4757     071D  2F20               	goto	i1l1795
  4758     071E                     u212_20:
  4759     071E                     i1l1793:
  4760                           
  4761                           ;main.c: 423:         high_sensor_high_count++;
  4762     071E  3001               	movlw	1
  4763     071F  07BF               	addwf	_high_sensor_high_count,f	;volatile
  4764     0720                     i1l1795:
  4765                           
  4766                           ;main.c: 424:       if (PORTBbits.RB3)
  4767     0720  1D86               	btfss	6,3	;volatile
  4768     0721  2F23               	goto	u213_21
  4769     0722  2F24               	goto	u213_20
  4770     0723                     u213_21:
  4771     0723  2F26               	goto	i1l269
  4772     0724                     u213_20:
  4773     0724                     i1l1797:
  4774                           
  4775                           ;main.c: 425:         flow_sensor_high_count++;
  4776     0724  3001               	movlw	1
  4777     0725  07BE               	addwf	_flow_sensor_high_count,f	;volatile
  4778     0726                     i1l269:
  4779                           
  4780                           ;main.c: 427:       reading_count++;
  4781     0726  3001               	movlw	1
  4782     0727  07FB               	addwf	_reading_count,f	;volatile
  4783     0728                     i1l1799:
  4784                           
  4785                           ;main.c: 430:       if (reading_count >= 50) {
  4786     0728  3032               	movlw	50
  4787     0729  027B               	subwf	_reading_count,w	;volatile
  4788     072A  1C03               	skipc
  4789     072B  2F2D               	goto	u214_21
  4790     072C  2F2E               	goto	u214_20
  4791     072D                     u214_21:
  4792     072D  2F32               	goto	i1l271
  4793     072E                     u214_20:
  4794     072E                     i1l1801:
  4795                           
  4796                           ;main.c: 431:         sensors_reading_in_progress = 0;
  4797     072E  01BC               	clrf	_sensors_reading_in_progress	;volatile
  4798     072F                     i1l1803:
  4799                           
  4800                           ;main.c: 432:         sensors_reading_complete = 1;
  4801     072F  3001               	movlw	1
  4802     0730  00BD               	movwf	_sensors_reading_complete	;volatile
  4803     0731                     i1l1805:
  4804                           
  4805                           ;main.c: 433:         INTCONbits.TMR0IE =
  4806     0731  128B               	bcf	11,5	;volatile
  4807     0732                     i1l271:
  4808     0732  0871               	movf	??_isr+1,w
  4809     0733  008A               	movwf	10
  4810     0734  0E70               	swapf	??_isr,w
  4811     0735  0083               	movwf	3
  4812     0736  0EFE               	swapf	btemp,f
  4813     0737  0E7E               	swapf	btemp,w
  4814     0738  0009               	retfie
  4815     0739                     __end_of_isr:
  4816     0001                     ___latbits      equ	1
  4817     007E                     btemp           set	126	;btemp
  4818     007E                     wtemp0          set	126
  4819                           
  4820                           	psect	intentry
  4821     0004                     __pintentry:	
  4822                           ;incstack = 0
  4823                           ; Regs used in _isr: [wreg+status,2+status,0]
  4824                           
  4825     0004                     interrupt_function:
  4826     007E                     saved_w         set	btemp
  4827     0004  00FE               	movwf	btemp
  4828     0005  0E03               	swapf	3,w
  4829     0006  00F0               	movwf	??_isr
  4830     0007  080A               	movf	10,w
  4831     0008  00F1               	movwf	??_isr+1
  4832     0009  118A  2EEF         	ljmp	_isr
  4833                           
  4834                           	psect	config
  4835                           
  4836                           ;Config register CONFIG1 @ 0x2007
  4837                           ;	Oscillator Selection bits
  4838                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  4839                           ;	Watchdog Timer Enable bit
  4840                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4841                           ;	Power-up Timer Enable bit
  4842                           ;	PWRTE = ON, PWRT enabled
  4843                           ;	RE3/MCLR pin function select bit
  4844                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  4845                           ;	Code Protection bit
  4846                           ;	CP = OFF, Program memory code protection is disabled
  4847                           ;	Data Code Protection bit
  4848                           ;	CPD = OFF, Data memory code protection is disabled
  4849                           ;	Brown Out Reset Selection bits
  4850                           ;	BOREN = ON, BOR enabled
  4851                           ;	Internal External Switchover bit
  4852                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  4853                           ;	Fail-Safe Clock Monitor Enabled bit
  4854                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  4855                           ;	Low Voltage Programming Enable bit
  4856                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4857                           ;	In-Circuit Debugger Mode bit
  4858                           ;	DEBUG = 0x1, unprogrammed default
  4859     2007                     	org	8199
  4860     2007  23E4               	dw	9188

Data Sizes:
    Strings     0
    Constant    0
    Data        23
    BSS         71
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     33      79
    BANK1            80      2      48
    BANK2            80      0       0

Pointer List with Targets:

    getSensorResults@flow_active	PTR _Bool  size(1) Largest target is 1
		 -> flow_sensor_active(BANK0[1]), 

    getSensorResults@high_active	PTR _Bool  size(1) Largest target is 1
		 -> high_sensor_active(BANK0[1]), 

    getSensorResults@low_active	PTR _Bool  size(1) Largest target is 1
		 -> low_sensor_active(BANK0[1]), 

    loadSettings@value16bit1	PTR unsigned int  size(1) Largest target is 2
		 -> minvoltagelimit(BANK0[2]), 

    loadSettings@value16bit2	PTR unsigned int  size(1) Largest target is 2
		 -> maxvoltagelimit(BANK0[2]), 

    loadSettings@value16bit3	PTR unsigned int  size(1) Largest target is 2
		 -> minimumrunningvoltage(BANK0[2]), 

    loadSettings@value16bit4	PTR unsigned int  size(1) Largest target is 2
		 -> maximumrinningvoltage(BANK1[2]), 

    loadSettings@value8bit	PTR unsigned char  size(1) Largest target is 1
		 -> maxruntimeindex(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->___lmul
    _main->_buzzer_update
    _saveSettings->_EEPROM_Write16
    _EEPROM_Write16->_EEPROM_Write
    _loadSettings->_EEPROM_Read16
    _EEPROM_Read16->_EEPROM_Read
    ___wmul->___lmul
    ___lldiv->___lmul

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___wmul
    ___wmul->___lldiv
    ___lldiv->___lmul

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    1868
                                             25 BANK0      8     8      0
                                              0 BANK1      2     2      0
                            ___lldiv
                             ___lmul
                             ___wmul
                      _buzzer_update
                 _check_button_press
                   _getSensorResults
                         _initSystem
                         _init_timer
                       _loadSettings
                            _readADC
                       _saveSettings
                        _setupTimer0
                 _startSensorReading
                     _trigger_buzzer
 ---------------------------------------------------------------------------------
 (1) _trigger_buzzer                                       2     0      2      40
                                              2 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _startSensorReading                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupTimer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _saveSettings                                         9     1      8     531
                                              7 COMMON     1     1      0
                                              0 BANK0      8     0      8
                       _EEPROM_Write
                     _EEPROM_Write16
 ---------------------------------------------------------------------------------
 (2) _EEPROM_Write16                                       3     1      2     258
                                              4 COMMON     3     1      2
                       _EEPROM_Write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_Write                                         2     1      1      90
                                              2 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) _readADC                                              4     2      2      47
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _loadSettings                                         5     0      5     395
                                              0 BANK0      5     0      5
                        _EEPROM_Read
                      _EEPROM_Read16
 ---------------------------------------------------------------------------------
 (2) _EEPROM_Read16                                        7     5      2     178
                                              3 COMMON     7     5      2
                        _EEPROM_Read
 ---------------------------------------------------------------------------------
 (3) _EEPROM_Read                                          1     1      0      47
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_timer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSystem                                           2     2      0       0
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _getSensorResults                                     3     0      3     102
                                              2 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (1) _check_button_press                                   7     7      0     108
                                              2 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (1) _buzzer_update                                        8     8      0       0
                                              2 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     142
                                             19 BANK0      6     2      4
                            ___lldiv (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              13     5      8     148
                                              2 COMMON     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) ___lldiv                                             14     6      8     253
                                              5 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lldiv
     ___lmul (ARG)
   ___lmul
   ___wmul
     ___lldiv (ARG)
     ___lmul (ARG)
   _buzzer_update
   _check_button_press
   _getSensorResults
   _initSystem
   _init_timer
   _loadSettings
     _EEPROM_Read
     _EEPROM_Read16
       _EEPROM_Read
   _readADC
   _saveSettings
     _EEPROM_Write
     _EEPROM_Write16
       _EEPROM_Write
   _setupTimer0
   _startSensorReading
   _trigger_buzzer

 _isr (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BANK2               80      0       0      0.0%
BITBANK2            80      0       0      0.0%
BANK1               80      2      48     60.0%
BITBANK1            80      0       0      0.0%
BANK0               80     33      79     98.8%
BITBANK0            80      0       0      0.0%
COMMON              14     10      12     85.7%
BITCOMMON           14      0       0      0.0%
DATA                 0      0     139      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Apr 24 10:38:08 2025

                                     pc 0002                                      _lt 00A0  
                                    _to 0043                                      fsr 0004  
                   ___wmul@multiplicand 005C                                     l201 0238  
                                   l211 03E9                                     l310 06EE  
                                   l302 07B6                                     l230 04B4  
                                   l214 0365                                     l231 04B1  
                                   l233 04AF                                     l242 0FFF  
                                   l306 0FD7                                     l411 0FB0  
                                   l323 05EF                                     l315 05D6  
                                   l251 0EDB                                     l245 0F7F  
                                   l423 0780                                     l255 0EF9  
                                   l248 0F89                                     l280 0F61  
                                   l409 0F98                                     l274 0F1A  
                                   l282 0F65                                     l259 07E4  
                                   l283 0F67                                     l292 0EEA  
                                   l445 0655                                     l277 0F4B  
                                   l286 07E6                                     l295 0F49  
                                   l289 07F7                                     l299 06A4  
                     _low_sensor_active 0046                                     _isr 06EF  
                                   _smc 0042                                     fsr0 0004  
                                   indf 0000                       main@is_long_press 00CE  
                                  l2001 075E                                    l2011 0602  
                                  l2003 0767                                    l2021 062F  
                                  l2013 0605                                    l2005 0778  
                                  l2101 0177                                    l2023 063D  
                                  l2015 0610                                    l2111 0198  
                                  l2103 017C                                    l2025 063E  
                                  l2017 0614                                    l2009 05F0  
                                  l2201 03F9                                    l2121 01B4  
                                  l2113 019D                                    l2105 0182  
                                  l2041 0053                                    l2033 0035  
                                  l2027 0647                                    l2019 061D  
                                  l2211 0415                                    l2203 03FE  
                                  l2131 022E                                    l2123 01BD  
                                  l2115 01A2                                    l2107 0190  
                                  l2051 0089                                    l2043 0057  
                                  l2035 0038                                    l2029 064D  
                                  l2221 0459                                    l2213 0442  
                                  l2205 03FF                                    l2141 0283  
                                  l2133 0240                                    l2125 01EB  
                                  l2109 0197                                    l2117 01A4  
                                  l2053 00CC                                    l2045 005B  
                                  l2037 004C                                    l2231 04B6  
                                  l2223 0486                                    l2215 0445  
                                  l2207 0404                                    l2151 02CB  
                                  l2135 0246                                    l2143 0286  
                                  l2119 01AC                                    l2127 01F8  
                                  l2071 00F1                                    l2063 00D9  
                                  l2055 00D3                                    l2047 0061  
                                  l2039 004F                                    l2233 04F8  
                                  l2225 0490                                    l2217 044D  
                                  l2209 040C                                    l2161 02E0  
                                  l2153 02D0                                    l2145 028C  
                                  l2137 024B                                    l2129 0200  
                                  l2081 010D                                    l2065 00DF  
                                  l2073 0100                                    l2057 00D6  
                                  l2049 007F                                    l2235 0510  
                                  l2227 0497                                    l2219 0451  
                                  l2171 0358                                    l2163 02F6  
                                  l2155 02D5                                    l2147 02C0  
                                  l2139 027F                                    l2091 0127  
                                  l2083 0119                                    l2075 0103  
                                  l2067 00E5                                    l2237 0517  
                                  l2229 04A4                                    l2181 0370  
                                  l2173 035A                                    l2165 02FA  
                                  l2157 02DA                                    l2149 02C4  
                                  l2093 0156                                    l2077 0106  
                                  l2069 00EA                                    l2239 055B  
                                  l2183 0389                                    l2175 035F  
                                  l2159 02DF                                    l2167 0301  
                                  l2191 03EA                                    l2095 0161  
                                  l2087 011C                                    l2193 03EF  
                                  l2185 03D7                                    l2177 0363  
                                  l2169 0308                                    l2097 0165  
                                  l2089 0125                                    l1811 0F57  
                                  l2195 03F1                                    l2179 0366  
                                  l2187 03DB                                    l2099 0172  
                                  l1821 0F60                                    l1813 0F5A  
                                  l1901 0FB8                                    l2189 03E5  
                                  l2197 03F2                                    l1911 06E6  
                                  l1823 07E6                                    l1815 0F5B  
                                  l1807 0F4B                                    l1903 0FB9  
                                  l2199 03F8                                    l1913 06E9  
                                  l1921 058B                                    l1825 07EC  
                                  l1817 0F5C                                    l1809 0F51  
                                  l1833 0EDD                                    l1905 0FD3  
                                  l1907 06A5                                    l1931 05BA  
                                  l1923 0594                                    l1851 0FE5  
                                  l1843 0FD8                                    l1915 0F0A  
                                  l1827 07F0                                    l1835 0F2D  
                                  l1819 0F5E                                    l1909 06AC  
                                  l1941 05E1                                    l1933 05BD  
                                  l1925 059A                                    l1917 0584  
                                  l1861 0FFA                                    l1853 0FE7  
                                  l1845 0FDC                                    l1829 07F3  
                                  l1837 0F37                                    l1935 05C6  
                                  l1927 059C                                    l1919 0585  
                                  l1863 0FFD                                    l1855 0FE9  
                                  l1847 0FE0                                    l1839 0F45  
                                  l1945 05EC                                    l1937 05CC  
                                  l1929 05A1                                    l1865 0FFE  
                                  l1857 0FED                                    l1849 0FE1  
                                  l1881 0695                                    l1873 0661  
                                  l1953 0ECE                                    l1961 0EEB  
                                  l1939 05DC                                    l1971 07E0  
                                  l1859 0FF1                                    l1883 06A3  
                                  l1875 066B                                    l1867 0656  
                                  l1891 0F77                                    l1955 0ED2  
                                  l1963 0EF2                                    l1981 0F8A  
                                  l1949 05EE                                    l1973 07E1  
                                  l1877 0679                                    l1869 065F  
                                  l1893 0F7C                                    l1957 0ED6  
                                  l1965 0EF7                                    l1991 0FAC  
                                  l1983 0F8E                                    l1967 07B7  
                                  l1879 0687                                    l1895 0F83  
                                  l1887 0782                                    l1959 0EDA  
                                  l1985 0F92                                    l1969 07BE  
                                  l1977 07E3                                    l1889 0F69  
                                  l1995 0739                                    l1987 0F9F  
                                  l1899 0FB1                                    l1997 0743  
                                  l1989 0FA6                                    l1999 0747  
                                  ?_isr 0070                                    u2200 0F83  
                                  u3000 03FE                                    u2201 0F82  
                                  u3001 03FD                                    u2210 0FB8  
                                  u3010 0404                                    u2211 0FB7  
                                  u3011 0403                                    u2220 06AC  
                                  u2300 05E1                                    u3100 04AF  
                                  u3020 040C                                    u2221 06AB  
                                  u2301 05E0                                    u3101 04AE  
                                  u3021 040B                                    u2150 0F51  
                                  u2310 0EF2                                    u2231 06C7  
                                  u2151 0F50                                    u2311 0EF1  
                                  u3111 04CB                                    u3031 0424  
                                  u2240 06E6                                    u2232 06C8  
                                  u2320 07BE                                    u2160 0F65  
                                  u3120 04F8                                    u3112 04CE  
                                  u3040 0442                                    u3032 0425  
                                  u2241 06E5                                    u2233 06CD  
                                  u2321 07BD                                    u2161 0F64  
                                  u3121 04F7                                    u3113 04D5  
                                  u3105 04AB                                    u3041 0441  
                                  u3033 042A                                    u2234 06CE  
                                  u2250 058B                                    u2330 07C7  
                                  u2170 07EC                                    u3114 04D8  
                                  u3050 0459                                    u3034 042B  
                                  u2235 06D3                                    u2251 058A  
                                  u2331 07C5                                    u2171 07EB  
                                  u3131 052E                                    u3123 04F4  
                                  u3115 04DF                                    u3051 0458  
                                  u3043 043E                                    u3035 0430  
                                  u2500 0614                                    u2420 0FAC  
                                  u2236 06D4                                    u2260 059A  
                                  u2340 07C8                                    u2180 065F  
                                  u3140 055B                                    u3132 0531  
                                  u3116 04E2                                    u3036 0431  
                                  u2501 0613                                    u2421 0FAB  
                                  u2405 0F99                                    u2245 06E2  
                                  u2261 0599                                    u2181 065E  
                                  u3141 055A                                    u3133 0538  
                                  u3061 0468                                    u2430 0747  
                                  u2270 05BA                                    u2350 07D3  
                                  u3134 053B                                    u3070 0486  
                                  u3062 0469                                    u2431 0746  
                                  u2415 0FA0                                    u3207 05D0  
                                  u2271 05B9                                    u2351 07D1  
                                  u3143 0557                                    u3135 0542  
                                  u3071 0485                                    u3063 046E  
                                  u2520 062F                                    u2280 05CC  
                                  u2360 07D4                                    u3136 0545  
                                  u3080 0497                                    u3064 046F  
                                  u2600 010C                                    u2521 062E  
                                  u2441 0750                                    u3217 05E5  
                                  u2281 05CB                                    u3081 0496  
                                  u3073 0482                                    u3065 0474  
                                  u2601 010B                                    u2442 0757  
                                  u2290 05DC                                    u2370 07DE  
                                  u3090 04A4                                    u3066 0475  
                                  u2610 0161                                    u2515 0616  
                                  u2443 075E                                    u2291 05DB  
                                  u2275 05B6                                    u2371 07DC  
                                  u2195 0F6C                                    u3091 04A3  
                                  u2611 0160                                    u2540 064D  
                                  u2380 07DF                                    u2700 01A2  
                                  u2620 0165                                    u2541 064C  
                                  u2525 062B                                    u3157 0F79  
                                  u2701 01A1                                    u2621 0164  
                                  u2470 0778                                    u2390 0F92  
                                  u2710 01AC                                    u2630 016F  
                                  u2550 004C                                    u2535 063F  
                                  u2471 0777                                    u2455 0760  
                                  u2391 0F91                                    u3167 0FF5  
                                  u3095 04A0                                    u2711 01AB  
                                  u2631 016B                                    u2615 015D  
                                  u2551 004B                                    u2480 0602  
                                  u2720 01B4                                    u2560 00DF  
                                  u2481 0601                                    u2465 0768  
                                  u3177 058F                                    u2801 0260  
                                  u2721 01B3                                    u2561 00DE  
                                  u2810 027F                                    u2802 0261  
                                  u2650 0177                                    u2570 00EA  
                                  u3187 05A5                                    u2811 027E  
                                  u2803 0266                                    u2731 01CC  
                                  u2651 0176                                    u2571 00E9  
                                  u2900 0308                                    u2820 028C  
                                  u2804 0267                                    u2740 01EB  
                                  u2732 01CD                                    u2660 017C  
                                  u2644 0172                                    u2580 00FD  
                                  u3197 05C1                                    u2901 0307  
                                  u2821 028B                                    u2813 027B  
                                  u2805 026C                                    u2741 01EA  
                                  u2733 01D2                                    u2661 017B  
                                  u2581 00F9                                    u2806 026D  
                                  u2750 0200                                    u2734 01D3  
                                  u2670 0190                                    u2495 0607  
                                  u2911 032B                                    u2831 02A1  
                                  u2751 01FF                                    u2743 01E7  
                                  u2735 01D8                                    u2671 018F  
                                  u2920 0358                                    u2912 032E  
                                  u2840 02C0                                    u2832 02A2  
                                  u2736 01D9                                    u2680 0197  
                                  u2921 0357                                    u2913 0335  
                                  u2841 02BF                                    u2833 02A7  
                                  u2761 020F                                    u2681 0196  
                                  u2930 035F                                    u2914 0338  
                                  u2850 02CB                                    u2834 02A8  
                                  u2770 022E                                    u2762 0210  
                                  u2690 019D                                    u2594 0100  
                                  u2931 035E                                    u2915 033F  
                                  u2851 02CA                                    u2843 02BC  
                                  u2835 02AD                                    u2771 022D  
                                  u2763 0215                                    u2691 019C  
                                  u2940 0363                                    u2916 0342  
                                  u2860 02D0                                    u2836 02AE  
                                  u2780 0240                                    u2764 0216  
                                  u2941 0362                                    u2925 0354  
                                  u2861 02CF                                    u2781 023F  
                                  u2773 022A                                    u2765 021B  
                                  u2950 0370                                    u2870 02D5  
                                  u2790 0246                                    u2766 021C  
                                  u2951 036F                                    u2871 02D4  
                                  u2791 0245                                    u2880 02DA  
                                  u2961 03AA                                    u2881 02D9  
                                  u2970 03D7                                    u2962 03AD  
                                  u2890 02DF                                    u2971 03D6  
                                  u2963 03B4                                    u2891 02DE  
                                  u2980 03EF                                    u2964 03B7  
                                  u2981 03EE                                    u2965 03BE  
                                  u2990 03F8                                    u2966 03C1  
                                  u2991 03F7                                    u2975 03D3  
                                  _TMR0 0001                                    _main 0035  
                                  btemp 007E                                    start 000B  
                     ?_getSensorResults 0072             _sensors_reading_in_progress 003C  
                    ??_getSensorResults 0075                    __end_of_EEPROM_Write 0F68  
                                 ??_isr 0070                                   ?_main 0070  
                                 _EEADR 010D                                   _ANSEL 0188  
                       __end_of___lldiv 0656                                   _T1CON 0010  
                                 i1l271 0732                                   i1l269 0726  
                                 _TMR1H 000F                                   _TMR1L 000E  
                                 _PORTA 0005                                   _PORTB 0006  
                                 _PORTC 0007                                   _TRISA 0085  
                                 _TRISB 0086                                   _TRISC 0087  
                   ___lmul@multiplicand 0076                         __end_of_readADC 0F8A  
                                 main@i 00CF                                   pclath 000A  
                                 status 0003                                   wtemp0 007E  
               loadSettings@value16bit1 0048                 loadSettings@value16bit2 0049  
               loadSettings@value16bit3 004A                 loadSettings@value16bit4 004B  
                      EEPROM_Write@data 0072                     _maxvoltageerrortime 00CA  
                       __initialization 000D                            _voltageerror 003A  
            __end_of_startSensorReading 0EFA                            __end_of_main 0584  
                 __end_of_EEPROM_Read16 0F4A                           ?_loadSettings 0047  
                                ??_main 0060                       _buzzer_start_time 00A4  
                                _ADCON0 001F                                  _ADCON1 009F  
                                _ADRESH 001E                                  _ADRESL 009E  
                                _EEDATA 010C                                  _EECON2 018D  
                                _ANSELH 0189                                  i1l1801 072E  
                                i1l1803 072F                                  i1l1805 0731  
                                u210_20 0714                                  u210_21 0713  
                                i1l1771 06EF                                  i1l1773 06F5  
                                i1l1781 0708                                  i1l1791 071A  
                                i1l1783 070C                                  i1l1775 0703  
                                u211_20 0718                                  i1l1793 071E  
                                u211_21 0717                                  i1l1785 070F  
                                i1l1777 0704                                  i1l1795 0720  
                                i1l1787 0714                                  i1l1779 0706  
                                i1l1797 0724                                  i1l1789 0718  
                                i1l1799 0728                                  u212_20 071E  
                                u212_21 071D                                  u213_20 0724  
                                u213_21 0723                                  u214_20 072E  
                                u214_21 072D                                  u208_20 06F5  
                                u208_21 06F4                                  u209_20 070C  
                                u209_21 070B                                  ___lmul 0739  
                                ___wmul 0F8A                         _lastdryruncheck 00AC  
                             ??___lldiv 0054                          ??_loadSettings 007A  
                        _trigger_buzzer 0FB1                                  _millis 0028  
                                _potraw 00BC                               ??_readADC 0074  
                                saved_w 007E              __end_of_check_button_press 05F0  
                          ?_setupTimer0 0070                          _EEPROM_Write16 0EDC  
               __end_of__initialization 0032                          __pcstackCOMMON 0070  
                __end_of_trigger_buzzer 0FD8                            __pidataBANK0 0EC7  
                          __pidataBANK1 0EFA                           _lastflowcheck 0030  
                 loadSettings@value8bit 0047                          _OPTION_REGbits 0081  
        trigger_buzzer@duration_seconds 0072                         _lastsensorcheck 0020  
                __end_of_EEPROM_Write16 0EEB                            _EEPROM_Write 0F4A  
                            __pbssBANK0 0020                              __pbssBANK1 00A0  
                         ?_saveSettings 0047                              __pmaintext 0035  
                  EEPROM_Read16@address 0079                         ?_trigger_buzzer 0072  
                               ?___lmul 0072                                 ?___wmul 005A  
                            __pintentry 0004                          ___lmul@product 0048  
                       _minvoltagelimit 006C                         _seconds_counter 002C  
                       ?_EEPROM_Write16 0074                    __end_of_loadSettings 06A5  
                         _reading_count 007B                          ??_saveSettings 0077  
                            _flowactive 0034                                 ___lldiv 05F0  
                            _initSystem 0FD8                              _init_timer 0F0A  
                               __ptext1 0FB1                                 __ptext2 0EEB  
                               __ptext3 0ECE                                 __ptext4 0781  
                               __ptext5 0EDC                                 __ptext6 0F4A  
                               __ptext7 0F68                                 __ptext8 0656  
                               __ptext9 0F2C                                 _readADC 0F68  
                             _T1CONbits 0010                      _startSensorReading 0EEB  
                            _dryruntime 00B8                           _buzzer_active 0032  
                            _maxruntime 00BE                   _low_sensor_high_count 007A  
                               clrloop0 07F9                                 _voltage 0040  
                  end_of_initialization 0032                     ?_startSensorReading 0070  
                         _buzzer_update 06A5                      EEPROM_Write16@data 0074  
                         ??_EEPROM_Read 0072                         ___lldiv@divisor 004C  
                       ___lldiv@counter 0059             getSensorResults@high_active 0073  
                  ??_startSensorReading 0072                 saveSettings@value16bit1 0047  
               saveSettings@value16bit2 0049                 saveSettings@value16bit3 004B  
               saveSettings@value16bit4 004D                               _PORTAbits 0005  
                             _PORTBbits 0006                               _PORTCbits 0007  
                        ?_buzzer_update 0070             getSensorResults@flow_active 0074  
                    _check_button_press 0584                              _voltageraw 00BA  
                            _voltagesum 00B6                     __end_of_EEPROM_Read 07F8  
                        __end_of___lmul 0781                             ?_initSystem 0070  
                        __end_of___wmul 0FB1                     ?_check_button_press 0070  
                           ?_init_timer 0070                      _high_sensor_active 0045  
              _sensors_reading_complete 003D                    __end_of_saveSettings 07B7  
                   start_initialization 000D                        _getSensorResults 07B7  
                           __end_of_isr 0739                    ??_check_button_press 0072  
                      ??_trigger_buzzer 0074                   EEPROM_Write16@address 0076  
                              ??___lmul 0047                                ??___wmul 007A  
                            init_fetch0 0F1B                             __pdataBANK0 0068  
                           __pdataBANK1 00BE                           _EEPROM_Read16 0F2C  
                          _loadSettings 0656                        ??_EEPROM_Write16 0076  
                 saveSettings@value8bit 0077                             __pbssCOMMON 007A  
                             ___latbits 0001                           __pcstackBANK0 0047  
                         __pcstackBANK1 00CE                         ??_buzzer_update 0072  
                           _EEPROM_Read 07E5                                ?___lldiv 004C  
                        ?_EEPROM_Read16 0073                     EEPROM_Read16@result 0077  
                              ?_readADC 0072                               _mannualon 003B  
                     interrupt_function 0004                          ___wmul@product 005E  
                             clear_ram0 07F8                                _PIE1bits 008C  
                             _tankempty 0036                                _PIR1bits 000C  
                        _motorstarttime 00A8                              _ADCON0bits 001F  
                     ___wmul@multiplier 005A                         _buzzer_duration 00B4  
                         ??_setupTimer0 0072                       ___lmul@multiplier 0072  
                 _minimumrunningvoltage 0068                              _EECON1bits 018C  
check_button_press@long_press_threshold 0074                            _saveSettings 0781  
              __end_of_getSensorResults 07E5                         ??_EEPROM_Read16 0075  
                         _preflowactive 0033                            ??_initSystem 0072  
                           _last_millis 00B0                            ??_init_timer 0072  
                        readADC@channel 0075              getSensorResults@low_active 0072  
                      _lastvoltageerror 0024                                __ptext10 07E5  
                              __ptext11 0F0A                                __ptext12 0FD8  
                              __ptext13 07B7                                __ptext14 0584  
                              __ptext15 06A5                                __ptext16 0F8A  
                              __ptext17 0739                                __ptext18 05F0  
                              __ptext19 06EF                           ?_EEPROM_Write 0072  
                    __end_of_initSystem 1000                     __end_of_setupTimer0 0EDC  
                    __end_of_init_timer 0F1B                             _dryrunerror 0039  
                    _flow_sensor_active 0044                              _INTCONbits 000B  
                              init_ram0 0F1F                          ??_EEPROM_Write 0073  
                              intlevel1 0000                            _sensorbuffer 00C8  
                          ?_EEPROM_Read 0070                        ___lldiv@dividend 0050  
                            _OSCCONbits 008F                      EEPROM_Read@address 0072  
                          _pretankempty 0035                            _motorrunning 0037  
          check_button_press@hold_count 0076                         _maxvoltagelimit 006A  
                       _maxruntimeindex 006E                            _settingsmode 0041  
                      ___lldiv@quotient 0055                   _maximumrinningvoltage 00CC  
                          _timeouterror 0038                  _high_sensor_high_count 003F  
                _flow_sensor_high_count 003E                             _setupTimer0 0ECE  
                 __end_of_buzzer_update 06EF            check_button_press@long_press 0078  
                   EEPROM_Write@address 0073  
